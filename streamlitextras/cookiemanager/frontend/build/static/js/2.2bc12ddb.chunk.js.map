{"version":3,"sources":["../../src/event.mjs","../../src/event-target.mjs","../node_modules/.pnpm/@babel+runtime@7.9.0/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../node_modules/.pnpm/@babel+runtime@7.9.0/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../node_modules/.pnpm/@babel+runtime@7.9.0/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","../node_modules/.pnpm/@babel+runtime@7.9.0/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","../node_modules/.pnpm/@babel+runtime@7.9.0/node_modules/@babel/runtime/helpers/esm/classCallCheck.js","../node_modules/.pnpm/@babel+runtime@7.9.0/node_modules/@babel/runtime/helpers/esm/createClass.js","../node_modules/.pnpm/@babel+runtime@7.9.0/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/.pnpm/@babel+runtime@7.9.0/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/.pnpm/@babel+runtime@7.9.0/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/.pnpm/@babel+runtime@7.9.0/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","../node_modules/.pnpm/@babel+runtime@7.9.0/node_modules/@babel/runtime/helpers/esm/AwaitValue.js","../node_modules/.pnpm/@babel+runtime@7.9.0/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator.js","../node_modules/.pnpm/@babel+runtime@7.9.0/node_modules/@babel/runtime/helpers/esm/AsyncGenerator.js","../node_modules/.pnpm/@babel+runtime@7.9.0/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator.js","../node_modules/.pnpm/@babel+runtime@7.9.0/node_modules/@babel/runtime/helpers/esm/asyncGeneratorDelegate.js","../node_modules/.pnpm/flatbuffers@1.11.0/node_modules/flatbuffers/js/flatbuffers.mjs","../node_modules/.pnpm/text-encoding-utf-8@1.0.2/node_modules/text-encoding-utf-8/lib/encoding.lib.mjs","../util/utf8.ts","../node_modules/.pnpm/@babel+runtime@7.9.0/node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","../node_modules/.pnpm/@babel+runtime@7.9.0/node_modules/@babel/runtime/helpers/esm/inherits.js","../node_modules/.pnpm/@babel+runtime@7.9.0/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js","../node_modules/.pnpm/@babel+runtime@7.9.0/node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js","../node_modules/.pnpm/@babel+runtime@7.9.0/node_modules/@babel/runtime/helpers/esm/typeof.js","../node_modules/.pnpm/@babel+runtime@7.9.0/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","../node_modules/.pnpm/@babel+runtime@7.9.0/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js","../node_modules/.pnpm/@babel+runtime@7.9.0/node_modules/@babel/runtime/helpers/esm/createSuper.js","../io/interfaces.ts","../util/compat.ts","../util/buffer.ts","../io/adapters.ts","../node_modules/.pnpm/@babel+runtime@7.9.0/node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/.pnpm/@babel+runtime@7.9.0/node_modules/@babel/runtime/helpers/esm/objectSpread2.js","../node_modules/.pnpm/@babel+runtime@7.9.0/node_modules/@babel/runtime/helpers/esm/get.js","../node_modules/.pnpm/@babel+runtime@7.9.0/node_modules/@babel/runtime/helpers/esm/superPropBase.js","../vector.ts","../fb/Schema.ts","../fb/Message.ts","../enum.ts","../util/bit.ts","../node_modules/.pnpm/@babel+runtime@7.9.0/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/.pnpm/@babel+runtime@7.9.0/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/.pnpm/@babel+runtime@7.9.0/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/.pnpm/@babel+runtime@7.9.0/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../visitor.ts","../visitor/typecomparator.ts","../type.ts","../data.ts","../util/pretty.ts","../builder/valid.ts","../builder/buffer.ts","../builder.ts","../builder/bool.ts","../builder/null.ts","../builder/date.ts","../builder/decimal.ts","../builder/dictionary.ts","../builder/fixedsizebinary.ts","../util/math.ts","../builder/float.ts","../node_modules/.pnpm/@babel+runtime@7.9.0/node_modules/@babel/runtime/helpers/esm/construct.js","../util/bn.ts","../builder/int.ts","../builder/time.ts","../builder/timestamp.ts","../builder/interval.ts","../builder/binary.ts","../builder/utf8.ts","../builder/run.ts","../vector/row.ts","../util/vector.ts","../vector/chunked.ts","../column.ts","../util/args.ts","../schema.ts","../builder/list.ts","../builder/fixedsizelist.ts","../builder/map.ts","../builder/struct.ts","../builder/union.ts","../visitor/set.ts","../fb/File.ts","../visitor/builderctor.ts","../ipc/metadata/file.ts","../builder/index.ts","../io/stream.ts","../io/file.ts","../util/int.ts","../visitor/vectorloader.ts","../visitor/typeassembler.ts","../ipc/metadata/json.ts","../ipc/metadata/message.ts","../ipc/message.ts","../visitor/vectorassembler.ts","../ipc/writer.ts","../util/recordbatch.ts","../node_modules/.pnpm/@babel+runtime@7.9.0/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/.pnpm/@babel+runtime@7.9.0/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","../vector/base.ts","../vector/binary.ts","../vector/bool.ts","../vector/date.ts","../vector/decimal.ts","../vector/dictionary.ts","../vector/fixedsizebinary.ts","../vector/fixedsizelist.ts","../vector/float.ts","../vector/interval.ts","../vector/int.ts","../vector/list.ts","../vector/map.ts","../vector/null.ts","../vector/struct.ts","../vector/timestamp.ts","../vector/time.ts","../vector/union.ts","../vector/utf8.ts","../util/fn.ts","../visitor/get.ts","../visitor/indexof.ts","../visitor/iterator.ts","../visitor/toarray.ts","../visitor/bytewidth.ts","../visitor/vectorctor.ts","../vector/index.ts","../table.ts","../recordbatch.ts","../ipc/reader.ts","../io/whatwg/iterable.ts","../io/whatwg/builder.ts","../io/whatwg/reader.ts","../io/whatwg/writer.ts","../compute/predicate.ts","../compute/dataframe.ts","../Arrow.ts","../Arrow.dom.ts","../node_modules/.pnpm/streamlit-component-lib@1.4.0/node_modules/streamlit-component-lib/dist/ArrowTable.js","../node_modules/.pnpm/streamlit-component-lib@1.4.0/node_modules/streamlit-component-lib/dist/streamlit.js","../node_modules/.pnpm/streamlit-component-lib@1.4.0/node_modules/streamlit-component-lib/dist/StreamlitReact.js","../node_modules/.pnpm/react@16.14.0/node_modules/react/index.js","../node_modules/.pnpm/cookie@0.4.2/node_modules/cookie/index.js","../node_modules/.pnpm/hoist-non-react-statics@3.3.2/node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js","../node_modules/.pnpm/universal-cookie@4.0.4/node_modules/universal-cookie/es6/utils.js","../node_modules/.pnpm/universal-cookie@4.0.4/node_modules/universal-cookie/es6/Cookies.js","../node_modules/.pnpm/universal-cookie@4.0.4/node_modules/universal-cookie/es6/index.js","../node_modules/.pnpm/react-is@16.13.1/node_modules/react-is/index.js","../node_modules/.pnpm/react-is@16.13.1/node_modules/react-is/cjs/react-is.production.min.js","../node_modules/.pnpm/react@16.14.0/node_modules/react/cjs/react.production.min.js","../node_modules/.pnpm/object-assign@4.1.1/node_modules/object-assign/index.js"],"names":["privateData","WeakMap","wrappers","pd","event","retv","get","console","assert","setCancelFlag","data","passiveListener","cancelable","canceled","preventDefault","error","Event","eventTarget","set","this","eventPhase","currentTarget","stopped","immediateStopped","timeStamp","Date","now","Object","defineProperty","value","enumerable","keys","i","length","key","defineRedirectDescriptor","configurable","defineCallDescriptor","apply","arguments","getWrapper","proto","prototype","wrapper","BaseEvent","CustomEvent","call","create","constructor","writable","isFunc","getOwnPropertyDescriptor","defineWrapper","getPrototypeOf","isStopped","setPassiveListener","type","composedPath","stopPropagation","stopImmediatePropagation","Boolean","bubbles","composed","cancelBubble","initEvent","window","setPrototypeOf","listenersMap","isObject","x","getListeners","listeners","TypeError","defineEventAttribute","eventTargetPrototype","eventName","node","listenerType","listener","next","prev","delete","newNode","passive","once","defineEventAttributeDescriptor","defineCustomEventTarget","eventNames","CustomEventTarget","EventTarget","Array","isArray","types","Map","addEventListener","options","optionsIsObj","capture","undefined","removeEventListener","dispatchEvent","wrappedEvent","wrapEvent","err","handleEvent","setEventPhase","setCurrentTarget","defaultPrevented","_arrayLikeToArray","arr","len","arr2","_unsupportedIterableToArray","o","minLen","n","toString","slice","name","from","test","_createForOfIteratorHelper","Symbol","iterator","F","s","done","e","_e","f","it","normalCompletion","didErr","step","_e2","asyncGeneratorStep","gen","resolve","reject","_next","_throw","arg","info","Promise","then","_asyncToGenerator","fn","self","args","_classCallCheck","instance","Constructor","_defineProperties","target","props","descriptor","_createClass","protoProps","staticProps","_slicedToArray","_arr","_n","_d","_s","_i","push","_AwaitValue","wrapped","_awaitAsyncGenerator","AsyncGenerator","front","back","resume","result","wrappedAwait","settle","_invoke","request","_wrapAsyncGenerator","_asyncGeneratorDelegate","inner","awaitWrap","iter","waiting","pump","asyncIterator","flatbuffers","inRange","a","min","max","ToDictionary","Offset","Table","SIZEOF_SHORT","SIZEOF_INT","FILE_IDENTIFIER_LENGTH","Encoding","UTF8_BYTES","UTF16_STRING","int32","Int32Array","float32","Float32Array","buffer","float64","Float64Array","isLittleEndian","Uint16Array","Uint8Array","Long","low","high","ZERO","toFloat64","equals","other","Builder","opt_initial_size","initial_size","bb","ByteBuffer","allocate","space","minalign","vtable","vtable_in_use","isNested","object_start","vtables","vector_num_elems","force_defaults","clear","capacity","forceDefaults","dataBuffer","asUint8Array","bytes","subarray","position","offset","prep","size","additional_bytes","align_size","old_buf_size","growByteBuffer","pad","byte_size","writeInt8","writeInt16","writeInt32","writeInt64","writeFloat32","writeFloat64","addInt8","addInt16","addInt32","addInt64","addFloat32","addFloat64","addFieldInt8","voffset","defaultValue","slot","addFieldInt16","addFieldInt32","addFieldInt64","addFieldFloat32","addFieldFloat64","addFieldOffset","addOffset","addFieldStruct","nested","obj","Error","notNested","new_buf_size","nbb","setPosition","startObject","numfields","endObject","vtableloc","trimmed_size","existing_vtable","vt1","outer_loop","vt2","readInt16","j","finish","root_table","opt_file_identifier","file_identifier","charCodeAt","requiredField","table","field","table_start","vtable_start","readInt32","startVector","elem_size","num_elems","alignment","endVector","createString","utf8","codePoint","createLong","bytes_","position_","readInt8","readUint8","readUint16","readUint32","readInt64","readUint64","readFloat32","readFloat64","writeUint8","writeUint16","writeUint32","writeUint64","getBufferIdentifier","String","fromCharCode","__offset","bb_pos","vtable_offset","__union","t","__string","opt_encoding","b","c","__indirect","__vector","__vector_len","__has_identifier","ident","Stream","tokens","endOfStream","read","shift","prepend","token","unshift","pop","decoderError","fatal","opt_code_point","TextDecoder","encoding","toLowerCase","_streaming","_BOMseen","_decoder","_fatal","_ignoreBOM","TextEncoder","_encoder","_options","UTF8Decoder","utf8_code_point","utf8_bytes_seen","utf8_bytes_needed","utf8_lower_boundary","utf8_upper_boundary","handler","stream","bite","code_point","UTF8Encoder","count","temp","decode","input","ArrayBuffer","byteOffset","byteLength","input_stream","code_points","indexOf","cp","codePointsToString","encode","opt_string","string","u","d","stringToCodePoints","_Buffer","Buffer","useNativeEncoders","decodeUtf8","decoder","encodeUtf8","encoder","_setPrototypeOf","p","__proto__","_inherits","subClass","superClass","_getPrototypeOf","_isNativeReflectConstruct","Reflect","construct","sham","Proxy","_typeof","_assertThisInitialized","ReferenceError","_possibleConstructorReturn","_createSuper","Derived","Super","NewTarget","ITERATOR_DONE","freeze","_json","_getDOMStream","tee","_getNodeStream","pipe","pipeTo","duplex","pipeThrough","_DOMStream","toDOMStream","_nodeStream","toNodeStream","_values","resolvers","_closedPromise","r","_closedPromiseResolve","reason","return","_ensureOpen","_error","_","abort","close","BigIntUnavailableError","BigIntUnavailable","asIntN","asUintN","BigInt","BigIntCtor","BigIntAvailable","BigInt64ArrayUnavailableError","BigInt64Array","BigInt64ArrayCtor","BigUint64ArrayUnavailableError","BigUint64Array","BigUint64ArrayCtor","isNumber","isBoolean","isFunction","isPromise","isIterable","isAsyncIterable","isArrowJSON","isIteratorResult","isFileHandle","isFetchResponse","toArrayBufferViewIterator","SharedArrayBuf","SharedArrayBuffer","memcpy","source","targetByteOffset","sourceByteLength","targetByteLength","dst","src","Math","joinUint8Arrays","chunks","sliced","xOffset","yOffset","xLen","yLen","y","collapseContiguousByteRanges","reduce","index","Infinity","toArrayBufferView","ArrayBufferViewCtor","isView","BYTES_PER_ELEMENT","toInt8Array","Int8Array","toInt16Array","Int16Array","toInt32Array","toUint16Array","toUint32Array","Uint32Array","toFloat32Array","toFloat64Array","toUint8ClampedArray","Uint8ClampedArray","ArrayCtor","wrap","buffers","toInt8ArrayIterator","toInt16ArrayIterator","toInt32ArrayIterator","toUint8ArrayIterator","toUint16ArrayIterator","toUint32ArrayIterator","toFloat32ArrayIterator","toFloat64ArrayIterator","toUint8ClampedArrayIterator","toArrayBufferViewAsyncIterator","emit","toInt8ArrayAsyncIterator","toInt16ArrayAsyncIterator","toInt32ArrayAsyncIterator","toUint8ArrayAsyncIterator","toUint16ArrayAsyncIterator","toUint32ArrayAsyncIterator","toFloat32ArrayAsyncIterator","toFloat64ArrayAsyncIterator","toUint8ClampedArrayAsyncIterator","rebaseValueOffsets","valueOffsets","compareArrayLike","fromIterable","fromAsyncIterable","fromDOMStream","fromNodeStream","byteRange","cmd","bufferLength","threw","isNaN","throw","releaseLock","byobReader","defaultReader","supportsBYOB","reader","getBYOBReader","getDefaultReader","catch","readFromBYOBReader","mode","readInto","onEvent","cleanup","events","evt","destroy","race","map","isFinite","_defineProperty","object","enumerableOnly","getOwnPropertySymbols","symbols","filter","sym","_objectSpread2","forEach","getOwnPropertyDescriptors","defineProperties","property","receiver","base","hasOwnProperty","desc","flatbuf","arrow","apache","org","MetadataVersion","UnionMode","Precision","DateUnit","TimeUnit","IntervalUnit","Type","Endianness","Null","__init","builder","startNull","endNull","Struct_","startStruct_","endStruct_","List","startList","endList","LargeList","startLargeList","endLargeList","FixedSizeList","listSize","startFixedSizeList","addListSize","endFixedSizeList","keysSorted","startMap","addKeysSorted","endMap","Union","Sparse","typeIdsOffset","numElems","startUnion","addMode","addTypeIds","endUnion","Int","bitWidth","isSigned","startInt","addBitWidth","addIsSigned","endInt","FloatingPoint","HALF","precision","startFloatingPoint","addPrecision","endFloatingPoint","Utf8","startUtf8","endUtf8","Binary","startBinary","endBinary","LargeUtf8","startLargeUtf8","endLargeUtf8","LargeBinary","startLargeBinary","endLargeBinary","FixedSizeBinary","byteWidth","startFixedSizeBinary","addByteWidth","endFixedSizeBinary","Bool","startBool","endBool","Decimal","scale","startDecimal","addScale","endDecimal","MILLISECOND","unit","startDate","addUnit","endDate","Time","startTime","endTime","Timestamp","SECOND","optionalEncoding","timezoneOffset","startTimestamp","addTimezone","endTimestamp","Interval","YEAR_MONTH","startInterval","endInterval","Duration","startDuration","endDuration","KeyValue","keyOffset","valueOffset","startKeyValue","addKey","addValue","endKeyValue","DictionaryEncoding","id","indexTypeOffset","isOrdered","startDictionaryEncoding","addId","addIndexType","addIsOrdered","endDictionaryEncoding","Field","NONE","nameOffset","nullable","typeType","typeOffset","dictionaryOffset","childrenOffset","customMetadataOffset","startField","addName","addNullable","addTypeType","addType","addDictionary","addChildren","addCustomMetadata","endField","Schema","Little","endianness","fieldsOffset","startSchema","addEndianness","addFields","endSchema","MessageHeader","FieldNode","null_count","RecordBatch","nodesOffset","buffersOffset","startRecordBatch","addLength","addNodes","addBuffers","endRecordBatch","DictionaryBatch","dataOffset","isDelta","startDictionaryBatch","addData","addIsDelta","endDictionaryBatch","Message","V1","version","headerType","headerOffset","bodyLength","startMessage","addVersion","addHeaderType","addHeader","addBodyLength","endMessage","BufferType","iterateBits","getBool","_data","_index","byte","bit","getBit","setBool","truncateBitmap","bitmap","alignedSize","packBools","values","xs","begin","context","byteIndex","remaining","popcnt_bit_range","lhs","rhs","sum","rhsInside","lhsInside","popcnt_array","cnt","pos","view","DataView","popcnt_uint32","getUint32","getUint16","getUint8","uint32","_toConsumableArray","nodes","visit","getVisitFn","throwIfNotFound","_node","visitor","dtype","inferDType","visitNull","visitBool","visitInt","Int8","visitInt8","Int16","visitInt16","Int32","visitInt32","Int64","visitInt64","Uint8","visitUint8","Uint16","visitUint16","Uint32","visitUint32","Uint64","visitUint64","Float","visitFloat","Float16","visitFloat16","Float32","visitFloat32","Float64","visitFloat64","visitUtf8","visitBinary","visitFixedSizeBinary","visitDate","DateDay","visitDateDay","DateMillisecond","visitDateMillisecond","visitTimestamp","TimestampSecond","visitTimestampSecond","TimestampMillisecond","visitTimestampMillisecond","TimestampMicrosecond","visitTimestampMicrosecond","TimestampNanosecond","visitTimestampNanosecond","visitTime","TimeSecond","visitTimeSecond","TimeMillisecond","visitTimeMillisecond","TimeMicrosecond","visitTimeMicrosecond","TimeNanosecond","visitTimeNanosecond","visitDecimal","visitList","Struct","visitStruct","visitUnion","DenseUnion","visitDenseUnion","SparseUnion","visitSparseUnion","Dictionary","visitDictionary","visitInterval","IntervalDayTime","visitIntervalDayTime","IntervalYearMonth","visitIntervalYearMonth","visitFixedSizeList","visitMap","typeId","SINGLE","DOUBLE","MICROSECOND","NANOSECOND","DAY","DAY_TIME","Dense","schema","compareFields","fields","others","every","compareField","compareConstructor","compareAny","compareInt","compareFloat","compareDate","compareTimestamp","timezone","compareTime","compareUnion","typeIds","children","compareInterval","indices","dictionary","toStringTag","ArrayType","child","valueType","join","typeIdToChildIndex","idx","atomicDictionaryId","getId","strideForType","nullCount","childData","floor","_nullCount","Data","stride","nullBitmap","childStride","_sliceBuffers","clone","_sliceChildren","newLength","fill","VALIDITY","TYPE","OFFSET","DATA","valueOffsetsOrChildren","valueToString","toPrimitive","JSON","stringify","createIsValidFunction","nullValues","fnBody","noNaNs","valueToCase","Function","roundLengthUpToNearest64Bytes","BPE","_resize","extra","reserved","array","reserve","numValid","val","cur","_ArrayType64","buffer64","ArrayType64","nulls","finished","_nulls","_isValid","new","flush","numInvalid","_offsets","_typeIds","reservedLength","reservedByteLength","setValid","isValid","setValue","_setValue","valid","numChildren","offsets","last","queueingStrategy","highWaterMark","sizeProperty","numChunks","append","toVector","opts","_pendingLength","pending","_pending","current","_flush","pendingLength","_flushPending","hashFn","_dictionaryOffset","_keysToIndices","valueToKey","keysToIndices","_dictionary","curr","concat","f64","u32","uint16ToFloat64","h","expo","sigf","sign","NaN","float64ToUint16","Parent","Class","bind","bignumToString","bignumToBigInt","isArrowBigNumSymbol","for","BigNum","SignedBigNum","UnsignedBigNum","DecimalBigNum","bignumToNumber","bn","hi","lo","signed","words","number","decimalToString","digits","base64","base32","checks","reverse","toJSON","valueOf","hint","assign","memo","num","BN","toBigInt","kParent","kRowIndex","kKeyToIdx","kIdxToVal","kCustomInspect","parent","numKeys","ktoi","itov","getValue","getIndex","ki","vi","kr","vr","k","v","has","callbackfn","thisArg","callback","m","str","createRowProxy","getChildAt","defineRowProxyProperties","findIndex","tmp","row","getter","setter","getKey","RowProxyHandler","isExtensible","deleteProperty","preventExtensions","ownKeys","clampIndex","adjust","clampRange","end","big0","isNaNFast","createElementComparator","search","typeofSearch","valueOfSearch","comparators","createSubElementsComparator","creatMapComparator","createArrayLikeComparator","createVectorComparator","createObjectComparator","compareArray","compareObject","vec","compareVector","lKeyItr","rKeyItr","rValItr","rVal","lKey","rKey","calculateOffsets","_type","_chunks","_chunkOffsets","_length","_numChildren","chunk","isDictionary","_indices","Chunked","flatten","_sliceInternal","columns","_children","vector","mid","isValidInternal","getInternal","element","indexOfInternal","toArray","arraySet","typedSet","chunkIndex","fromIndex","start","found","slices","chunkOffsets","chunkLength","chunkOffset","to","vectors","selectChunkArgs","_field","metadata","Column","column","rest","some","_chunk","selectArgs","Ctor","vals","_selectArgs","selectFieldArgs","_selectChunkArgs","res","selectVectorChildrenArgs","_selectVectorChildrenArgs","ret","entries","fieldIndex","valueIndex","dictionaries","generateDictionaryMap","compareSchemas","columnNames","names","columnIndices","curFields","mergeMaps","newFields","f2","newDictionaries","m1","m2","_run","run","childIndex","_valueToChildTypeId","childTypeId","setEpochMsToMillisecondsLong","epochMs","setVariableWidthBytes","setDateDay","setEpochMsToDays","setDateMillisecond","setNumeric","values64","long","setTimestampSecond","setTimestampMillisecond","setTimestampMicrosecond","setEpochMsToMicrosecondsLong","setTimestampNanosecond","setEpochMsToNanosecondsLong","setTimeSecond","setTimeMillisecond","setTimeMicrosecond","setTimeNanosecond","setDenseUnion","setSparseUnion","setIntervalDayTime","setIntervalYearMonth","itr","_setStructVectorValue","_setStructArrayValue","_setStructObjectValue","newBuilder","defaultOptions","getChildOptions","T","Footer","Block","schemaOffset","dictionariesOffset","recordBatchesOffset","startFooter","addSchema","addDictionaries","addRecordBatches","endFooter","metaDataLength","_Block","_Footer","V4","recordBatches","dictionaryBatches","_recordBatches","_dictionaryBatches","numRecordBatches","block","getRecordBatch","numDictionaries","getDictionaryBatch","buf","footer","getRootAsFooter","startRecordBatchesVector","rb","startDictionariesVector","db","dictionaryBatchesOffset","finishFooterBuffer","_footer","recordBatchesLength","dictionariesLength","fileBlock","FileBlock","createBlock","sync","toUint8Array","peek","AsyncByteStream","body","closed","cancel","readAt","getInt32","nBytes","file","_handle","stat","bytesRead","intAsHex","kPowersOfTen","L","R","product","lessThan","_times","_plus","out_buffer","fromString","out","posn","group","parseInt","substr","multiple","times","plus","left","right","this_high","other_high","negate","startsWith","L0","L1","L2","L3","R0","R1","R2","R3","multiply","sums","Int128","nodesIndex","buffersIndex","nextFieldNode","readNullBitmap","readData","readOffsets","visitMany","readTypeIds","readDictionary","nextBufferRange","sources","isTimestamp","isInt","isTime","isDate","convertArray","isDecimal","isBinary","isFixedSizeBinary","binaryDataFromJSON","isBool","isUtf8","joined","startTypeIdsVector","createTypeIdsVector","indexType","recordBatchFromJSON","fieldNodesFromJSON","fieldNodes","validity","buffersFromJSON","schemaFieldsFromJSON","_schema","fromJSON","fieldChildrenFromJSON","customMetadataFromJSON","_metadata","indexTypeFromJSON","typeFromJSON","_Field","_Schema","_Message","_KeyValue","_FieldNode","_Endianness","_DictionaryBatch","header","_version","_headerType","_createHeader","_bodyLength","msg","message","messageHeaderFromJSON","_message","getRootAsMessage","decodeMessageHeader","isSchema","isRecordBatch","isDictionaryBatch","finishMessageBuffer","_nodes","_buffers","_isDelta","_id","decodeFieldNodes","batch","nodesLength","decodeBuffers","bufferRegions","buffersLength","decodeSchemaFields","fieldsLength","decodeFieldChildren","childrenLength","decodeCustomMetadata","entry","customMetadataLength","customMetadata","decodeIndexType","decodeFieldType","typeIdsArray","childOffsets","childrenVectorOffset","createChildrenVector","metadataOffset","createCustomMetadataVector","dictType","dictMeta","fieldOffsets","startFieldsVector","fieldsVectorOffset","createFieldsVector","platformIsLittleEndian","Big","recordBatch","startNodesVector","nodesVectorOffset","startBuffersVector","b_","buffersVectorOffset","dictionaryBatch","createFieldNode","createBuffer","setInt16","invalidMessageMetadata","expected","actual","invalidMessageBodyLength","readMetadataLength","readMetadata","throwIfNull","readMessage","PADDING","metadataLength","_body","_batchIndex","_dictionaryIndex","batches","flattenDataSources","MAGIC","checkForMagicArrowString","magicLength","magicAndPadding","magicX2AndPadding","_byteLength","_bufferRegions","RangeError","isNull","addBuffer","_nullV","assembler","VectorAssembler","vectorChildren","assembleResult","assembleFlatVector","assembleFlatListVector","firstOffset","lastOffset","assembleListVector","assembleNestedVector","maxChildTypeId","childLengths","shiftedOffsets","unshiftedOffsets","childLength","_position","_started","_sink","_dictionaryBlocks","_recordBatchBlocks","_dictionaryDeltaOffsets","autoDestroy","writeLegacyIpcFormat","_autoDestroy","_writeLegacyIpcFormat","writeAll","writeAllAsync","reset","sink","objectMode","_writeFooter","compareTo","_writeSchema","payload","_writeRecordBatch","flatbufferSize","prefixSize","nPaddingBytes","_write","of","_writePadding","write","_writeMessage","assemble","_writeDictionaries","_writeBodyBuffers","padding","_writeDictionaryBatch","writableStrategy","readableStrategy","writer","RecordBatchStreamWriter","_writeMagic","RecordBatchFileWriter","noopBuf","nullBufs","bitmapLength","ensureSameLengthData","batchLength","l","batchData","_changeLengthAndBackfillNullBitmap","distributeColumnsIntoRecordBatches","distributeVectorsIntoRecordBatches","vecs","batchArgs","numBatches","numColumns","Number","POSITIVE_INFINITY","distributeChildData","uniformlyDistributeChunksAcrossRecordBatches","_objectWithoutProperties","excluded","sourceKeys","sourceSymbolKeys","propertyIsEnumerable","_bindDataAccessors","VectorName","isConcatSpreadable","vectorFromValuesWithType","ArrowType","InputType","typeCtor","dataCtor","ctor","is64bit","_values64","toBigInt64Array","toBigUint64Array","_row","bound","partial0","partial2","epochMillisecondsLongToMs","epochMillisecondsToDate","getVariableWidthBytes","getDateDay","epochDaysToMs","epochDaysToDate","getDateMillisecond","epochMillisecondsLongToDate","getNumeric","getTimestampSecond","getTimestampMillisecond","getTimestampMicrosecond","epochMicrosecondsLongToMs","getTimestampNanosecond","epochNanosecondsLongToMs","getTimeSecond","getTimeMillisecond","getDenseUnion","getSparseUnion","getIntervalDayTime","getIntervalYearMonth","interval","int32s","_vector","decimal","indexOfValue","searchElement","indexOfNull","compare","indexOfUnion","vectorIterator","getFn","nullByte","nullBit","nullableIterator","arrayOfVector","variableWidthColumnErrorMessage","____","visitFields","newDataType","throughIterable","transform","throughAsyncIterable","getByteWidth","wrapNullableSet","VectorCtor","partialType0","getColumnAt","getColumnIndex","Writer","nameToIndex","selectAt","columnName","newIdx","oldToNew","_f","_fs","empty","fromStruct","tableFromIterable","tableFromAsyncIterable","isSync","open","opening","cols","_dictionaries","collect","fs","vs","DictionaryCollector","readAllSync","impl","_impl","isFile","isAsync","isStream","readRecordBatch","RecordBatchReader","fromArrowJSON","fromFileHandle","fromAsyncByteStream","fromByteStream","readAllAsync","_recordBatchIndex","_loadVectors","_reader","shouldAutoDestroy","readSchema","_readNextMessageAndValidate","readMessageBody","_loadRecordBatch","_loadDictionaryBatch","_readFooter","_readDictionaryBatch","seek","_numChunks","_finished","_bufferedSize","builderOptions","_controller","_builder","_getSize","chunkByteLength","readableHighWaterMark","writableHighWaterMark","ReadableStream","_maybeFlush","WritableStream","_writeValueAndReturnChunkSize","bufferedSize","controller","desiredSize","_enqueue","enqueue","Value","ge","le","eq","colidx","expr","_bindLitLit","_bindLitCol","_bindColLit","_bindColCol","accum","And","Or","_batch","rtrn","left_func","right_func","col","lit","col_func","lastDictionary","reverseLookup","lastKey","func","countBy","scan","scanReverse","predicate","batchIndex","numRows","count_by","countByteLength","ceil","log","counts","_predicate","isBound","FilteredDataFrame","and","bm","hwm","pull","asyncIterableAsReadableDOMStream","iterableAsReadableDOMStream","queue","readable","ComponentMessageType","ArrowTable","indexBuffer","columnsBuffer","styler","_this","getCell","rowIndex","columnIndex","isBlankCell","headerRows","headerColumns","isIndexCell","isColumnsCell","classNames","content","dataColumnIndex","getContent","columnsTable","dataRowIndex","uuid","indexTable","displayValuesTable","dataTable","getColumnTypeId","nanosToDate","caption","displayValues","styles","numCols","rows","dataRows","dataColumns","serialize","nanos","__assign","Streamlit","API_VERSION","RENDER_EVENT","registeredMessageListener","setComponentReady","onMessageEvent","sendBackMsg","COMPONENT_READY","apiVersion","setFrameHeight","height","document","scrollHeight","lastFrameHeight","SET_FRAME_HEIGHT","setComponentValue","dataType","isBigIntArray","isTypedArray","SET_COMPONENT_VALUE","onRenderMessage","dataframeArgs","argsDataframeToObject","disabled","theme","_injectTheme","eventData","detail","argsDataframe","argsDataframeArrow","_a","toArrowTable","fromEntries","df","postMessage","isStreamlitMessage","style","createElement","head","appendChild","innerHTML","primaryColor","backgroundColor","secondaryBackgroundColor","textColor","font","__extends","extendStatics","__","_super","StreamlitComponentBase","componentDidMount","componentDidUpdate","React","PureComponent","module","exports","require","parse","opt","pairs","split","dec","pair","substring","trim","tryDecode","enc","fieldContentRegExp","maxAge","domain","path","expires","toUTCString","httpOnly","secure","sameSite","decodeURIComponent","encodeURIComponent","reactIs","REACT_STATICS","childContextTypes","contextType","contextTypes","defaultProps","displayName","getDefaultProps","getDerivedStateFromError","getDerivedStateFromProps","mixins","propTypes","KNOWN_STATICS","caller","callee","arity","MEMO_STATICS","TYPE_STATICS","getStatics","component","isMemo","ForwardRef","render","Memo","getOwnPropertyNames","objectPrototype","hoistNonReactStatics","targetComponent","sourceComponent","blacklist","inheritedComponent","targetStatics","sourceStatics","readCookie","cleanValue","cleanupCookieValue","doNotParse","isParsingCookie","Cookies","cookies","changeListeners","HAS_DOCUMENT_COOKIE","cookie","parseCookies","_updateBrowserValues","parseOptions","_emitChange","params","getAll","name_1","remove","finalOptions","addChangeListener","removeChangeListener","splice","g","q","w","z","$$typeof","A","AsyncMode","ConcurrentMode","ContextConsumer","ContextProvider","Element","Fragment","Lazy","Portal","Profiler","StrictMode","Suspense","isAsyncMode","isConcurrentMode","isContextConsumer","isContextProvider","isElement","isForwardRef","isFragment","isLazy","isPortal","isProfiler","isStrictMode","isSuspense","isValidElementType","typeOf","B","C","D","isMounted","enqueueForceUpdate","enqueueReplaceState","enqueueSetState","E","refs","updater","G","H","isReactComponent","setState","forceUpdate","I","isPureReactComponent","J","K","ref","__self","__source","M","_owner","O","P","Q","keyPrefix","S","V","U","replace","escape","W","aa","X","N","Y","Z","ba","ReactCurrentDispatcher","ReactCurrentBatchConfig","suspense","ReactCurrentOwner","IsSomeRendererActing","Children","only","Component","__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","cloneElement","createContext","_calculateChangedBits","_currentValue","_currentValue2","_threadCount","Provider","Consumer","_context","createFactory","createRef","forwardRef","isValidElement","lazy","_ctor","_status","_result","useCallback","useContext","useDebugValue","useEffect","useImperativeHandle","useLayoutEffect","useMemo","useReducer","useRef","useState","propIsEnumerable","toObject","test1","test2","test3","letter","shouldUseNative"],"mappings":"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","file":"static/js/2.2bc12ddb.chunk.js","sourcesContent":["/**\n * @typedef {object} PrivateData\n * @property {EventTarget} eventTarget The event target.\n * @property {{type:string}} event The original event object.\n * @property {number} eventPhase The current event phase.\n * @property {EventTarget|null} currentTarget The current event target.\n * @property {boolean} canceled The flag to prevent default.\n * @property {boolean} stopped The flag to stop propagation.\n * @property {boolean} immediateStopped The flag to stop propagation immediately.\n * @property {Function|null} passiveListener The listener if the current listener is passive. Otherwise this is null.\n * @property {number} timeStamp The unix time.\n * @private\n */\n\n/**\n * Private data for event wrappers.\n * @type {WeakMap<Event, PrivateData>}\n * @private\n */\nconst privateData = new WeakMap()\n\n/**\n * Cache for wrapper classes.\n * @type {WeakMap<Object, Function>}\n * @private\n */\nconst wrappers = new WeakMap()\n\n/**\n * Get private data.\n * @param {Event} event The event object to get private data.\n * @returns {PrivateData} The private data of the event.\n * @private\n */\nfunction pd(event) {\n    const retv = privateData.get(event)\n    console.assert(\n        retv != null,\n        \"'this' is expected an Event object, but got\",\n        event\n    )\n    return retv\n}\n\n/**\n * https://dom.spec.whatwg.org/#set-the-canceled-flag\n * @param data {PrivateData} private data.\n */\nfunction setCancelFlag(data) {\n    if (data.passiveListener != null) {\n        if (\n            typeof console !== \"undefined\" &&\n            typeof console.error === \"function\"\n        ) {\n            console.error(\n                \"Unable to preventDefault inside passive event listener invocation.\",\n                data.passiveListener\n            )\n        }\n        return\n    }\n    if (!data.event.cancelable) {\n        return\n    }\n\n    data.canceled = true\n    if (typeof data.event.preventDefault === \"function\") {\n        data.event.preventDefault()\n    }\n}\n\n/**\n * @see https://dom.spec.whatwg.org/#interface-event\n * @private\n */\n/**\n * The event wrapper.\n * @constructor\n * @param {EventTarget} eventTarget The event target of this dispatching.\n * @param {Event|{type:string}} event The original event to wrap.\n */\nfunction Event(eventTarget, event) {\n    privateData.set(this, {\n        eventTarget,\n        event,\n        eventPhase: 2,\n        currentTarget: eventTarget,\n        canceled: false,\n        stopped: false,\n        immediateStopped: false,\n        passiveListener: null,\n        timeStamp: event.timeStamp || Date.now(),\n    })\n\n    // https://heycam.github.io/webidl/#Unforgeable\n    Object.defineProperty(this, \"isTrusted\", { value: false, enumerable: true })\n\n    // Define accessors\n    const keys = Object.keys(event)\n    for (let i = 0; i < keys.length; ++i) {\n        const key = keys[i]\n        if (!(key in this)) {\n            Object.defineProperty(this, key, defineRedirectDescriptor(key))\n        }\n    }\n}\n\n// Should be enumerable, but class methods are not enumerable.\nEvent.prototype = {\n    /**\n     * The type of this event.\n     * @type {string}\n     */\n    get type() {\n        return pd(this).event.type\n    },\n\n    /**\n     * The target of this event.\n     * @type {EventTarget}\n     */\n    get target() {\n        return pd(this).eventTarget\n    },\n\n    /**\n     * The target of this event.\n     * @type {EventTarget}\n     */\n    get currentTarget() {\n        return pd(this).currentTarget\n    },\n\n    /**\n     * @returns {EventTarget[]} The composed path of this event.\n     */\n    composedPath() {\n        const currentTarget = pd(this).currentTarget\n        if (currentTarget == null) {\n            return []\n        }\n        return [currentTarget]\n    },\n\n    /**\n     * Constant of NONE.\n     * @type {number}\n     */\n    get NONE() {\n        return 0\n    },\n\n    /**\n     * Constant of CAPTURING_PHASE.\n     * @type {number}\n     */\n    get CAPTURING_PHASE() {\n        return 1\n    },\n\n    /**\n     * Constant of AT_TARGET.\n     * @type {number}\n     */\n    get AT_TARGET() {\n        return 2\n    },\n\n    /**\n     * Constant of BUBBLING_PHASE.\n     * @type {number}\n     */\n    get BUBBLING_PHASE() {\n        return 3\n    },\n\n    /**\n     * The target of this event.\n     * @type {number}\n     */\n    get eventPhase() {\n        return pd(this).eventPhase\n    },\n\n    /**\n     * Stop event bubbling.\n     * @returns {void}\n     */\n    stopPropagation() {\n        const data = pd(this)\n\n        data.stopped = true\n        if (typeof data.event.stopPropagation === \"function\") {\n            data.event.stopPropagation()\n        }\n    },\n\n    /**\n     * Stop event bubbling.\n     * @returns {void}\n     */\n    stopImmediatePropagation() {\n        const data = pd(this)\n\n        data.stopped = true\n        data.immediateStopped = true\n        if (typeof data.event.stopImmediatePropagation === \"function\") {\n            data.event.stopImmediatePropagation()\n        }\n    },\n\n    /**\n     * The flag to be bubbling.\n     * @type {boolean}\n     */\n    get bubbles() {\n        return Boolean(pd(this).event.bubbles)\n    },\n\n    /**\n     * The flag to be cancelable.\n     * @type {boolean}\n     */\n    get cancelable() {\n        return Boolean(pd(this).event.cancelable)\n    },\n\n    /**\n     * Cancel this event.\n     * @returns {void}\n     */\n    preventDefault() {\n        setCancelFlag(pd(this))\n    },\n\n    /**\n     * The flag to indicate cancellation state.\n     * @type {boolean}\n     */\n    get defaultPrevented() {\n        return pd(this).canceled\n    },\n\n    /**\n     * The flag to be composed.\n     * @type {boolean}\n     */\n    get composed() {\n        return Boolean(pd(this).event.composed)\n    },\n\n    /**\n     * The unix time of this event.\n     * @type {number}\n     */\n    get timeStamp() {\n        return pd(this).timeStamp\n    },\n\n    /**\n     * The target of this event.\n     * @type {EventTarget}\n     * @deprecated\n     */\n    get srcElement() {\n        return pd(this).eventTarget\n    },\n\n    /**\n     * The flag to stop event bubbling.\n     * @type {boolean}\n     * @deprecated\n     */\n    get cancelBubble() {\n        return pd(this).stopped\n    },\n    set cancelBubble(value) {\n        if (!value) {\n            return\n        }\n        const data = pd(this)\n\n        data.stopped = true\n        if (typeof data.event.cancelBubble === \"boolean\") {\n            data.event.cancelBubble = true\n        }\n    },\n\n    /**\n     * The flag to indicate cancellation state.\n     * @type {boolean}\n     * @deprecated\n     */\n    get returnValue() {\n        return !pd(this).canceled\n    },\n    set returnValue(value) {\n        if (!value) {\n            setCancelFlag(pd(this))\n        }\n    },\n\n    /**\n     * Initialize this event object. But do nothing under event dispatching.\n     * @param {string} type The event type.\n     * @param {boolean} [bubbles=false] The flag to be possible to bubble up.\n     * @param {boolean} [cancelable=false] The flag to be possible to cancel.\n     * @deprecated\n     */\n    initEvent() {\n        // Do nothing.\n    },\n}\n\n// `constructor` is not enumerable.\nObject.defineProperty(Event.prototype, \"constructor\", {\n    value: Event,\n    configurable: true,\n    writable: true,\n})\n\n// Ensure `event instanceof window.Event` is `true`.\nif (typeof window !== \"undefined\" && typeof window.Event !== \"undefined\") {\n    Object.setPrototypeOf(Event.prototype, window.Event.prototype)\n\n    // Make association for wrappers.\n    wrappers.set(window.Event.prototype, Event)\n}\n\n/**\n * Get the property descriptor to redirect a given property.\n * @param {string} key Property name to define property descriptor.\n * @returns {PropertyDescriptor} The property descriptor to redirect the property.\n * @private\n */\nfunction defineRedirectDescriptor(key) {\n    return {\n        get() {\n            return pd(this).event[key]\n        },\n        set(value) {\n            pd(this).event[key] = value\n        },\n        configurable: true,\n        enumerable: true,\n    }\n}\n\n/**\n * Get the property descriptor to call a given method property.\n * @param {string} key Property name to define property descriptor.\n * @returns {PropertyDescriptor} The property descriptor to call the method property.\n * @private\n */\nfunction defineCallDescriptor(key) {\n    return {\n        value() {\n            const event = pd(this).event\n            return event[key].apply(event, arguments)\n        },\n        configurable: true,\n        enumerable: true,\n    }\n}\n\n/**\n * Define new wrapper class.\n * @param {Function} BaseEvent The base wrapper class.\n * @param {Object} proto The prototype of the original event.\n * @returns {Function} The defined wrapper class.\n * @private\n */\nfunction defineWrapper(BaseEvent, proto) {\n    const keys = Object.keys(proto)\n    if (keys.length === 0) {\n        return BaseEvent\n    }\n\n    /** CustomEvent */\n    function CustomEvent(eventTarget, event) {\n        BaseEvent.call(this, eventTarget, event)\n    }\n\n    CustomEvent.prototype = Object.create(BaseEvent.prototype, {\n        constructor: { value: CustomEvent, configurable: true, writable: true },\n    })\n\n    // Define accessors.\n    for (let i = 0; i < keys.length; ++i) {\n        const key = keys[i]\n        if (!(key in BaseEvent.prototype)) {\n            const descriptor = Object.getOwnPropertyDescriptor(proto, key)\n            const isFunc = typeof descriptor.value === \"function\"\n            Object.defineProperty(\n                CustomEvent.prototype,\n                key,\n                isFunc\n                    ? defineCallDescriptor(key)\n                    : defineRedirectDescriptor(key)\n            )\n        }\n    }\n\n    return CustomEvent\n}\n\n/**\n * Get the wrapper class of a given prototype.\n * @param {Object} proto The prototype of the original event to get its wrapper.\n * @returns {Function} The wrapper class.\n * @private\n */\nfunction getWrapper(proto) {\n    if (proto == null || proto === Object.prototype) {\n        return Event\n    }\n\n    let wrapper = wrappers.get(proto)\n    if (wrapper == null) {\n        wrapper = defineWrapper(getWrapper(Object.getPrototypeOf(proto)), proto)\n        wrappers.set(proto, wrapper)\n    }\n    return wrapper\n}\n\n/**\n * Wrap a given event to management a dispatching.\n * @param {EventTarget} eventTarget The event target of this dispatching.\n * @param {Object} event The event to wrap.\n * @returns {Event} The wrapper instance.\n * @private\n */\nexport function wrapEvent(eventTarget, event) {\n    const Wrapper = getWrapper(Object.getPrototypeOf(event))\n    return new Wrapper(eventTarget, event)\n}\n\n/**\n * Get the immediateStopped flag of a given event.\n * @param {Event} event The event to get.\n * @returns {boolean} The flag to stop propagation immediately.\n * @private\n */\nexport function isStopped(event) {\n    return pd(event).immediateStopped\n}\n\n/**\n * Set the current event phase of a given event.\n * @param {Event} event The event to set current target.\n * @param {number} eventPhase New event phase.\n * @returns {void}\n * @private\n */\nexport function setEventPhase(event, eventPhase) {\n    pd(event).eventPhase = eventPhase\n}\n\n/**\n * Set the current target of a given event.\n * @param {Event} event The event to set current target.\n * @param {EventTarget|null} currentTarget New current target.\n * @returns {void}\n * @private\n */\nexport function setCurrentTarget(event, currentTarget) {\n    pd(event).currentTarget = currentTarget\n}\n\n/**\n * Set a passive listener of a given event.\n * @param {Event} event The event to set current target.\n * @param {Function|null} passiveListener New passive listener.\n * @returns {void}\n * @private\n */\nexport function setPassiveListener(event, passiveListener) {\n    pd(event).passiveListener = passiveListener\n}\n","import {\n    isStopped,\n    setCurrentTarget,\n    setEventPhase,\n    setPassiveListener,\n    wrapEvent,\n} from \"./event.mjs\"\n\n/**\n * @typedef {object} ListenerNode\n * @property {Function} listener\n * @property {1|2|3} listenerType\n * @property {boolean} passive\n * @property {boolean} once\n * @property {ListenerNode|null} next\n * @private\n */\n\n/**\n * @type {WeakMap<object, Map<string, ListenerNode>>}\n * @private\n */\nconst listenersMap = new WeakMap()\n\n// Listener types\nconst CAPTURE = 1\nconst BUBBLE = 2\nconst ATTRIBUTE = 3\n\n/**\n * Check whether a given value is an object or not.\n * @param {any} x The value to check.\n * @returns {boolean} `true` if the value is an object.\n */\nfunction isObject(x) {\n    return x !== null && typeof x === \"object\" //eslint-disable-line no-restricted-syntax\n}\n\n/**\n * Get listeners.\n * @param {EventTarget} eventTarget The event target to get.\n * @returns {Map<string, ListenerNode>} The listeners.\n * @private\n */\nfunction getListeners(eventTarget) {\n    const listeners = listenersMap.get(eventTarget)\n    if (listeners == null) {\n        throw new TypeError(\n            \"'this' is expected an EventTarget object, but got another value.\"\n        )\n    }\n    return listeners\n}\n\n/**\n * Get the property descriptor for the event attribute of a given event.\n * @param {string} eventName The event name to get property descriptor.\n * @returns {PropertyDescriptor} The property descriptor.\n * @private\n */\nfunction defineEventAttributeDescriptor(eventName) {\n    return {\n        get() {\n            const listeners = getListeners(this)\n            let node = listeners.get(eventName)\n            while (node != null) {\n                if (node.listenerType === ATTRIBUTE) {\n                    return node.listener\n                }\n                node = node.next\n            }\n            return null\n        },\n\n        set(listener) {\n            if (typeof listener !== \"function\" && !isObject(listener)) {\n                listener = null // eslint-disable-line no-param-reassign\n            }\n            const listeners = getListeners(this)\n\n            // Traverse to the tail while removing old value.\n            let prev = null\n            let node = listeners.get(eventName)\n            while (node != null) {\n                if (node.listenerType === ATTRIBUTE) {\n                    // Remove old value.\n                    if (prev !== null) {\n                        prev.next = node.next\n                    } else if (node.next !== null) {\n                        listeners.set(eventName, node.next)\n                    } else {\n                        listeners.delete(eventName)\n                    }\n                } else {\n                    prev = node\n                }\n\n                node = node.next\n            }\n\n            // Add new value.\n            if (listener !== null) {\n                const newNode = {\n                    listener,\n                    listenerType: ATTRIBUTE,\n                    passive: false,\n                    once: false,\n                    next: null,\n                }\n                if (prev === null) {\n                    listeners.set(eventName, newNode)\n                } else {\n                    prev.next = newNode\n                }\n            }\n        },\n        configurable: true,\n        enumerable: true,\n    }\n}\n\n/**\n * Define an event attribute (e.g. `eventTarget.onclick`).\n * @param {Object} eventTargetPrototype The event target prototype to define an event attrbite.\n * @param {string} eventName The event name to define.\n * @returns {void}\n */\nfunction defineEventAttribute(eventTargetPrototype, eventName) {\n    Object.defineProperty(\n        eventTargetPrototype,\n        `on${eventName}`,\n        defineEventAttributeDescriptor(eventName)\n    )\n}\n\n/**\n * Define a custom EventTarget with event attributes.\n * @param {string[]} eventNames Event names for event attributes.\n * @returns {EventTarget} The custom EventTarget.\n * @private\n */\nfunction defineCustomEventTarget(eventNames) {\n    /** CustomEventTarget */\n    function CustomEventTarget() {\n        EventTarget.call(this)\n    }\n\n    CustomEventTarget.prototype = Object.create(EventTarget.prototype, {\n        constructor: {\n            value: CustomEventTarget,\n            configurable: true,\n            writable: true,\n        },\n    })\n\n    for (let i = 0; i < eventNames.length; ++i) {\n        defineEventAttribute(CustomEventTarget.prototype, eventNames[i])\n    }\n\n    return CustomEventTarget\n}\n\n/**\n * EventTarget.\n *\n * - This is constructor if no arguments.\n * - This is a function which returns a CustomEventTarget constructor if there are arguments.\n *\n * For example:\n *\n *     class A extends EventTarget {}\n *     class B extends EventTarget(\"message\") {}\n *     class C extends EventTarget(\"message\", \"error\") {}\n *     class D extends EventTarget([\"message\", \"error\"]) {}\n */\nfunction EventTarget() {\n    /*eslint-disable consistent-return */\n    if (this instanceof EventTarget) {\n        listenersMap.set(this, new Map())\n        return\n    }\n    if (arguments.length === 1 && Array.isArray(arguments[0])) {\n        return defineCustomEventTarget(arguments[0])\n    }\n    if (arguments.length > 0) {\n        const types = new Array(arguments.length)\n        for (let i = 0; i < arguments.length; ++i) {\n            types[i] = arguments[i]\n        }\n        return defineCustomEventTarget(types)\n    }\n    throw new TypeError(\"Cannot call a class as a function\")\n    /*eslint-enable consistent-return */\n}\n\n// Should be enumerable, but class methods are not enumerable.\nEventTarget.prototype = {\n    /**\n     * Add a given listener to this event target.\n     * @param {string} eventName The event name to add.\n     * @param {Function} listener The listener to add.\n     * @param {boolean|{capture?:boolean,passive?:boolean,once?:boolean}} [options] The options for this listener.\n     * @returns {void}\n     */\n    addEventListener(eventName, listener, options) {\n        if (listener == null) {\n            return\n        }\n        if (typeof listener !== \"function\" && !isObject(listener)) {\n            throw new TypeError(\"'listener' should be a function or an object.\")\n        }\n\n        const listeners = getListeners(this)\n        const optionsIsObj = isObject(options)\n        const capture = optionsIsObj\n            ? Boolean(options.capture)\n            : Boolean(options)\n        const listenerType = capture ? CAPTURE : BUBBLE\n        const newNode = {\n            listener,\n            listenerType,\n            passive: optionsIsObj && Boolean(options.passive),\n            once: optionsIsObj && Boolean(options.once),\n            next: null,\n        }\n\n        // Set it as the first node if the first node is null.\n        let node = listeners.get(eventName)\n        if (node === undefined) {\n            listeners.set(eventName, newNode)\n            return\n        }\n\n        // Traverse to the tail while checking duplication..\n        let prev = null\n        while (node != null) {\n            if (\n                node.listener === listener &&\n                node.listenerType === listenerType\n            ) {\n                // Should ignore duplication.\n                return\n            }\n            prev = node\n            node = node.next\n        }\n\n        // Add it.\n        prev.next = newNode\n    },\n\n    /**\n     * Remove a given listener from this event target.\n     * @param {string} eventName The event name to remove.\n     * @param {Function} listener The listener to remove.\n     * @param {boolean|{capture?:boolean,passive?:boolean,once?:boolean}} [options] The options for this listener.\n     * @returns {void}\n     */\n    removeEventListener(eventName, listener, options) {\n        if (listener == null) {\n            return\n        }\n\n        const listeners = getListeners(this)\n        const capture = isObject(options)\n            ? Boolean(options.capture)\n            : Boolean(options)\n        const listenerType = capture ? CAPTURE : BUBBLE\n\n        let prev = null\n        let node = listeners.get(eventName)\n        while (node != null) {\n            if (\n                node.listener === listener &&\n                node.listenerType === listenerType\n            ) {\n                if (prev !== null) {\n                    prev.next = node.next\n                } else if (node.next !== null) {\n                    listeners.set(eventName, node.next)\n                } else {\n                    listeners.delete(eventName)\n                }\n                return\n            }\n\n            prev = node\n            node = node.next\n        }\n    },\n\n    /**\n     * Dispatch a given event.\n     * @param {Event|{type:string}} event The event to dispatch.\n     * @returns {boolean} `false` if canceled.\n     */\n    dispatchEvent(event) {\n        if (event == null || typeof event.type !== \"string\") {\n            throw new TypeError('\"event.type\" should be a string.')\n        }\n\n        // If listeners aren't registered, terminate.\n        const listeners = getListeners(this)\n        const eventName = event.type\n        let node = listeners.get(eventName)\n        if (node == null) {\n            return true\n        }\n\n        // Since we cannot rewrite several properties, so wrap object.\n        const wrappedEvent = wrapEvent(this, event)\n\n        // This doesn't process capturing phase and bubbling phase.\n        // This isn't participating in a tree.\n        let prev = null\n        while (node != null) {\n            // Remove this listener if it's once\n            if (node.once) {\n                if (prev !== null) {\n                    prev.next = node.next\n                } else if (node.next !== null) {\n                    listeners.set(eventName, node.next)\n                } else {\n                    listeners.delete(eventName)\n                }\n            } else {\n                prev = node\n            }\n\n            // Call this listener\n            setPassiveListener(\n                wrappedEvent,\n                node.passive ? node.listener : null\n            )\n            if (typeof node.listener === \"function\") {\n                try {\n                    node.listener.call(this, wrappedEvent)\n                } catch (err) {\n                    if (\n                        typeof console !== \"undefined\" &&\n                        typeof console.error === \"function\"\n                    ) {\n                        console.error(err)\n                    }\n                }\n            } else if (\n                node.listenerType !== ATTRIBUTE &&\n                typeof node.listener.handleEvent === \"function\"\n            ) {\n                node.listener.handleEvent(wrappedEvent)\n            }\n\n            // Break if `event.stopImmediatePropagation` was called.\n            if (isStopped(wrappedEvent)) {\n                break\n            }\n\n            node = node.next\n        }\n        setPassiveListener(wrappedEvent, null)\n        setEventPhase(wrappedEvent, 0)\n        setCurrentTarget(wrappedEvent, null)\n\n        return !wrappedEvent.defaultPrevented\n    },\n}\n\n// `constructor` is not enumerable.\nObject.defineProperty(EventTarget.prototype, \"constructor\", {\n    value: EventTarget,\n    configurable: true,\n    writable: true,\n})\n\n// Ensure `eventTarget instanceof window.EventTarget` is `true`.\nif (\n    typeof window !== \"undefined\" &&\n    typeof window.EventTarget !== \"undefined\"\n) {\n    Object.setPrototypeOf(EventTarget.prototype, window.EventTarget.prototype)\n}\n\nexport { defineEventAttribute, EventTarget }\nexport default EventTarget\n","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(n);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","import unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nexport default function _createForOfIteratorHelper(o) {\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (o = unsupportedIterableToArray(o))) {\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var it,\n      normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","export default function _AwaitValue(value) {\n  this.wrapped = value;\n}","import AwaitValue from \"./AwaitValue\";\nexport default function _awaitAsyncGenerator(value) {\n  return new AwaitValue(value);\n}","import AwaitValue from \"./AwaitValue\";\nexport default function AsyncGenerator(gen) {\n  var front, back;\n\n  function send(key, arg) {\n    return new Promise(function (resolve, reject) {\n      var request = {\n        key: key,\n        arg: arg,\n        resolve: resolve,\n        reject: reject,\n        next: null\n      };\n\n      if (back) {\n        back = back.next = request;\n      } else {\n        front = back = request;\n        resume(key, arg);\n      }\n    });\n  }\n\n  function resume(key, arg) {\n    try {\n      var result = gen[key](arg);\n      var value = result.value;\n      var wrappedAwait = value instanceof AwaitValue;\n      Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) {\n        if (wrappedAwait) {\n          resume(key === \"return\" ? \"return\" : \"next\", arg);\n          return;\n        }\n\n        settle(result.done ? \"return\" : \"normal\", arg);\n      }, function (err) {\n        resume(\"throw\", err);\n      });\n    } catch (err) {\n      settle(\"throw\", err);\n    }\n  }\n\n  function settle(type, value) {\n    switch (type) {\n      case \"return\":\n        front.resolve({\n          value: value,\n          done: true\n        });\n        break;\n\n      case \"throw\":\n        front.reject(value);\n        break;\n\n      default:\n        front.resolve({\n          value: value,\n          done: false\n        });\n        break;\n    }\n\n    front = front.next;\n\n    if (front) {\n      resume(front.key, front.arg);\n    } else {\n      back = null;\n    }\n  }\n\n  this._invoke = send;\n\n  if (typeof gen[\"return\"] !== \"function\") {\n    this[\"return\"] = undefined;\n  }\n}\n\nif (typeof Symbol === \"function\" && Symbol.asyncIterator) {\n  AsyncGenerator.prototype[Symbol.asyncIterator] = function () {\n    return this;\n  };\n}\n\nAsyncGenerator.prototype.next = function (arg) {\n  return this._invoke(\"next\", arg);\n};\n\nAsyncGenerator.prototype[\"throw\"] = function (arg) {\n  return this._invoke(\"throw\", arg);\n};\n\nAsyncGenerator.prototype[\"return\"] = function (arg) {\n  return this._invoke(\"return\", arg);\n};","import AsyncGenerator from \"./AsyncGenerator\";\nexport default function _wrapAsyncGenerator(fn) {\n  return function () {\n    return new AsyncGenerator(fn.apply(this, arguments));\n  };\n}","export default function _asyncGeneratorDelegate(inner, awaitWrap) {\n  var iter = {},\n      waiting = false;\n\n  function pump(key, value) {\n    waiting = true;\n    value = new Promise(function (resolve) {\n      resolve(inner[key](value));\n    });\n    return {\n      done: false,\n      value: awaitWrap(value)\n    };\n  }\n\n  ;\n\n  if (typeof Symbol === \"function\" && Symbol.iterator) {\n    iter[Symbol.iterator] = function () {\n      return this;\n    };\n  }\n\n  iter.next = function (value) {\n    if (waiting) {\n      waiting = false;\n      return value;\n    }\n\n    return pump(\"next\", value);\n  };\n\n  if (typeof inner[\"throw\"] === \"function\") {\n    iter[\"throw\"] = function (value) {\n      if (waiting) {\n        waiting = false;\n        throw value;\n      }\n\n      return pump(\"throw\", value);\n    };\n  }\n\n  if (typeof inner[\"return\"] === \"function\") {\n    iter[\"return\"] = function (value) {\n      if (waiting) {\n        waiting = false;\n        return value;\n      }\n\n      return pump(\"return\", value);\n    };\n  }\n\n  return iter;\n}","/// @file\n/// @addtogroup flatbuffers_javascript_api\n/// @{\n/// @cond FLATBUFFERS_INTERNAL\n\n/**\n * @fileoverview\n *\n * Need to suppress 'global this' error so the Node.js export line doesn't cause\n * closure compile to error out.\n * @suppress {globalThis}\n */\n\n/**\n * @const\n * @namespace\n */\nvar flatbuffers = {};\n\n/**\n * @typedef {number}\n */\nflatbuffers.Offset;\n\n/**\n * @typedef {{\n *   bb: flatbuffers.ByteBuffer,\n *   bb_pos: number\n * }}\n */\nflatbuffers.Table;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_SHORT = 2;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_INT = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.FILE_IDENTIFIER_LENGTH = 4;\n\n/**\n * @enum {number}\n */\nflatbuffers.Encoding = {\n  UTF8_BYTES: 1,\n  UTF16_STRING: 2\n};\n\n/**\n * @type {Int32Array}\n * @const\n */\nflatbuffers.int32 = new Int32Array(2);\n\n/**\n * @type {Float32Array}\n * @const\n */\nflatbuffers.float32 = new Float32Array(flatbuffers.int32.buffer);\n\n/**\n * @type {Float64Array}\n * @const\n */\nflatbuffers.float64 = new Float64Array(flatbuffers.int32.buffer);\n\n/**\n * @type {boolean}\n * @const\n */\nflatbuffers.isLittleEndian = new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1;\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @constructor\n * @param {number} low\n * @param {number} high\n */\nflatbuffers.Long = function(low, high) {\n  /**\n   * @type {number}\n   * @const\n   */\n  this.low = low | 0;\n\n  /**\n   * @type {number}\n   * @const\n   */\n  this.high = high | 0;\n};\n\n/**\n * @param {number} low\n * @param {number} high\n * @returns {flatbuffers.Long}\n */\nflatbuffers.Long.create = function(low, high) {\n  // Special-case zero to avoid GC overhead for default values\n  return low == 0 && high == 0 ? flatbuffers.Long.ZERO : new flatbuffers.Long(low, high);\n};\n\n/**\n * @returns {number}\n */\nflatbuffers.Long.prototype.toFloat64 = function() {\n  return (this.low >>> 0) + this.high * 0x100000000;\n};\n\n/**\n * @param {flatbuffers.Long} other\n * @returns {boolean}\n */\nflatbuffers.Long.prototype.equals = function(other) {\n  return this.low == other.low && this.high == other.high;\n};\n\n/**\n * @type {flatbuffers.Long}\n * @const\n */\nflatbuffers.Long.ZERO = new flatbuffers.Long(0, 0);\n\n/// @endcond\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a FlatBufferBuilder.\n *\n * @constructor\n * @param {number=} opt_initial_size\n */\nflatbuffers.Builder = function(opt_initial_size) {\n  if (!opt_initial_size) {\n    var initial_size = 1024;\n  } else {\n    var initial_size = opt_initial_size;\n  }\n\n  /**\n   * @type {flatbuffers.ByteBuffer}\n   * @private\n   */\n  this.bb = flatbuffers.ByteBuffer.allocate(initial_size);\n\n  /**\n   * Remaining space in the ByteBuffer.\n   *\n   * @type {number}\n   * @private\n   */\n  this.space = initial_size;\n\n  /**\n   * Minimum alignment encountered so far.\n   *\n   * @type {number}\n   * @private\n   */\n  this.minalign = 1;\n\n  /**\n   * The vtable for the current table.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtable = null;\n\n  /**\n   * The amount of fields we're actually using.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vtable_in_use = 0;\n\n  /**\n   * Whether we are currently serializing a table.\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.isNested = false;\n\n  /**\n   * Starting offset of the current struct/table.\n   *\n   * @type {number}\n   * @private\n   */\n  this.object_start = 0;\n\n  /**\n   * List of offsets of all vtables.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtables = [];\n\n  /**\n   * For the current vector being built.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vector_num_elems = 0;\n\n  /**\n   * False omits default values from the serialized data\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.force_defaults = false;\n};\n\nflatbuffers.Builder.prototype.clear = function() {\n  this.bb.clear();\n  this.space = this.bb.capacity();\n  this.minalign = 1;\n  this.vtable = null;\n  this.vtable_in_use = 0;\n  this.isNested = false;\n  this.object_start = 0;\n  this.vtables = [];\n  this.vector_num_elems = 0;\n  this.force_defaults = false;\n};\n\n/**\n * In order to save space, fields that are set to their default value\n * don't get serialized into the buffer. Forcing defaults provides a\n * way to manually disable this optimization.\n *\n * @param {boolean} forceDefaults true always serializes default values\n */\nflatbuffers.Builder.prototype.forceDefaults = function(forceDefaults) {\n  this.force_defaults = forceDefaults;\n};\n\n/**\n * Get the ByteBuffer representing the FlatBuffer. Only call this after you've\n * called finish(). The actual data starts at the ByteBuffer's current position,\n * not necessarily at 0.\n *\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.Builder.prototype.dataBuffer = function() {\n  return this.bb;\n};\n\n/**\n * Get the bytes representing the FlatBuffer. Only call this after you've\n * called finish().\n *\n * @returns {Uint8Array}\n */\nflatbuffers.Builder.prototype.asUint8Array = function() {\n  return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Prepare to write an element of `size` after `additional_bytes` have been\n * written, e.g. if you write a string, you need to align such the int length\n * field is aligned to 4 bytes, and the string data follows it directly. If all\n * you need to do is alignment, `additional_bytes` will be 0.\n *\n * @param {number} size This is the of the new element to write\n * @param {number} additional_bytes The padding size\n */\nflatbuffers.Builder.prototype.prep = function(size, additional_bytes) {\n  // Track the biggest thing we've ever aligned to.\n  if (size > this.minalign) {\n    this.minalign = size;\n  }\n\n  // Find the amount of alignment needed such that `size` is properly\n  // aligned after `additional_bytes`\n  var align_size = ((~(this.bb.capacity() - this.space + additional_bytes)) + 1) & (size - 1);\n\n  // Reallocate the buffer if needed.\n  while (this.space < align_size + size + additional_bytes) {\n    var old_buf_size = this.bb.capacity();\n    this.bb = flatbuffers.Builder.growByteBuffer(this.bb);\n    this.space += this.bb.capacity() - old_buf_size;\n  }\n\n  this.pad(align_size);\n};\n\n/**\n * @param {number} byte_size\n */\nflatbuffers.Builder.prototype.pad = function(byte_size) {\n  for (var i = 0; i < byte_size; i++) {\n    this.bb.writeInt8(--this.space, 0);\n  }\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt8 = function(value) {\n  this.bb.writeInt8(this.space -= 1, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt16 = function(value) {\n  this.bb.writeInt16(this.space -= 2, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt32 = function(value) {\n  this.bb.writeInt32(this.space -= 4, value);\n};\n\n/**\n * @param {flatbuffers.Long} value\n */\nflatbuffers.Builder.prototype.writeInt64 = function(value) {\n  this.bb.writeInt64(this.space -= 8, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat32 = function(value) {\n  this.bb.writeFloat32(this.space -= 4, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat64 = function(value) {\n  this.bb.writeFloat64(this.space -= 8, value);\n};\n/// @endcond\n\n/**\n * Add an `int8` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int8` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt8 = function(value) {\n  this.prep(1, 0);\n  this.writeInt8(value);\n};\n\n/**\n * Add an `int16` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int16` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt16 = function(value) {\n  this.prep(2, 0);\n  this.writeInt16(value);\n};\n\n/**\n * Add an `int32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt32 = function(value) {\n  this.prep(4, 0);\n  this.writeInt32(value);\n};\n\n/**\n * Add an `int64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {flatbuffers.Long} value The `int64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt64 = function(value) {\n  this.prep(8, 0);\n  this.writeInt64(value);\n};\n\n/**\n * Add a `float32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat32 = function(value) {\n  this.prep(4, 0);\n  this.writeFloat32(value);\n};\n\n/**\n * Add a `float64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat64 = function(value) {\n  this.prep(8, 0);\n  this.writeFloat64(value);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt8 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt8(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt16 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt16(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Long} value\n * @param {flatbuffers.Long} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || !value.equals(defaultValue)) {\n    this.addInt64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldOffset = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addOffset(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structs are stored inline, so nothing additional is being added. `d` is always 0.\n *\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldStruct = function(voffset, value, defaultValue) {\n  if (value != defaultValue) {\n    this.nested(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structures are always stored inline, they need to be created right\n * where they're used.  You'll get this assertion failure if you\n * created it elsewhere.\n *\n * @param {flatbuffers.Offset} obj The offset of the created object\n */\nflatbuffers.Builder.prototype.nested = function(obj) {\n  if (obj != this.offset()) {\n    throw new Error('FlatBuffers: struct must be serialized inline.');\n  }\n};\n\n/**\n * Should not be creating any other object, string or vector\n * while an object is being constructed\n */\nflatbuffers.Builder.prototype.notNested = function() {\n  if (this.isNested) {\n    throw new Error('FlatBuffers: object serialization must not be nested.');\n  }\n};\n\n/**\n * Set the current vtable at `voffset` to the current location in the buffer.\n *\n * @param {number} voffset\n */\nflatbuffers.Builder.prototype.slot = function(voffset) {\n  this.vtable[voffset] = this.offset();\n};\n\n/**\n * @returns {flatbuffers.Offset} Offset relative to the end of the buffer.\n */\nflatbuffers.Builder.prototype.offset = function() {\n  return this.bb.capacity() - this.space;\n};\n\n/**\n * Doubles the size of the backing ByteBuffer and copies the old data towards\n * the end of the new buffer (since we build the buffer backwards).\n *\n * @param {flatbuffers.ByteBuffer} bb The current buffer with the existing data\n * @returns {flatbuffers.ByteBuffer} A new byte buffer with the old data copied\n * to it. The data is located at the end of the buffer.\n *\n * uint8Array.set() formally takes {Array<number>|ArrayBufferView}, so to pass\n * it a uint8Array we need to suppress the type check:\n * @suppress {checkTypes}\n */\nflatbuffers.Builder.growByteBuffer = function(bb) {\n  var old_buf_size = bb.capacity();\n\n  // Ensure we don't grow beyond what fits in an int.\n  if (old_buf_size & 0xC0000000) {\n    throw new Error('FlatBuffers: cannot grow buffer beyond 2 gigabytes.');\n  }\n\n  var new_buf_size = old_buf_size << 1;\n  var nbb = flatbuffers.ByteBuffer.allocate(new_buf_size);\n  nbb.setPosition(new_buf_size - old_buf_size);\n  nbb.bytes().set(bb.bytes(), new_buf_size - old_buf_size);\n  return nbb;\n};\n/// @endcond\n\n/**\n * Adds on offset, relative to where it will be written.\n *\n * @param {flatbuffers.Offset} offset The offset to add.\n */\nflatbuffers.Builder.prototype.addOffset = function(offset) {\n  this.prep(flatbuffers.SIZEOF_INT, 0); // Ensure alignment is already done.\n  this.writeInt32(this.offset() - offset + flatbuffers.SIZEOF_INT);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Start encoding a new object in the buffer.  Users will not usually need to\n * call this directly. The FlatBuffers compiler will generate helper methods\n * that call this method internally.\n *\n * @param {number} numfields\n */\nflatbuffers.Builder.prototype.startObject = function(numfields) {\n  this.notNested();\n  if (this.vtable == null) {\n    this.vtable = [];\n  }\n  this.vtable_in_use = numfields;\n  for (var i = 0; i < numfields; i++) {\n    this.vtable[i] = 0; // This will push additional elements as needed\n  }\n  this.isNested = true;\n  this.object_start = this.offset();\n};\n\n/**\n * Finish off writing the object that is under construction.\n *\n * @returns {flatbuffers.Offset} The offset to the object inside `dataBuffer`\n */\nflatbuffers.Builder.prototype.endObject = function() {\n  if (this.vtable == null || !this.isNested) {\n    throw new Error('FlatBuffers: endObject called without startObject');\n  }\n\n  this.addInt32(0);\n  var vtableloc = this.offset();\n\n  // Trim trailing zeroes.\n  var i = this.vtable_in_use - 1;\n  for (; i >= 0 && this.vtable[i] == 0; i--) {}\n  var trimmed_size = i + 1;\n\n  // Write out the current vtable.\n  for (; i >= 0; i--) {\n    // Offset relative to the start of the table.\n    this.addInt16(this.vtable[i] != 0 ? vtableloc - this.vtable[i] : 0);\n  }\n\n  var standard_fields = 2; // The fields below:\n  this.addInt16(vtableloc - this.object_start);\n  var len = (trimmed_size + standard_fields) * flatbuffers.SIZEOF_SHORT;\n  this.addInt16(len);\n\n  // Search for an existing vtable that matches the current one.\n  var existing_vtable = 0;\n  var vt1 = this.space;\nouter_loop:\n  for (i = 0; i < this.vtables.length; i++) {\n    var vt2 = this.bb.capacity() - this.vtables[i];\n    if (len == this.bb.readInt16(vt2)) {\n      for (var j = flatbuffers.SIZEOF_SHORT; j < len; j += flatbuffers.SIZEOF_SHORT) {\n        if (this.bb.readInt16(vt1 + j) != this.bb.readInt16(vt2 + j)) {\n          continue outer_loop;\n        }\n      }\n      existing_vtable = this.vtables[i];\n      break;\n    }\n  }\n\n  if (existing_vtable) {\n    // Found a match:\n    // Remove the current vtable.\n    this.space = this.bb.capacity() - vtableloc;\n\n    // Point table to existing vtable.\n    this.bb.writeInt32(this.space, existing_vtable - vtableloc);\n  } else {\n    // No match:\n    // Add the location of the current vtable to the list of vtables.\n    this.vtables.push(this.offset());\n\n    // Point table to current vtable.\n    this.bb.writeInt32(this.bb.capacity() - vtableloc, this.offset() - vtableloc);\n  }\n\n  this.isNested = false;\n  return vtableloc;\n};\n/// @endcond\n\n/**\n * Finalize a buffer, poiting to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n */\nflatbuffers.Builder.prototype.finish = function(root_table, opt_file_identifier) {\n  if (opt_file_identifier) {\n    var file_identifier = opt_file_identifier;\n    this.prep(this.minalign, flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH);\n    if (file_identifier.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n      throw new Error('FlatBuffers: file identifier must be length ' +\n        flatbuffers.FILE_IDENTIFIER_LENGTH);\n    }\n    for (var i = flatbuffers.FILE_IDENTIFIER_LENGTH - 1; i >= 0; i--) {\n      this.writeInt8(file_identifier.charCodeAt(i));\n    }\n  }\n  this.prep(this.minalign, flatbuffers.SIZEOF_INT);\n  this.addOffset(root_table);\n  this.bb.setPosition(this.space);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * This checks a required field has been set in a given table that has\n * just been constructed.\n *\n * @param {flatbuffers.Offset} table\n * @param {number} field\n */\nflatbuffers.Builder.prototype.requiredField = function(table, field) {\n  var table_start = this.bb.capacity() - table;\n  var vtable_start = table_start - this.bb.readInt32(table_start);\n  var ok = this.bb.readInt16(vtable_start + field) != 0;\n\n  // If this fails, the caller will show what field needs to be set.\n  if (!ok) {\n    throw new Error('FlatBuffers: field ' + field + ' must be set');\n  }\n};\n\n/**\n * Start a new array/vector of objects.  Users usually will not call\n * this directly. The FlatBuffers compiler will create a start/end\n * method for vector types in generated code.\n *\n * @param {number} elem_size The size of each element in the array\n * @param {number} num_elems The number of elements in the array\n * @param {number} alignment The alignment of the array\n */\nflatbuffers.Builder.prototype.startVector = function(elem_size, num_elems, alignment) {\n  this.notNested();\n  this.vector_num_elems = num_elems;\n  this.prep(flatbuffers.SIZEOF_INT, elem_size * num_elems);\n  this.prep(alignment, elem_size * num_elems); // Just in case alignment > int.\n};\n\n/**\n * Finish off the creation of an array and all its elements. The array must be\n * created with `startVector`.\n *\n * @returns {flatbuffers.Offset} The offset at which the newly created array\n * starts.\n */\nflatbuffers.Builder.prototype.endVector = function() {\n  this.writeInt32(this.vector_num_elems);\n  return this.offset();\n};\n/// @endcond\n\n/**\n * Encode the string `s` in the buffer using UTF-8. If a Uint8Array is passed\n * instead of a string, it is assumed to contain valid UTF-8 encoded data.\n *\n * @param {string|Uint8Array} s The string to encode\n * @return {flatbuffers.Offset} The offset in the buffer where the encoded string starts\n */\nflatbuffers.Builder.prototype.createString = function(s) {\n  if (s instanceof Uint8Array) {\n    var utf8 = s;\n  } else {\n    var utf8 = [];\n    var i = 0;\n\n    while (i < s.length) {\n      var codePoint;\n\n      // Decode UTF-16\n      var a = s.charCodeAt(i++);\n      if (a < 0xD800 || a >= 0xDC00) {\n        codePoint = a;\n      } else {\n        var b = s.charCodeAt(i++);\n        codePoint = (a << 10) + b + (0x10000 - (0xD800 << 10) - 0xDC00);\n      }\n\n      // Encode UTF-8\n      if (codePoint < 0x80) {\n        utf8.push(codePoint);\n      } else {\n        if (codePoint < 0x800) {\n          utf8.push(((codePoint >> 6) & 0x1F) | 0xC0);\n        } else {\n          if (codePoint < 0x10000) {\n            utf8.push(((codePoint >> 12) & 0x0F) | 0xE0);\n          } else {\n            utf8.push(\n              ((codePoint >> 18) & 0x07) | 0xF0,\n              ((codePoint >> 12) & 0x3F) | 0x80);\n          }\n          utf8.push(((codePoint >> 6) & 0x3F) | 0x80);\n        }\n        utf8.push((codePoint & 0x3F) | 0x80);\n      }\n    }\n  }\n\n  this.addInt8(0);\n  this.startVector(1, utf8.length, 1);\n  this.bb.setPosition(this.space -= utf8.length);\n  for (var i = 0, offset = this.space, bytes = this.bb.bytes(); i < utf8.length; i++) {\n    bytes[offset++] = utf8[i];\n  }\n  return this.endVector();\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {flatbuffers.Long}\n */\nflatbuffers.Builder.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n////////////////////////////////////////////////////////////////////////////////\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Create a new ByteBuffer with a given array of bytes (`Uint8Array`).\n *\n * @constructor\n * @param {Uint8Array} bytes\n */\nflatbuffers.ByteBuffer = function(bytes) {\n  /**\n   * @type {Uint8Array}\n   * @private\n   */\n  this.bytes_ = bytes;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.position_ = 0;\n};\n\n/**\n * Create and allocate a new ByteBuffer with a given size.\n *\n * @param {number} byte_size\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.ByteBuffer.allocate = function(byte_size) {\n  return new flatbuffers.ByteBuffer(new Uint8Array(byte_size));\n};\n\nflatbuffers.ByteBuffer.prototype.clear = function() {\n  this.position_ = 0;\n};\n\n/**\n * Get the underlying `Uint8Array`.\n *\n * @returns {Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.bytes = function() {\n  return this.bytes_;\n};\n\n/**\n * Get the buffer's position.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.position = function() {\n  return this.position_;\n};\n\n/**\n * Set the buffer's position.\n *\n * @param {number} position\n */\nflatbuffers.ByteBuffer.prototype.setPosition = function(position) {\n  this.position_ = position;\n};\n\n/**\n * Get the buffer's capacity.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.capacity = function() {\n  return this.bytes_.length;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt8 = function(offset) {\n  return this.readUint8(offset) << 24 >> 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint8 = function(offset) {\n  return this.bytes_[offset];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt16 = function(offset) {\n  return this.readUint16(offset) << 16 >> 16;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint16 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt32 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8 | this.bytes_[offset + 2] << 16 | this.bytes_[offset + 3] << 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint32 = function(offset) {\n  return this.readInt32(offset) >>> 0;\n};\n\n/**\n * @param {number} offset\n * @returns {flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readInt64 = function(offset) {\n  return new flatbuffers.Long(this.readInt32(offset), this.readInt32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readUint64 = function(offset) {\n  return new flatbuffers.Long(this.readUint32(offset), this.readUint32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat32 = function(offset) {\n  flatbuffers.int32[0] = this.readInt32(offset);\n  return flatbuffers.float32[0];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat64 = function(offset) {\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1] = this.readInt32(offset);\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0] = this.readInt32(offset + 4);\n  return flatbuffers.float64[0];\n};\n\n/**\n * @param {number} offset\n * @param {number|boolean} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt8 = function(offset, value) {\n  this.bytes_[offset] = /** @type {number} */(value);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint8 = function(offset, value) {\n  this.bytes_[offset] = value;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt16 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint16 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt32 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n  this.bytes_[offset + 2] = value >> 16;\n  this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint32 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n    this.bytes_[offset + 2] = value >> 16;\n    this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt64 = function(offset, value) {\n  this.writeInt32(offset, value.low);\n  this.writeInt32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint64 = function(offset, value) {\n    this.writeUint32(offset, value.low);\n    this.writeUint32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat32 = function(offset, value) {\n  flatbuffers.float32[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[0]);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat64 = function(offset, value) {\n  flatbuffers.float64[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1]);\n  this.writeInt32(offset + 4, flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0]);\n};\n\n/**\n * Return the file identifier.   Behavior is undefined for FlatBuffers whose\n * schema does not include a file_identifier (likely points at padding or the\n * start of a the root vtable).\n * @returns {string}\n */\nflatbuffers.ByteBuffer.prototype.getBufferIdentifier = function() {\n  if (this.bytes_.length < this.position_ + flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error(\n        'FlatBuffers: ByteBuffer is too short to contain an identifier.');\n  }\n  var result = \"\";\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    result += String.fromCharCode(\n        this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i));\n  }\n  return result;\n};\n\n/**\n * Look up a field in the vtable, return an offset into the object, or 0 if the\n * field is not present.\n *\n * @param {number} bb_pos\n * @param {number} vtable_offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__offset = function(bb_pos, vtable_offset) {\n  var vtable = bb_pos - this.readInt32(bb_pos);\n  return vtable_offset < this.readInt16(vtable) ? this.readInt16(vtable + vtable_offset) : 0;\n};\n\n/**\n * Initialize any Table-derived type to point to the union at the given offset.\n *\n * @param {flatbuffers.Table} t\n * @param {number} offset\n * @returns {flatbuffers.Table}\n */\nflatbuffers.ByteBuffer.prototype.__union = function(t, offset) {\n  t.bb_pos = offset + this.readInt32(offset);\n  t.bb = this;\n  return t;\n};\n\n/**\n * Create a JavaScript string from UTF-8 data stored inside the FlatBuffer.\n * This allocates a new string and converts to wide chars upon each access.\n *\n * To avoid the conversion to UTF-16, pass flatbuffers.Encoding.UTF8_BYTES as\n * the \"optionalEncoding\" argument. This is useful for avoiding conversion to\n * and from UTF-16 when the data will just be packaged back up in another\n * FlatBuffer later on.\n *\n * @param {number} offset\n * @param {flatbuffers.Encoding=} opt_encoding Defaults to UTF16_STRING\n * @returns {string|Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.__string = function(offset, opt_encoding) {\n  offset += this.readInt32(offset);\n\n  var length = this.readInt32(offset);\n  var result = '';\n  var i = 0;\n\n  offset += flatbuffers.SIZEOF_INT;\n\n  if (opt_encoding === flatbuffers.Encoding.UTF8_BYTES) {\n    return this.bytes_.subarray(offset, offset + length);\n  }\n\n  while (i < length) {\n    var codePoint;\n\n    // Decode UTF-8\n    var a = this.readUint8(offset + i++);\n    if (a < 0xC0) {\n      codePoint = a;\n    } else {\n      var b = this.readUint8(offset + i++);\n      if (a < 0xE0) {\n        codePoint =\n          ((a & 0x1F) << 6) |\n          (b & 0x3F);\n      } else {\n        var c = this.readUint8(offset + i++);\n        if (a < 0xF0) {\n          codePoint =\n            ((a & 0x0F) << 12) |\n            ((b & 0x3F) << 6) |\n            (c & 0x3F);\n        } else {\n          var d = this.readUint8(offset + i++);\n          codePoint =\n            ((a & 0x07) << 18) |\n            ((b & 0x3F) << 12) |\n            ((c & 0x3F) << 6) |\n            (d & 0x3F);\n        }\n      }\n    }\n\n    // Encode UTF-16\n    if (codePoint < 0x10000) {\n      result += String.fromCharCode(codePoint);\n    } else {\n      codePoint -= 0x10000;\n      result += String.fromCharCode(\n        (codePoint >> 10) + 0xD800,\n        (codePoint & ((1 << 10) - 1)) + 0xDC00);\n    }\n  }\n\n  return result;\n};\n\n/**\n * Retrieve the relative offset stored at \"offset\"\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__indirect = function(offset) {\n  return offset + this.readInt32(offset);\n};\n\n/**\n * Get the start of data of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector = function(offset) {\n  return offset + this.readInt32(offset) + flatbuffers.SIZEOF_INT; // data starts after the length\n};\n\n/**\n * Get the length of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector_len = function(offset) {\n  return this.readInt32(offset + this.readInt32(offset));\n};\n\n/**\n * @param {string} ident\n * @returns {boolean}\n */\nflatbuffers.ByteBuffer.prototype.__has_identifier = function(ident) {\n  if (ident.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error('FlatBuffers: file identifier must be length ' +\n                    flatbuffers.FILE_IDENTIFIER_LENGTH);\n  }\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    if (ident.charCodeAt(i) != this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n\n// Exports for Node.js and RequireJS\nexport { flatbuffers };\n\n/// @endcond\n/// @}\n","'use strict';\n\n// This is free and unencumbered software released into the public domain.\n// See LICENSE.md for more information.\n\n//\n// Utilities\n//\n\n/**\n * @param {number} a The number to test.\n * @param {number} min The minimum value in the range, inclusive.\n * @param {number} max The maximum value in the range, inclusive.\n * @return {boolean} True if a >= min and a <= max.\n */\nfunction inRange(a, min, max) {\n  return min <= a && a <= max;\n}\n\n/**\n * @param {*} o\n * @return {Object}\n */\nfunction ToDictionary(o) {\n  if (o === undefined) return {};\n  if (o === Object(o)) return o;\n  throw TypeError('Could not convert argument to dictionary');\n}\n\n/**\n * @param {string} string Input string of UTF-16 code units.\n * @return {!Array.<number>} Code points.\n */\nfunction stringToCodePoints(string) {\n  // https://heycam.github.io/webidl/#dfn-obtain-unicode\n\n  // 1. Let S be the DOMString value.\n  var s = String(string);\n\n  // 2. Let n be the length of S.\n  var n = s.length;\n\n  // 3. Initialize i to 0.\n  var i = 0;\n\n  // 4. Initialize U to be an empty sequence of Unicode characters.\n  var u = [];\n\n  // 5. While i < n:\n  while (i < n) {\n\n    // 1. Let c be the code unit in S at index i.\n    var c = s.charCodeAt(i);\n\n    // 2. Depending on the value of c:\n\n    // c < 0xD800 or c > 0xDFFF\n    if (c < 0xD800 || c > 0xDFFF) {\n      // Append to U the Unicode character with code point c.\n      u.push(c);\n    }\n\n    // 0xDC00 ≤ c ≤ 0xDFFF\n    else if (0xDC00 <= c && c <= 0xDFFF) {\n      // Append to U a U+FFFD REPLACEMENT CHARACTER.\n      u.push(0xFFFD);\n    }\n\n    // 0xD800 ≤ c ≤ 0xDBFF\n    else if (0xD800 <= c && c <= 0xDBFF) {\n      // 1. If i = n−1, then append to U a U+FFFD REPLACEMENT\n      // CHARACTER.\n      if (i === n - 1) {\n        u.push(0xFFFD);\n      }\n      // 2. Otherwise, i < n−1:\n      else {\n        // 1. Let d be the code unit in S at index i+1.\n        var d = string.charCodeAt(i + 1);\n\n        // 2. If 0xDC00 ≤ d ≤ 0xDFFF, then:\n        if (0xDC00 <= d && d <= 0xDFFF) {\n          // 1. Let a be c & 0x3FF.\n          var a = c & 0x3FF;\n\n          // 2. Let b be d & 0x3FF.\n          var b = d & 0x3FF;\n\n          // 3. Append to U the Unicode character with code point\n          // 2^16+2^10*a+b.\n          u.push(0x10000 + (a << 10) + b);\n\n          // 4. Set i to i+1.\n          i += 1;\n        }\n\n        // 3. Otherwise, d < 0xDC00 or d > 0xDFFF. Append to U a\n        // U+FFFD REPLACEMENT CHARACTER.\n        else  {\n          u.push(0xFFFD);\n        }\n      }\n    }\n\n    // 3. Set i to i+1.\n    i += 1;\n  }\n\n  // 6. Return U.\n  return u;\n}\n\n/**\n * @param {!Array.<number>} code_points Array of code points.\n * @return {string} string String of UTF-16 code units.\n */\nfunction codePointsToString(code_points) {\n  var s = '';\n  for (var i = 0; i < code_points.length; ++i) {\n    var cp = code_points[i];\n    if (cp <= 0xFFFF) {\n      s += String.fromCharCode(cp);\n    } else {\n      cp -= 0x10000;\n      s += String.fromCharCode((cp >> 10) + 0xD800,\n                               (cp & 0x3FF) + 0xDC00);\n    }\n  }\n  return s;\n}\n\n\n//\n// Implementation of Encoding specification\n// https://encoding.spec.whatwg.org/\n//\n\n//\n// 3. Terminology\n//\n\n/**\n * End-of-stream is a special token that signifies no more tokens\n * are in the stream.\n * @const\n */ var end_of_stream = -1;\n\n/**\n * A stream represents an ordered sequence of tokens.\n *\n * @constructor\n * @param {!(Array.<number>|Uint8Array)} tokens Array of tokens that provide the\n * stream.\n */\nfunction Stream(tokens) {\n  /** @type {!Array.<number>} */\n  this.tokens = [].slice.call(tokens);\n}\n\nStream.prototype = {\n  /**\n   * @return {boolean} True if end-of-stream has been hit.\n   */\n  endOfStream: function() {\n    return !this.tokens.length;\n  },\n\n  /**\n   * When a token is read from a stream, the first token in the\n   * stream must be returned and subsequently removed, and\n   * end-of-stream must be returned otherwise.\n   *\n   * @return {number} Get the next token from the stream, or\n   * end_of_stream.\n   */\n   read: function() {\n    if (!this.tokens.length)\n      return end_of_stream;\n     return this.tokens.shift();\n   },\n\n  /**\n   * When one or more tokens are prepended to a stream, those tokens\n   * must be inserted, in given order, before the first token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The token(s) to prepend to the stream.\n   */\n  prepend: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.unshift(tokens.pop());\n    } else {\n      this.tokens.unshift(token);\n    }\n  },\n\n  /**\n   * When one or more tokens are pushed to a stream, those tokens\n   * must be inserted, in given order, after the last token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The tokens(s) to prepend to the stream.\n   */\n  push: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.push(tokens.shift());\n    } else {\n      this.tokens.push(token);\n    }\n  }\n};\n\n//\n// 4. Encodings\n//\n\n// 4.1 Encoders and decoders\n\n/** @const */\nvar finished = -1;\n\n/**\n * @param {boolean} fatal If true, decoding errors raise an exception.\n * @param {number=} opt_code_point Override the standard fallback code point.\n * @return {number} The code point to insert on a decoding error.\n */\nfunction decoderError(fatal, opt_code_point) {\n  if (fatal)\n    throw TypeError('Decoder error');\n  return opt_code_point || 0xFFFD;\n}\n\n/** @interface */\nfunction Decoder() {}\nDecoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point, or |finished|.\n   */\n  handler: function(stream, bite) {}\n};\n\n/** @interface */\nfunction Encoder() {}\nEncoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of code points being encoded.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit, or |finished|.\n   */\n  handler: function(stream, code_point) {}\n};\n\n//\n// 7. API\n//\n\n/** @const */ var DEFAULT_ENCODING = 'utf-8';\n\n// 7.1 Interface TextDecoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextDecoder(encoding, options) {\n  if (!(this instanceof TextDecoder)) {\n    return new TextDecoder(encoding, options);\n  }\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {boolean} */\n  this._BOMseen = false;\n  /** @private @type {?Decoder} */\n  this._decoder = null;\n  /** @private @type {boolean} */\n  this._fatal = Boolean(options['fatal']);\n  /** @private @type {boolean} */\n  this._ignoreBOM = Boolean(options['ignoreBOM']);\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n  Object.defineProperty(this, 'fatal', {value: this._fatal});\n  Object.defineProperty(this, 'ignoreBOM', {value: this._ignoreBOM});\n}\n\nTextDecoder.prototype = {\n  /**\n   * @param {ArrayBufferView=} input The buffer of bytes to decode.\n   * @param {Object=} options\n   * @return {string} The decoded string.\n   */\n  decode: function decode(input, options) {\n    var bytes;\n    if (typeof input === 'object' && input instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input);\n    } else if (typeof input === 'object' && 'buffer' in input &&\n               input.buffer instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input.buffer,\n                             input.byteOffset,\n                             input.byteLength);\n    } else {\n      bytes = new Uint8Array(0);\n    }\n\n    options = ToDictionary(options);\n\n    if (!this._streaming) {\n      this._decoder = new UTF8Decoder({fatal: this._fatal});\n      this._BOMseen = false;\n    }\n    this._streaming = Boolean(options['stream']);\n\n    var input_stream = new Stream(bytes);\n\n    var code_points = [];\n\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n\n    while (!input_stream.endOfStream()) {\n      result = this._decoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (result === null)\n        continue;\n      if (Array.isArray(result))\n        code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n      else\n        code_points.push(result);\n    }\n    if (!this._streaming) {\n      do {\n        result = this._decoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (result === null)\n          continue;\n        if (Array.isArray(result))\n          code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n        else\n          code_points.push(result);\n      } while (!input_stream.endOfStream());\n      this._decoder = null;\n    }\n\n    if (code_points.length) {\n      // If encoding is one of utf-8, utf-16be, and utf-16le, and\n      // ignore BOM flag and BOM seen flag are unset, run these\n      // subsubsteps:\n      if (['utf-8'].indexOf(this.encoding) !== -1 &&\n          !this._ignoreBOM && !this._BOMseen) {\n        // If token is U+FEFF, set BOM seen flag.\n        if (code_points[0] === 0xFEFF) {\n          this._BOMseen = true;\n          code_points.shift();\n        } else {\n          // Otherwise, if token is not end-of-stream, set BOM seen\n          // flag and append token to output.\n          this._BOMseen = true;\n        }\n      }\n    }\n\n    return codePointsToString(code_points);\n  }\n};\n\n// 7.2 Interface TextEncoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextEncoder(encoding, options) {\n  if (!(this instanceof TextEncoder))\n    return new TextEncoder(encoding, options);\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {?Encoder} */\n  this._encoder = null;\n  /** @private @type {{fatal: boolean}} */\n  this._options = {fatal: Boolean(options['fatal'])};\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n}\n\nTextEncoder.prototype = {\n  /**\n   * @param {string=} opt_string The string to encode.\n   * @param {Object=} options\n   * @return {Uint8Array} Encoded bytes, as a Uint8Array.\n   */\n  encode: function encode(opt_string, options) {\n    opt_string = opt_string ? String(opt_string) : '';\n    options = ToDictionary(options);\n\n    // NOTE: This option is nonstandard. None of the encodings\n    // permitted for encoding (i.e. UTF-8, UTF-16) are stateful,\n    // so streaming is not necessary.\n    if (!this._streaming)\n      this._encoder = new UTF8Encoder(this._options);\n    this._streaming = Boolean(options['stream']);\n\n    var bytes = [];\n    var input_stream = new Stream(stringToCodePoints(opt_string));\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n    while (!input_stream.endOfStream()) {\n      result = this._encoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (Array.isArray(result))\n        bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n      else\n        bytes.push(result);\n    }\n    if (!this._streaming) {\n      while (true) {\n        result = this._encoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (Array.isArray(result))\n          bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n        else\n          bytes.push(result);\n      }\n      this._encoder = null;\n    }\n    return new Uint8Array(bytes);\n  }\n};\n\n//\n// 8. The encoding\n//\n\n// 8.1 utf-8\n\n/**\n * @constructor\n * @implements {Decoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Decoder(options) {\n  var fatal = options.fatal;\n\n  // utf-8's decoder's has an associated utf-8 code point, utf-8\n  // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8\n  // lower boundary (initially 0x80), and a utf-8 upper boundary\n  // (initially 0xBF).\n  var /** @type {number} */ utf8_code_point = 0,\n      /** @type {number} */ utf8_bytes_seen = 0,\n      /** @type {number} */ utf8_bytes_needed = 0,\n      /** @type {number} */ utf8_lower_boundary = 0x80,\n      /** @type {number} */ utf8_upper_boundary = 0xBF;\n\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point.\n   */\n  this.handler = function(stream, bite) {\n    // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,\n    // set utf-8 bytes needed to 0 and return error.\n    if (bite === end_of_stream && utf8_bytes_needed !== 0) {\n      utf8_bytes_needed = 0;\n      return decoderError(fatal);\n    }\n\n    // 2. If byte is end-of-stream, return finished.\n    if (bite === end_of_stream)\n      return finished;\n\n    // 3. If utf-8 bytes needed is 0, based on byte:\n    if (utf8_bytes_needed === 0) {\n\n      // 0x00 to 0x7F\n      if (inRange(bite, 0x00, 0x7F)) {\n        // Return a code point whose value is byte.\n        return bite;\n      }\n\n      // 0xC2 to 0xDF\n      if (inRange(bite, 0xC2, 0xDF)) {\n        // Set utf-8 bytes needed to 1 and utf-8 code point to byte\n        // − 0xC0.\n        utf8_bytes_needed = 1;\n        utf8_code_point = bite - 0xC0;\n      }\n\n      // 0xE0 to 0xEF\n      else if (inRange(bite, 0xE0, 0xEF)) {\n        // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.\n        if (bite === 0xE0)\n          utf8_lower_boundary = 0xA0;\n        // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.\n        if (bite === 0xED)\n          utf8_upper_boundary = 0x9F;\n        // 3. Set utf-8 bytes needed to 2 and utf-8 code point to\n        // byte − 0xE0.\n        utf8_bytes_needed = 2;\n        utf8_code_point = bite - 0xE0;\n      }\n\n      // 0xF0 to 0xF4\n      else if (inRange(bite, 0xF0, 0xF4)) {\n        // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.\n        if (bite === 0xF0)\n          utf8_lower_boundary = 0x90;\n        // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.\n        if (bite === 0xF4)\n          utf8_upper_boundary = 0x8F;\n        // 3. Set utf-8 bytes needed to 3 and utf-8 code point to\n        // byte − 0xF0.\n        utf8_bytes_needed = 3;\n        utf8_code_point = bite - 0xF0;\n      }\n\n      // Otherwise\n      else {\n        // Return error.\n        return decoderError(fatal);\n      }\n\n      // Then (byte is in the range 0xC2 to 0xF4) set utf-8 code\n      // point to utf-8 code point << (6 × utf-8 bytes needed) and\n      // return continue.\n      utf8_code_point = utf8_code_point << (6 * utf8_bytes_needed);\n      return null;\n    }\n\n    // 4. If byte is not in the range utf-8 lower boundary to utf-8\n    // upper boundary, run these substeps:\n    if (!inRange(bite, utf8_lower_boundary, utf8_upper_boundary)) {\n\n      // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8\n      // bytes seen to 0, set utf-8 lower boundary to 0x80, and set\n      // utf-8 upper boundary to 0xBF.\n      utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n      utf8_lower_boundary = 0x80;\n      utf8_upper_boundary = 0xBF;\n\n      // 2. Prepend byte to stream.\n      stream.prepend(bite);\n\n      // 3. Return error.\n      return decoderError(fatal);\n    }\n\n    // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary\n    // to 0xBF.\n    utf8_lower_boundary = 0x80;\n    utf8_upper_boundary = 0xBF;\n\n    // 6. Increase utf-8 bytes seen by one and set utf-8 code point\n    // to utf-8 code point + (byte − 0x80) << (6 × (utf-8 bytes\n    // needed − utf-8 bytes seen)).\n    utf8_bytes_seen += 1;\n    utf8_code_point += (bite - 0x80) << (6 * (utf8_bytes_needed - utf8_bytes_seen));\n\n    // 7. If utf-8 bytes seen is not equal to utf-8 bytes needed,\n    // continue.\n    if (utf8_bytes_seen !== utf8_bytes_needed)\n      return null;\n\n    // 8. Let code point be utf-8 code point.\n    var code_point = utf8_code_point;\n\n    // 9. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes\n    // seen to 0.\n    utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n\n    // 10. Return a code point whose value is code point.\n    return code_point;\n  };\n}\n\n/**\n * @constructor\n * @implements {Encoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Encoder(options) {\n  var fatal = options.fatal;\n  /**\n   * @param {Stream} stream Input stream.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit.\n   */\n  this.handler = function(stream, code_point) {\n    // 1. If code point is end-of-stream, return finished.\n    if (code_point === end_of_stream)\n      return finished;\n\n    // 2. If code point is in the range U+0000 to U+007F, return a\n    // byte whose value is code point.\n    if (inRange(code_point, 0x0000, 0x007f))\n      return code_point;\n\n    // 3. Set count and offset based on the range code point is in:\n    var count, offset;\n    // U+0080 to U+07FF:    1 and 0xC0\n    if (inRange(code_point, 0x0080, 0x07FF)) {\n      count = 1;\n      offset = 0xC0;\n    }\n    // U+0800 to U+FFFF:    2 and 0xE0\n    else if (inRange(code_point, 0x0800, 0xFFFF)) {\n      count = 2;\n      offset = 0xE0;\n    }\n    // U+10000 to U+10FFFF: 3 and 0xF0\n    else if (inRange(code_point, 0x10000, 0x10FFFF)) {\n      count = 3;\n      offset = 0xF0;\n    }\n\n    // 4.Let bytes be a byte sequence whose first byte is (code\n    // point >> (6 × count)) + offset.\n    var bytes = [(code_point >> (6 * count)) + offset];\n\n    // 5. Run these substeps while count is greater than 0:\n    while (count > 0) {\n\n      // 1. Set temp to code point >> (6 × (count − 1)).\n      var temp = code_point >> (6 * (count - 1));\n\n      // 2. Append to bytes 0x80 | (temp & 0x3F).\n      bytes.push(0x80 | (temp & 0x3F));\n\n      // 3. Decrease count by one.\n      count -= 1;\n    }\n\n    // 6. Return bytes bytes, in order.\n    return bytes;\n  };\n}\n\nexport {TextEncoder, TextDecoder};\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { toUint8Array } from './buffer';\nimport {\n    TextDecoder as TextDecoderPolyfill,\n    TextEncoder as TextEncoderPolyfill,\n} from 'text-encoding-utf-8';\n\n/** @ignore @suppress {missingRequire} */\nconst _Buffer = typeof Buffer === 'function' ? Buffer : null;\n/** @ignore */\nconst useNativeEncoders = typeof TextDecoder === 'function' && typeof TextEncoder === 'function';\n\n/** @ignore */\nexport const decodeUtf8 = ((TextDecoder) => {\n    if (useNativeEncoders || !_Buffer) {\n        const decoder = new TextDecoder('utf-8');\n        return (buffer?: ArrayBuffer | ArrayBufferView) => decoder.decode(buffer);\n    }\n    return (input: ArrayBufferLike | ArrayBufferView) => {\n        const { buffer, byteOffset, length } = toUint8Array(input);\n        return _Buffer.from(buffer, byteOffset, length).toString();\n    };\n})(typeof TextDecoder !== 'undefined' ? TextDecoder : TextDecoderPolyfill);\n\n/** @ignore */\nexport const encodeUtf8 = ((TextEncoder) => {\n    if (useNativeEncoders || !_Buffer) {\n        const encoder = new TextEncoder();\n        return (value?: string) => encoder.encode(value);\n    }\n    return (input = '') => toUint8Array(_Buffer.from(input, 'utf8'));\n})(typeof TextEncoder !== 'undefined' ? TextEncoder : TextEncoderPolyfill);\n","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}","import setPrototypeOf from \"./setPrototypeOf\";\nexport default function _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}","export default function _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}","export default function _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}","export default function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","import _typeof from \"../../helpers/esm/typeof\";\nimport assertThisInitialized from \"./assertThisInitialized\";\nexport default function _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return assertThisInitialized(self);\n}","import getPrototypeOf from \"./getPrototypeOf\";\nimport isNativeReflectConstruct from \"./isNativeReflectConstruct\";\nimport possibleConstructorReturn from \"./possibleConstructorReturn\";\nexport default function _createSuper(Derived) {\n  return function () {\n    var Super = getPrototypeOf(Derived),\n        result;\n\n    if (isNativeReflectConstruct()) {\n      var NewTarget = getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return possibleConstructorReturn(this, result);\n  };\n}","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport streamAdapters from './adapters';\n\n/** @ignore */\nexport const ITERATOR_DONE: any = Object.freeze({ done: true, value: void (0) });\n\n/** @ignore */\nexport type FileHandle = import('fs').promises.FileHandle;\n/** @ignore */\nexport type ArrowJSONLike = { schema: any; batches?: any[]; dictionaries?: any[]; };\n/** @ignore */\nexport type ReadableDOMStreamOptions = { type: 'bytes' | undefined, autoAllocateChunkSize?: number, highWaterMark?: number };\n\n/** @ignore */\nexport class ArrowJSON {\n    // @ts-ignore\n    constructor(private _json: ArrowJSONLike) {}\n    public get schema(): any { return this._json['schema']; }\n    public get batches(): any[] { return (this._json['batches'] || []) as any[]; }\n    public get dictionaries(): any[] { return (this._json['dictionaries'] || []) as any[]; }\n}\n\n/** @ignore */\nexport interface Readable<T> {\n\n    readonly closed: Promise<void>;\n    cancel(reason?: any): Promise<void>;\n\n    read(size?: number | null): Promise<T | null>;\n    peek(size?: number | null): Promise<T | null>;\n    throw(value?: any): Promise<IteratorResult<any>>;\n    return(value?: any): Promise<IteratorResult<any>>;\n    next(size?: number | null): Promise<IteratorResult<T>>;\n}\n\n/** @ignore */\nexport interface Writable<T> {\n    readonly closed: Promise<void>;\n    close(): void;\n    write(chunk: T): void;\n    abort(reason?: any): void;\n}\n\n/** @ignore */\nexport interface ReadableWritable<TReadable, TWritable> extends Readable<TReadable>, Writable<TWritable> {\n    [Symbol.asyncIterator](): AsyncIterableIterator<TReadable>;\n    toDOMStream(options?: ReadableDOMStreamOptions): ReadableStream<TReadable>;\n    toNodeStream(options?: import('stream').ReadableOptions): import('stream').Readable;\n}\n\n/** @ignore */\nexport abstract class ReadableInterop<T> {\n\n    public abstract toDOMStream(options?: ReadableDOMStreamOptions): ReadableStream<T>;\n    public abstract toNodeStream(options?: import('stream').ReadableOptions): import('stream').Readable;\n\n    public tee(): [ReadableStream<T>, ReadableStream<T>] {\n        return this._getDOMStream().tee();\n    }\n    public pipe<R extends NodeJS.WritableStream>(writable: R, options?: { end?: boolean; }) {\n        return this._getNodeStream().pipe(writable, options);\n    }\n    public pipeTo(writable: WritableStream<T>, options?: PipeOptions) { return this._getDOMStream().pipeTo(writable, options); }\n    public pipeThrough<R extends ReadableStream<any>>(duplex: { writable: WritableStream<T>, readable: R }, options?: PipeOptions) {\n        return this._getDOMStream().pipeThrough(duplex, options);\n    }\n\n    protected _DOMStream?: ReadableStream<T>;\n    private _getDOMStream() {\n        return this._DOMStream || (this._DOMStream = this.toDOMStream());\n    }\n\n    protected _nodeStream?: import('stream').Readable;\n    private _getNodeStream() {\n        return this._nodeStream || (this._nodeStream = this.toNodeStream());\n    }\n}\n\n/** @ignore */\ntype Resolution<T> = { resolve: (value?: T | PromiseLike<T>) => void; reject: (reason?: any) => void; };\n\n/** @ignore */\nexport class AsyncQueue<TReadable = Uint8Array, TWritable = TReadable> extends ReadableInterop<TReadable>\n    implements AsyncIterableIterator<TReadable>, ReadableWritable<TReadable, TWritable> {\n\n    protected _values: TWritable[] = [];\n    protected _error?: { error: any; };\n    protected _closedPromise: Promise<void>;\n    protected _closedPromiseResolve?: (value?: any) => void;\n    protected resolvers: Resolution<IteratorResult<TReadable>>[] = [];\n\n    constructor() {\n        super();\n        this._closedPromise = new Promise((r) => this._closedPromiseResolve = r);\n    }\n\n    public get closed(): Promise<void> { return this._closedPromise; }\n    public async cancel(reason?: any) { await this.return(reason); }\n    public write(value: TWritable) {\n        if (this._ensureOpen()) {\n            this.resolvers.length <= 0\n                ? (this._values.push(value))\n                : (this.resolvers.shift()!.resolve({ done: false, value } as any));\n        }\n    }\n    public abort(value?: any) {\n        if (this._closedPromiseResolve) {\n            this.resolvers.length <= 0\n                ? (this._error = { error: value })\n                : (this.resolvers.shift()!.reject({ done: true, value }));\n        }\n    }\n    public close() {\n        if (this._closedPromiseResolve) {\n            const { resolvers } = this;\n            while (resolvers.length > 0) {\n                resolvers.shift()!.resolve(ITERATOR_DONE);\n            }\n            this._closedPromiseResolve();\n            this._closedPromiseResolve = undefined;\n        }\n    }\n\n    public [Symbol.asyncIterator]() { return this; }\n    public toDOMStream(options?: ReadableDOMStreamOptions) {\n        return streamAdapters.toDOMStream(\n            (this._closedPromiseResolve || this._error)\n                ? (this as AsyncIterable<TReadable>)\n                : (this._values as any) as Iterable<TReadable>,\n            options);\n    }\n    public toNodeStream(options?: import('stream').ReadableOptions) {\n        return streamAdapters.toNodeStream(\n            (this._closedPromiseResolve || this._error)\n                ? (this as AsyncIterable<TReadable>)\n                : (this._values as any) as Iterable<TReadable>,\n            options);\n    }\n    public async throw(_?: any) { await this.abort(_); return ITERATOR_DONE; }\n    public async return(_?: any) { await this.close(); return ITERATOR_DONE; }\n\n    public async read(size?: number | null): Promise<TReadable | null> { return (await this.next(size, 'read')).value; }\n    public async peek(size?: number | null): Promise<TReadable | null> { return (await this.next(size, 'peek')).value; }\n    public next(..._args: any[]): Promise<IteratorResult<TReadable>> {\n        if (this._values.length > 0) {\n            return Promise.resolve({ done: false, value: this._values.shift()! } as any);\n        } else if (this._error) {\n            return Promise.reject({ done: true, value: this._error.error });\n        } else if (!this._closedPromiseResolve) {\n            return Promise.resolve(ITERATOR_DONE);\n        } else {\n            return new Promise<IteratorResult<TReadable>>((resolve, reject) => {\n                this.resolvers.push({ resolve, reject });\n            });\n        }\n    }\n\n    protected _ensureOpen() {\n        if (this._closedPromiseResolve) {\n            return true;\n        }\n        throw new Error(`${this} is closed`);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { ReadableInterop, ArrowJSONLike } from '../io/interfaces';\n\n/** @ignore */\ntype FSReadStream = import('fs').ReadStream;\n/** @ignore */\ntype FileHandle = import('fs').promises.FileHandle;\n\n/** @ignore */\nexport interface Subscription {\n    unsubscribe: () => void;\n}\n\n/** @ignore */\nexport interface Observer<T> {\n    closed?: boolean;\n    next: (value: T) => void;\n    error: (err: any) => void;\n    complete: () => void;\n}\n\n/** @ignore */\nexport interface Observable<T> {\n    subscribe: (observer: Observer<T>) => Subscription;\n}\n\n/** @ignore */\nconst [BigIntCtor, BigIntAvailable] = (() => {\n    const BigIntUnavailableError = () => { throw new Error('BigInt is not available in this environment'); };\n    function BigIntUnavailable() { throw BigIntUnavailableError(); }\n    BigIntUnavailable.asIntN = () => { throw BigIntUnavailableError(); };\n    BigIntUnavailable.asUintN = () => { throw BigIntUnavailableError(); };\n    return typeof BigInt !== 'undefined' ? [BigInt, true] : [<any> BigIntUnavailable, false];\n})() as [BigIntConstructor, boolean];\n\n/** @ignore */\nconst [BigInt64ArrayCtor, BigInt64ArrayAvailable] = (() => {\n    const BigInt64ArrayUnavailableError = () => { throw new Error('BigInt64Array is not available in this environment'); };\n    class BigInt64ArrayUnavailable {\n        static get BYTES_PER_ELEMENT() { return 8; }\n        static of() { throw BigInt64ArrayUnavailableError(); }\n        static from() { throw BigInt64ArrayUnavailableError(); }\n        constructor() { throw BigInt64ArrayUnavailableError(); }\n    }\n    return typeof BigInt64Array !== 'undefined' ? [BigInt64Array, true] : [<any> BigInt64ArrayUnavailable, false];\n})() as [BigInt64ArrayConstructor, boolean];\n\n/** @ignore */\nconst [BigUint64ArrayCtor, BigUint64ArrayAvailable] = (() => {\n    const BigUint64ArrayUnavailableError = () => { throw new Error('BigUint64Array is not available in this environment'); };\n    class BigUint64ArrayUnavailable {\n        static get BYTES_PER_ELEMENT() { return 8; }\n        static of() { throw BigUint64ArrayUnavailableError(); }\n        static from() { throw BigUint64ArrayUnavailableError(); }\n        constructor() { throw BigUint64ArrayUnavailableError(); }\n    }\n    return typeof BigUint64Array !== 'undefined' ? [BigUint64Array, true] : [<any> BigUint64ArrayUnavailable, false];\n})() as [BigUint64ArrayConstructor, boolean];\n\nexport { BigIntCtor as BigInt, BigIntAvailable };\nexport { BigInt64ArrayCtor as BigInt64Array, BigInt64ArrayAvailable };\nexport { BigUint64ArrayCtor as BigUint64Array, BigUint64ArrayAvailable };\n\n/** @ignore */ const isNumber = (x: any) => typeof x === 'number';\n/** @ignore */ const isBoolean = (x: any) => typeof x === 'boolean';\n/** @ignore */ const isFunction = (x: any) => typeof x === 'function';\n/** @ignore */\nexport const isObject = (x: any): x is Object => x != null && Object(x) === x;\n\n/** @ignore */\nexport const isPromise = <T = any>(x: any): x is PromiseLike<T> => {\n    return isObject(x) && isFunction(x.then);\n};\n\n/** @ignore */\nexport const isObservable = <T = any>(x: any): x is Observable<T> => {\n    return isObject(x) && isFunction(x.subscribe);\n};\n\n/** @ignore */\nexport const isIterable = <T = any>(x: any): x is Iterable<T> => {\n    return isObject(x) && isFunction(x[Symbol.iterator]);\n};\n\n/** @ignore */\nexport const isAsyncIterable = <T = any>(x: any): x is AsyncIterable<T> => {\n    return isObject(x) && isFunction(x[Symbol.asyncIterator]);\n};\n\n/** @ignore */\nexport const isArrowJSON = (x: any): x is ArrowJSONLike  => {\n    return isObject(x) && isObject(x['schema']);\n};\n\n/** @ignore */\nexport const isArrayLike = <T = any>(x: any): x is ArrayLike<T> => {\n    return isObject(x) && isNumber(x['length']);\n};\n\n/** @ignore */\nexport const isIteratorResult = <T = any>(x: any): x is IteratorResult<T> => {\n    return isObject(x) && ('done' in x) && ('value' in x);\n};\n\n/** @ignore */\nexport const isUnderlyingSink = <T = any>(x: any): x is UnderlyingSink<T> => {\n    return isObject(x) &&\n        isFunction(x['abort']) &&\n        isFunction(x['close']) &&\n        isFunction(x['start']) &&\n        isFunction(x['write']);\n};\n\n/** @ignore */\nexport const isFileHandle = (x: any): x is FileHandle => {\n    return isObject(x) && isFunction(x['stat']) && isNumber(x['fd']);\n};\n\n/** @ignore */\nexport const isFSReadStream = (x: any): x is FSReadStream => {\n    return isReadableNodeStream(x) && isNumber((<any> x)['bytesRead']);\n};\n\n/** @ignore */\nexport const isFetchResponse = (x: any): x is Response => {\n    return isObject(x) && isReadableDOMStream(x['body']);\n};\n\n/** @ignore */\nexport const isWritableDOMStream = <T = any>(x: any): x is WritableStream<T> => {\n    return isObject(x) &&\n        isFunction(x['abort']) &&\n        isFunction(x['getWriter']) &&\n        !(x instanceof ReadableInterop);\n};\n\n/** @ignore */\nexport const isReadableDOMStream = <T = any>(x: any): x is ReadableStream<T> => {\n    return isObject(x) &&\n        isFunction(x['cancel']) &&\n        isFunction(x['getReader']) &&\n        !(x instanceof ReadableInterop);\n};\n\n/** @ignore */\nexport const isWritableNodeStream = (x: any): x is NodeJS.WritableStream => {\n    return isObject(x) &&\n        isFunction(x['end']) &&\n        isFunction(x['write']) &&\n        isBoolean(x['writable']) &&\n        !(x instanceof ReadableInterop);\n};\n\n/** @ignore */\nexport const isReadableNodeStream = (x: any): x is NodeJS.ReadableStream => {\n    return isObject(x) &&\n        isFunction(x['read']) &&\n        isFunction(x['pipe']) &&\n        isBoolean(x['readable']) &&\n        !(x instanceof ReadableInterop);\n};\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { flatbuffers } from 'flatbuffers';\nimport { encodeUtf8 } from '../util/utf8';\nimport ByteBuffer = flatbuffers.ByteBuffer;\nimport { TypedArray, TypedArrayConstructor } from '../interfaces';\nimport { BigIntArray, BigIntArrayConstructor } from '../interfaces';\nimport { isPromise, isIterable, isAsyncIterable, isIteratorResult, BigInt64Array, BigUint64Array } from './compat';\n\n/** @ignore */\nconst SharedArrayBuf = (typeof SharedArrayBuffer !== 'undefined' ? SharedArrayBuffer : ArrayBuffer);\n\n/** @ignore */\nfunction collapseContiguousByteRanges(chunks: Uint8Array[]) {\n    let result = chunks[0] ? [chunks[0]] : [];\n    let xOffset: number, yOffset: number, xLen: number, yLen: number;\n    for (let x, y, i = 0, j = 0, n = chunks.length; ++i < n;) {\n        x = result[j];\n        y = chunks[i];\n        // continue if x and y don't share the same underlying ArrayBuffer, or if x isn't before y\n        if (!x || !y || x.buffer !== y.buffer || y.byteOffset < x.byteOffset) {\n            y && (result[++j] = y);\n            continue;\n        }\n        ({ byteOffset: xOffset, byteLength: xLen } = x);\n        ({ byteOffset: yOffset, byteLength: yLen } = y);\n        // continue if the byte ranges of x and y aren't contiguous\n        if ((xOffset + xLen) < yOffset || (yOffset + yLen) < xOffset) {\n            y && (result[++j] = y);\n            continue;\n        }\n        result[j] = new Uint8Array(x.buffer, xOffset, yOffset - xOffset + yLen);\n    }\n    return result;\n}\n\n/** @ignore */\nexport function memcpy<TTarget extends ArrayBufferView, TSource extends ArrayBufferView>(target: TTarget, source: TSource, targetByteOffset = 0, sourceByteLength = source.byteLength) {\n    const targetByteLength = target.byteLength;\n    const dst = new Uint8Array(target.buffer, target.byteOffset, targetByteLength);\n    const src = new Uint8Array(source.buffer, source.byteOffset, Math.min(sourceByteLength, targetByteLength));\n    dst.set(src, targetByteOffset);\n    return target;\n}\n\n/** @ignore */\nexport function joinUint8Arrays(chunks: Uint8Array[], size?: number | null): [Uint8Array, Uint8Array[], number] {\n    // collapse chunks that share the same underlying ArrayBuffer and whose byte ranges overlap,\n    // to avoid unnecessarily copying the bytes to do this buffer join. This is a common case during\n    // streaming, where we may be reading partial byte ranges out of the same underlying ArrayBuffer\n    let result = collapseContiguousByteRanges(chunks);\n    let byteLength = result.reduce((x, b) => x + b.byteLength, 0);\n    let source: Uint8Array, sliced: Uint8Array, buffer: Uint8Array | void;\n    let offset = 0, index = -1, length = Math.min(size || Infinity, byteLength);\n    for (let n = result.length; ++index < n;) {\n        source = result[index];\n        sliced = source.subarray(0, Math.min(source.length, length - offset));\n        if (length <= (offset + sliced.length)) {\n            if (sliced.length < source.length) {\n                result[index] = source.subarray(sliced.length);\n            } else if (sliced.length === source.length) { index++; }\n            buffer ? memcpy(buffer, sliced, offset) : (buffer = sliced);\n            break;\n        }\n        memcpy(buffer || (buffer = new Uint8Array(length)), sliced, offset);\n        offset += sliced.length;\n    }\n    return [buffer || new Uint8Array(0), result.slice(index), byteLength - (buffer ? buffer.byteLength : 0)];\n}\n\n/** @ignore */\nexport type ArrayBufferViewInput = ArrayBufferView | ArrayBufferLike | ArrayBufferView | Iterable<number> | ArrayLike<number> | ByteBuffer | string | null | undefined  |\n                    IteratorResult<ArrayBufferView | ArrayBufferLike | ArrayBufferView | Iterable<number> | ArrayLike<number> | ByteBuffer | string | null | undefined> |\n          ReadableStreamReadResult<ArrayBufferView | ArrayBufferLike | ArrayBufferView | Iterable<number> | ArrayLike<number> | ByteBuffer | string | null | undefined> ;\n\n/** @ignore */\nexport function toArrayBufferView<T extends TypedArray>(ArrayBufferViewCtor: TypedArrayConstructor<T>, input: ArrayBufferViewInput): T;\nexport function toArrayBufferView<T extends BigIntArray>(ArrayBufferViewCtor: BigIntArrayConstructor<T>, input: ArrayBufferViewInput): T;\nexport function toArrayBufferView(ArrayBufferViewCtor: any, input: ArrayBufferViewInput) {\n\n    let value: any = isIteratorResult(input) ? input.value : input;\n\n    if (value instanceof ArrayBufferViewCtor) {\n        if (ArrayBufferViewCtor === Uint8Array) {\n            // Node's `Buffer` class passes the `instanceof Uint8Array` check, but we need\n            // a real Uint8Array, since Buffer#slice isn't the same as Uint8Array#slice :/\n            return new ArrayBufferViewCtor(value.buffer, value.byteOffset, value.byteLength);\n        }\n        return value;\n    }\n    if (!value) { return new ArrayBufferViewCtor(0); }\n    if (typeof value === 'string') { value = encodeUtf8(value); }\n    if (value instanceof ArrayBuffer) { return new ArrayBufferViewCtor(value); }\n    if (value instanceof SharedArrayBuf) { return new ArrayBufferViewCtor(value); }\n    if (value instanceof ByteBuffer) { return toArrayBufferView(ArrayBufferViewCtor, value.bytes()); }\n    return !ArrayBuffer.isView(value) ? ArrayBufferViewCtor.from(value) : value.byteLength <= 0 ? new ArrayBufferViewCtor(0)\n        : new ArrayBufferViewCtor(value.buffer, value.byteOffset, value.byteLength / ArrayBufferViewCtor.BYTES_PER_ELEMENT);\n}\n\n/** @ignore */ export const toInt8Array = (input: ArrayBufferViewInput) => toArrayBufferView(Int8Array, input);\n/** @ignore */ export const toInt16Array = (input: ArrayBufferViewInput) => toArrayBufferView(Int16Array, input);\n/** @ignore */ export const toInt32Array = (input: ArrayBufferViewInput) => toArrayBufferView(Int32Array, input);\n/** @ignore */ export const toBigInt64Array = (input: ArrayBufferViewInput) => toArrayBufferView(BigInt64Array, input);\n/** @ignore */ export const toUint8Array = (input: ArrayBufferViewInput) => toArrayBufferView(Uint8Array, input);\n/** @ignore */ export const toUint16Array = (input: ArrayBufferViewInput) => toArrayBufferView(Uint16Array, input);\n/** @ignore */ export const toUint32Array = (input: ArrayBufferViewInput) => toArrayBufferView(Uint32Array, input);\n/** @ignore */ export const toBigUint64Array = (input: ArrayBufferViewInput) => toArrayBufferView(BigUint64Array, input);\n/** @ignore */ export const toFloat32Array = (input: ArrayBufferViewInput) => toArrayBufferView(Float32Array, input);\n/** @ignore */ export const toFloat64Array = (input: ArrayBufferViewInput) => toArrayBufferView(Float64Array, input);\n/** @ignore */ export const toUint8ClampedArray = (input: ArrayBufferViewInput) => toArrayBufferView(Uint8ClampedArray, input);\n\n/** @ignore */\ntype ArrayBufferViewIteratorInput = Iterable<ArrayBufferViewInput> | ArrayBufferViewInput;\n\n/** @ignore */\nconst pump = <T extends Iterator<any> | AsyncIterator<any>>(iterator: T) => { iterator.next(); return iterator; };\n\n/** @ignore */\nexport function* toArrayBufferViewIterator<T extends TypedArray>(ArrayCtor: TypedArrayConstructor<T>, source: ArrayBufferViewIteratorInput) {\n\n    const wrap = function*<T>(x: T) { yield x; };\n    const buffers: Iterable<ArrayBufferViewInput> =\n                   (typeof source === 'string') ? wrap(source)\n                 : (ArrayBuffer.isView(source)) ? wrap(source)\n              : (source instanceof ArrayBuffer) ? wrap(source)\n           : (source instanceof SharedArrayBuf) ? wrap(source)\n    : !isIterable<ArrayBufferViewInput>(source) ? wrap(source) : source;\n\n    yield* pump((function* (it) {\n        let r: IteratorResult<any> = <any> null;\n        do {\n            r = it.next(yield toArrayBufferView(ArrayCtor, r));\n        } while (!r.done);\n    })(buffers[Symbol.iterator]()));\n}\n\n/** @ignore */ export const toInt8ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Int8Array, input);\n/** @ignore */ export const toInt16ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Int16Array, input);\n/** @ignore */ export const toInt32ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Int32Array, input);\n/** @ignore */ export const toUint8ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint8Array, input);\n/** @ignore */ export const toUint16ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint16Array, input);\n/** @ignore */ export const toUint32ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint32Array, input);\n/** @ignore */ export const toFloat32ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Float32Array, input);\n/** @ignore */ export const toFloat64ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Float64Array, input);\n/** @ignore */ export const toUint8ClampedArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint8ClampedArray, input);\n\n/** @ignore */\ntype ArrayBufferViewAsyncIteratorInput = AsyncIterable<ArrayBufferViewInput> | Iterable<ArrayBufferViewInput> | PromiseLike<ArrayBufferViewInput> | ArrayBufferViewInput;\n\n/** @ignore */\nexport async function* toArrayBufferViewAsyncIterator<T extends TypedArray>(ArrayCtor: TypedArrayConstructor<T>, source: ArrayBufferViewAsyncIteratorInput): AsyncIterableIterator<T> {\n\n    // if a Promise, unwrap the Promise and iterate the resolved value\n    if (isPromise<ArrayBufferViewInput>(source)) {\n        return yield* toArrayBufferViewAsyncIterator(ArrayCtor, await source);\n    }\n\n    const wrap = async function*<T>(x: T) { yield await x; };\n    const emit = async function* <T extends Iterable<any>>(source: T) {\n        yield* pump((function*(it: Iterator<any>) {\n            let r: IteratorResult<any> = <any> null;\n            do {\n                r = it.next(yield r && r.value);\n            } while (!r.done);\n        })(source[Symbol.iterator]()));\n    };\n\n    const buffers: AsyncIterable<ArrayBufferViewInput> =\n                        (typeof source === 'string') ? wrap(source) // if string, wrap in an AsyncIterableIterator\n                      : (ArrayBuffer.isView(source)) ? wrap(source) // if TypedArray, wrap in an AsyncIterableIterator\n                   : (source instanceof ArrayBuffer) ? wrap(source) // if ArrayBuffer, wrap in an AsyncIterableIterator\n                : (source instanceof SharedArrayBuf) ? wrap(source) // if SharedArrayBuffer, wrap in an AsyncIterableIterator\n          : isIterable<ArrayBufferViewInput>(source) ? emit(source) // If Iterable, wrap in an AsyncIterableIterator and compose the `next` values\n    : !isAsyncIterable<ArrayBufferViewInput>(source) ? wrap(source) // If not an AsyncIterable, treat as a sentinel and wrap in an AsyncIterableIterator\n                                                     : source; // otherwise if AsyncIterable, use it\n\n    yield* pump((async function* (it) {\n        let r: IteratorResult<any> = <any> null;\n        do {\n            r = await it.next(yield toArrayBufferView(ArrayCtor, r));\n        } while (!r.done);\n    })(buffers[Symbol.asyncIterator]()));\n}\n\n/** @ignore */ export const toInt8ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Int8Array, input);\n/** @ignore */ export const toInt16ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Int16Array, input);\n/** @ignore */ export const toInt32ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Int32Array, input);\n/** @ignore */ export const toUint8ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint8Array, input);\n/** @ignore */ export const toUint16ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint16Array, input);\n/** @ignore */ export const toUint32ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint32Array, input);\n/** @ignore */ export const toFloat32ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Float32Array, input);\n/** @ignore */ export const toFloat64ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Float64Array, input);\n/** @ignore */ export const toUint8ClampedArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint8ClampedArray, input);\n\n/** @ignore */\nexport function rebaseValueOffsets(offset: number, length: number, valueOffsets: Int32Array) {\n    // If we have a non-zero offset, create a new offsets array with the values\n    // shifted by the start offset, such that the new start offset is 0\n    if (offset !== 0) {\n        valueOffsets = valueOffsets.slice(0, length + 1);\n        for (let i = -1; ++i <= length;) {\n            valueOffsets[i] += offset;\n        }\n    }\n    return valueOffsets;\n}\n\n/** @ignore */\nexport function compareArrayLike<T extends ArrayLike<any>>(a: T, b: T) {\n    let i = 0, n = a.length;\n    if (n !== b.length) { return false; }\n    if (n > 0) {\n        do { if (a[i] !== b[i]) { return false; } } while (++i < n);\n    }\n    return true;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport {\n    toUint8Array,\n    joinUint8Arrays,\n    ArrayBufferViewInput,\n    toUint8ArrayIterator,\n    toUint8ArrayAsyncIterator\n} from '../util/buffer';\n\nimport { ReadableDOMStreamOptions } from './interfaces';\n\n/** @ignore */\nexport default {\n    fromIterable<T extends ArrayBufferViewInput>(source: Iterable<T> | T): IterableIterator<Uint8Array> {\n        return pump(fromIterable<T>(source));\n    },\n    fromAsyncIterable<T extends ArrayBufferViewInput>(source: AsyncIterable<T> | PromiseLike<T>): AsyncIterableIterator<Uint8Array> {\n        return pump(fromAsyncIterable<T>(source));\n    },\n    fromDOMStream<T extends ArrayBufferViewInput>(source: ReadableStream<T>): AsyncIterableIterator<Uint8Array> {\n        return pump(fromDOMStream<T>(source));\n    },\n    fromNodeStream(stream: NodeJS.ReadableStream): AsyncIterableIterator<Uint8Array> {\n        return pump(fromNodeStream(stream));\n    },\n    // @ts-ignore\n    toDOMStream<T>(source: Iterable<T> | AsyncIterable<T>, options?: ReadableDOMStreamOptions): ReadableStream<T> {\n        throw new Error(`\"toDOMStream\" not available in this environment`);\n    },\n    // @ts-ignore\n    toNodeStream<T>(source: Iterable<T> | AsyncIterable<T>, options?: import('stream').ReadableOptions): import('stream').Readable {\n        throw new Error(`\"toNodeStream\" not available in this environment`);\n    },\n};\n\n/** @ignore */\nconst pump = <T extends Iterator<any> | AsyncIterator<any>>(iterator: T) => { iterator.next(); return iterator; };\n\n/** @ignore */\nfunction* fromIterable<T extends ArrayBufferViewInput>(source: Iterable<T> | T): IterableIterator<Uint8Array> {\n\n    let done: boolean, threw = false;\n    let buffers: Uint8Array[] = [], buffer: Uint8Array;\n    let cmd: 'peek' | 'read', size: number, bufferLength = 0;\n\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers, size)[0];\n        }\n        [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);\n        return buffer;\n    }\n\n    // Yield so the caller can inject the read command before creating the source Iterator\n    ({ cmd, size } = yield <any> null);\n\n    // initialize the iterator\n    let it = toUint8ArrayIterator(source)[Symbol.iterator]();\n\n    try {\n        do {\n            // read the next value\n            ({ done, value: buffer } = isNaN(size - bufferLength) ?\n                it.next(undefined) : it.next(size - bufferLength));\n            // if chunk is not null or empty, push it onto the queue\n            if (!done && buffer.byteLength > 0) {\n                buffers.push(buffer);\n                bufferLength += buffer.byteLength;\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    } catch (e) {\n        (threw = true) && (typeof it.throw === 'function') && (it.throw(e));\n    } finally {\n        (threw === false) && (typeof it.return === 'function') && (it.return());\n    }\n}\n\n/** @ignore */\nasync function* fromAsyncIterable<T extends ArrayBufferViewInput>(source: AsyncIterable<T> | PromiseLike<T>): AsyncIterableIterator<Uint8Array> {\n\n    let done: boolean, threw = false;\n    let buffers: Uint8Array[] = [], buffer: Uint8Array;\n    let cmd: 'peek' | 'read', size: number, bufferLength = 0;\n\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers, size)[0];\n        }\n        [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);\n        return buffer;\n    }\n\n    // Yield so the caller can inject the read command before creating the source AsyncIterator\n    ({ cmd, size } = yield <any> null);\n\n    // initialize the iterator\n    let it = toUint8ArrayAsyncIterator(source)[Symbol.asyncIterator]();\n\n    try {\n        do {\n            // read the next value\n            ({ done, value: buffer } = isNaN(size - bufferLength)\n                ? await it.next(undefined)\n                : await it.next(size - bufferLength));\n            // if chunk is not null or empty, push it onto the queue\n            if (!done && buffer.byteLength > 0) {\n                buffers.push(buffer);\n                bufferLength += buffer.byteLength;\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    } catch (e) {\n        (threw = true) && (typeof it.throw === 'function') && (await it.throw(e));\n    } finally {\n        (threw === false) && (typeof it.return === 'function') && (await it.return());\n    }\n}\n\n// All this manual Uint8Array chunk management can be avoided if/when engines\n// add support for ArrayBuffer.transfer() or ArrayBuffer.prototype.realloc():\n// https://github.com/domenic/proposal-arraybuffer-transfer\n/** @ignore */\nasync function* fromDOMStream<T extends ArrayBufferViewInput>(source: ReadableStream<T>): AsyncIterableIterator<Uint8Array> {\n\n    let done = false, threw = false;\n    let buffers: Uint8Array[] = [], buffer: Uint8Array;\n    let cmd: 'peek' | 'read', size: number, bufferLength = 0;\n\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers, size)[0];\n        }\n        [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);\n        return buffer;\n    }\n\n    // Yield so the caller can inject the read command before we establish the ReadableStream lock\n    ({ cmd, size } = yield <any> null);\n\n    // initialize the reader and lock the stream\n    let it = new AdaptiveByteReader(source);\n\n    try {\n        do {\n            // read the next value\n            ({ done, value: buffer } = isNaN(size - bufferLength)\n                ? await it['read'](undefined)\n                : await it['read'](size - bufferLength));\n            // if chunk is not null or empty, push it onto the queue\n            if (!done && buffer.byteLength > 0) {\n                buffers.push(toUint8Array(buffer));\n                bufferLength += buffer.byteLength;\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    } catch (e) {\n        (threw = true) && (await it['cancel'](e));\n    } finally {\n        (threw === false) ? (await it['cancel']())\n            : source['locked'] && it.releaseLock();\n    }\n}\n\n/** @ignore */\nclass AdaptiveByteReader<T extends ArrayBufferViewInput> {\n\n    private supportsBYOB: boolean;\n    private byobReader: ReadableStreamBYOBReader | null = null;\n    private defaultReader: ReadableStreamDefaultReader<T> | null = null;\n    private reader: ReadableStreamBYOBReader | ReadableStreamDefaultReader<T> | null;\n\n    constructor(private source: ReadableStream<T>) {\n        try {\n            this.supportsBYOB = !!(this.reader = this.getBYOBReader());\n        } catch (e) {\n            this.supportsBYOB = !!!(this.reader = this.getDefaultReader());\n        }\n    }\n\n    get closed(): Promise<void> {\n        return this.reader ? this.reader['closed'].catch(() => {}) : Promise.resolve();\n    }\n\n    releaseLock(): void {\n        if (this.reader) {\n            this.reader.releaseLock();\n        }\n        this.reader = this.byobReader = this.defaultReader = null;\n    }\n\n    async cancel(reason?: any): Promise<void> {\n        const { reader, source } = this;\n        reader && (await reader['cancel'](reason).catch(() => {}));\n        source && (source['locked'] && this.releaseLock());\n    }\n\n    async read(size?: number): Promise<ReadableStreamReadResult<Uint8Array>> {\n        if (size === 0) {\n            return { done: this.reader == null, value: new Uint8Array(0) };\n        }\n        const result = !this.supportsBYOB || typeof size !== 'number'\n            ? await this.getDefaultReader().read()\n            : await this.readFromBYOBReader(size);\n        !result.done && (result.value = toUint8Array(result as ReadableStreamReadResult<Uint8Array>));\n        return result as ReadableStreamReadResult<Uint8Array>;\n    }\n\n    private getDefaultReader() {\n        if (this.byobReader) { this.releaseLock(); }\n        if (!this.defaultReader) {\n            this.defaultReader = this.source['getReader']();\n            // We have to catch and swallow errors here to avoid uncaught promise rejection exceptions\n            // that seem to be raised when we call `releaseLock()` on this reader. I'm still mystified\n            // about why these errors are raised, but I'm sure there's some important spec reason that\n            // I haven't considered. I hate to employ such an anti-pattern here, but it seems like the\n            // only solution in this case :/\n            this.defaultReader['closed'].catch(() => {});\n        }\n        return (this.reader = this.defaultReader);\n    }\n\n    private getBYOBReader() {\n        if (this.defaultReader) { this.releaseLock(); }\n        if (!this.byobReader) {\n            this.byobReader = this.source['getReader']({ mode: 'byob' });\n            // We have to catch and swallow errors here to avoid uncaught promise rejection exceptions\n            // that seem to be raised when we call `releaseLock()` on this reader. I'm still mystified\n            // about why these errors are raised, but I'm sure there's some important spec reason that\n            // I haven't considered. I hate to employ such an anti-pattern here, but it seems like the\n            // only solution in this case :/\n            this.byobReader['closed'].catch(() => {});\n        }\n        return (this.reader = this.byobReader);\n    }\n\n    // This strategy plucked from the example in the streams spec:\n    // https://streams.spec.whatwg.org/#example-manual-read-bytes\n    private async readFromBYOBReader(size: number) {\n        return await readInto(this.getBYOBReader(), new ArrayBuffer(size), 0, size);\n    }\n}\n\n/** @ignore */\nasync function readInto(reader: ReadableStreamBYOBReader, buffer: ArrayBufferLike, offset: number, size: number): Promise<ReadableStreamReadResult<Uint8Array>> {\n    if (offset >= size) {\n        return { done: false, value: new Uint8Array(buffer, 0, size) };\n    }\n    const { done, value } = await reader.read(new Uint8Array(buffer, offset, size - offset));\n    if (((offset += value.byteLength) < size) && !done) {\n        return await readInto(reader, value.buffer, offset, size);\n    }\n    return { done, value: new Uint8Array(value.buffer, 0, offset) };\n}\n\n/** @ignore */\ntype EventName = 'end' | 'error' | 'readable';\n/** @ignore */\ntype Event = [EventName, (_: any) => void, Promise<[EventName, Error | null]>];\n/** @ignore */\nconst onEvent = <T extends string>(stream: NodeJS.ReadableStream, event: T) => {\n    let handler = (_: any) => resolve([event, _]);\n    let resolve: (value?: [T, any] | PromiseLike<[T, any]>) => void;\n    return [event, handler, new Promise<[T, any]>(\n        (r) => (resolve = r) && stream['once'](event, handler)\n    )] as Event;\n};\n\n/** @ignore */\nasync function* fromNodeStream(stream: NodeJS.ReadableStream): AsyncIterableIterator<Uint8Array> {\n\n    let events: Event[] = [];\n    let event: EventName = 'error';\n    let done = false, err: Error | null = null;\n    let cmd: 'peek' | 'read', size: number, bufferLength = 0;\n    let buffers: Uint8Array[] = [], buffer: Uint8Array | Buffer | string;\n\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers, size)[0];\n        }\n        [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);\n        return buffer;\n    }\n\n    // Yield so the caller can inject the read command before we\n    // add the listener for the source stream's 'readable' event.\n    ({ cmd, size } = yield <any> null);\n\n    // ignore stdin if it's a TTY\n    if ((stream as any)['isTTY']) { return yield new Uint8Array(0); }\n\n    try {\n        // initialize the stream event handlers\n        events[0] = onEvent(stream, 'end');\n        events[1] = onEvent(stream, 'error');\n\n        do {\n            events[2] = onEvent(stream, 'readable');\n\n            // wait on the first message event from the stream\n            [event, err] = await Promise.race(events.map((x) => x[2]));\n\n            // if the stream emitted an Error, rethrow it\n            if (event === 'error') { break; }\n            if (!(done = event === 'end')) {\n                // If the size is NaN, request to read everything in the stream's internal buffer\n                if (!isFinite(size - bufferLength)) {\n                    buffer = toUint8Array(stream['read'](undefined));\n                } else {\n                    buffer = toUint8Array(stream['read'](size - bufferLength));\n                    // If the byteLength is 0, then the requested amount is more than the stream has\n                    // in its internal buffer. In this case the stream needs a \"kick\" to tell it to\n                    // continue emitting readable events, so request to read everything the stream\n                    // has in its internal buffer right now.\n                    if (buffer.byteLength < (size - bufferLength)) {\n                        buffer = toUint8Array(stream['read'](undefined));\n                    }\n                }\n                // if chunk is not null or empty, push it onto the queue\n                if (buffer.byteLength > 0) {\n                    buffers.push(buffer);\n                    bufferLength += buffer.byteLength;\n                }\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    } finally {\n        await cleanup(events, event === 'error' ? err : null);\n    }\n\n    function cleanup<T extends Error | null | void>(events: Event[], err?: T) {\n        buffer = buffers = <any> null;\n        return new Promise<T>(async (resolve, reject) => {\n            for (const [evt, fn] of events) {\n                stream['off'](evt, fn);\n            }\n            try {\n                // Some stream implementations don't call the destroy callback,\n                // because it's really a node-internal API. Just calling `destroy`\n                // here should be enough to conform to the ReadableStream contract\n                const destroy = (stream as any)['destroy'];\n                destroy && destroy.call(stream, err);\n                err = undefined;\n            } catch (e) { err = e || err; } finally {\n                err != null ? reject(err) : resolve();\n            }\n        });\n    }\n}\n","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"./defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}","import superPropBase from \"./superPropBase\";\nexport default function _get(target, property, receiver) {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = superPropBase(target, property);\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get(target, property, receiver || target);\n}","import getPrototypeOf from \"./getPrototypeOf\";\nexport default function _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = getPrototypeOf(object);\n    if (object === null) break;\n  }\n\n  return object;\n}","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { DataType } from './type';\nimport { Chunked } from './vector/chunked';\n\n/** @ignore */\nexport interface Clonable<R extends AbstractVector> {\n    clone(...args: any[]): R;\n}\n\n/** @ignore */\nexport interface Sliceable<R extends AbstractVector> {\n    slice(begin?: number, end?: number): R;\n}\n\n/** @ignore */\nexport interface Applicative<T extends DataType, R extends Chunked> {\n    concat(...others: Vector<T>[]): R;\n    readonly [Symbol.isConcatSpreadable]: boolean;\n}\n\nexport interface AbstractVector<T extends DataType = any>\n    extends Clonable<Vector<T>>,\n            Sliceable<Vector<T>>,\n            Applicative<T, Chunked<T>> {\n\n    readonly TType: T['TType'];\n    readonly TArray: T['TArray'];\n    readonly TValue: T['TValue'];\n}\n\nexport abstract class AbstractVector<T extends DataType = any> implements Iterable<T['TValue'] | null> {\n\n    public abstract readonly data: Data<T>;\n    public abstract readonly type: T;\n    public abstract readonly typeId: T['TType'];\n    public abstract readonly length: number;\n    public abstract readonly stride: number;\n    public abstract readonly nullCount: number;\n    public abstract readonly byteLength: number;\n    public abstract readonly numChildren: number;\n\n    public abstract readonly ArrayType: T['ArrayType'];\n\n    public abstract isValid(index: number): boolean;\n    public abstract get(index: number): T['TValue'] | null;\n    public abstract set(index: number, value: T['TValue'] | null): void;\n    public abstract indexOf(value: T['TValue'] | null, fromIndex?: number): number;\n    public abstract [Symbol.iterator](): IterableIterator<T['TValue'] | null>;\n\n    public abstract toArray(): T['TArray'];\n    public abstract getChildAt<R extends DataType = any>(index: number): Vector<R> | null;\n}\n\nexport { AbstractVector as Vector };\n","/* tslint:disable:class-name */\n\n// automatically generated by the FlatBuffers compiler, do not modify\n\nimport { flatbuffers } from 'flatbuffers';\n/**\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum MetadataVersion {\n        /**\n         * 0.1.0\n         */\n        V1 = 0,\n\n        /**\n         * 0.2.0\n         */\n        V2 = 1,\n\n        /**\n         * 0.3.0 -> 0.7.1\n         */\n        V3 = 2,\n\n        /**\n         * >= 0.8.0\n         */\n        V4 = 3\n    }\n}\n\n/**\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum UnionMode {\n        Sparse = 0,\n        Dense = 1\n    }\n}\n\n/**\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum Precision {\n        HALF = 0,\n        SINGLE = 1,\n        DOUBLE = 2\n    }\n}\n\n/**\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum DateUnit {\n        DAY = 0,\n        MILLISECOND = 1\n    }\n}\n\n/**\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum TimeUnit {\n        SECOND = 0,\n        MILLISECOND = 1,\n        MICROSECOND = 2,\n        NANOSECOND = 3\n    }\n}\n\n/**\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum IntervalUnit {\n        YEAR_MONTH = 0,\n        DAY_TIME = 1\n    }\n}\n\n/**\n * ----------------------------------------------------------------------\n * Top-level Type value, enabling extensible type-specific metadata. We can\n * add new logical types to Type without breaking backwards compatibility\n *\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum Type {\n        NONE = 0,\n        Null = 1,\n        Int = 2,\n        FloatingPoint = 3,\n        Binary = 4,\n        Utf8 = 5,\n        Bool = 6,\n        Decimal = 7,\n        Date = 8,\n        Time = 9,\n        Timestamp = 10,\n        Interval = 11,\n        List = 12,\n        Struct_ = 13,\n        Union = 14,\n        FixedSizeBinary = 15,\n        FixedSizeList = 16,\n        Map = 17,\n        Duration = 18,\n        LargeBinary = 19,\n        LargeUtf8 = 20,\n        LargeList = 21\n    }\n}\n\n/**\n * ----------------------------------------------------------------------\n * Endianness of the platform producing the data\n *\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum Endianness {\n        Little = 0,\n        Big = 1\n    }\n}\n\n/**\n * These are stored in the flatbuffer in the Type union below\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Null {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Null\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Null {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Null= obj\n         * @returns Null\n         */\n        static getRootAsNull(bb: flatbuffers.ByteBuffer, obj?: Null): Null {\n            return (obj || new Null).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startNull(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endNull(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createNull(builder: flatbuffers.Builder): flatbuffers.Offset {\n            Null.startNull(builder);\n            return Null.endNull(builder);\n        }\n    }\n}\n/**\n * A Struct_ in the flatbuffer metadata is the same as an Arrow Struct\n * (according to the physical memory layout). We used Struct_ here as\n * Struct is a reserved word in Flatbuffers\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Struct_ {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Struct_\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Struct_ {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Struct_= obj\n         * @returns Struct_\n         */\n        static getRootAsStruct_(bb: flatbuffers.ByteBuffer, obj?: Struct_): Struct_ {\n            return (obj || new Struct_).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startStruct_(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endStruct_(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createStruct_(builder: flatbuffers.Builder): flatbuffers.Offset {\n            Struct_.startStruct_(builder);\n            return Struct_.endStruct_(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class List {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns List\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): List {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param List= obj\n         * @returns List\n         */\n        static getRootAsList(bb: flatbuffers.ByteBuffer, obj?: List): List {\n            return (obj || new List).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startList(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endList(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createList(builder: flatbuffers.Builder): flatbuffers.Offset {\n            List.startList(builder);\n            return List.endList(builder);\n        }\n    }\n}\n/**\n * Same as List, but with 64-bit offsets, allowing to represent\n * extremely large data values.\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class LargeList {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns LargeList\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): LargeList {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param LargeList= obj\n         * @returns LargeList\n         */\n        static getRootAsLargeList(bb: flatbuffers.ByteBuffer, obj?: LargeList): LargeList {\n            return (obj || new LargeList).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startLargeList(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endLargeList(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createLargeList(builder: flatbuffers.Builder): flatbuffers.Offset {\n            LargeList.startLargeList(builder);\n            return LargeList.endLargeList(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class FixedSizeList {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns FixedSizeList\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): FixedSizeList {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param FixedSizeList= obj\n         * @returns FixedSizeList\n         */\n        static getRootAsFixedSizeList(bb: flatbuffers.ByteBuffer, obj?: FixedSizeList): FixedSizeList {\n            return (obj || new FixedSizeList).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * Number of list items per value\n         *\n         * @returns number\n         */\n        listSize(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startFixedSizeList(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number listSize\n         */\n        static addListSize(builder: flatbuffers.Builder, listSize: number) {\n            builder.addFieldInt32(0, listSize, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endFixedSizeList(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createFixedSizeList(builder: flatbuffers.Builder, listSize: number): flatbuffers.Offset {\n            FixedSizeList.startFixedSizeList(builder);\n            FixedSizeList.addListSize(builder, listSize);\n            return FixedSizeList.endFixedSizeList(builder);\n        }\n    }\n}\n/**\n * A Map is a logical nested type that is represented as\n *\n * List<entry: Struct<key: K, value: V>>\n *\n * In this layout, the keys and values are each respectively contiguous. We do\n * not constrain the key and value types, so the application is responsible\n * for ensuring that the keys are hashable and unique. Whether the keys are sorted\n * may be set in the metadata for this field\n *\n * In a Field with Map type, the Field has a child Struct field, which then\n * has two children: key type and the second the value type. The names of the\n * child fields may be respectively \"entry\", \"key\", and \"value\", but this is\n * not enforced\n *\n * Map\n *   - child[0] entry: Struct\n *     - child[0] key: K\n *     - child[1] value: V\n *\n * Neither the \"entry\" field nor the \"key\" field may be nullable.\n *\n * The metadata is structured so that Arrow systems without special handling\n * for Map can make Map an alias for List. The \"layout\" attribute for the Map\n * field must have the same contents as a List.\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Map {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Map\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Map {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Map= obj\n         * @returns Map\n         */\n        static getRootAsMap(bb: flatbuffers.ByteBuffer, obj?: Map): Map {\n            return (obj || new Map).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * Set to true if the keys within each value are sorted\n         *\n         * @returns boolean\n         */\n        keysSorted(): boolean {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startMap(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param boolean keysSorted\n         */\n        static addKeysSorted(builder: flatbuffers.Builder, keysSorted: boolean) {\n            builder.addFieldInt8(0, +keysSorted, +false);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endMap(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createMap(builder: flatbuffers.Builder, keysSorted: boolean): flatbuffers.Offset {\n            Map.startMap(builder);\n            Map.addKeysSorted(builder, keysSorted);\n            return Map.endMap(builder);\n        }\n    }\n}\n/**\n * A union is a complex type with children in Field\n * By default ids in the type vector refer to the offsets in the children\n * optionally typeIds provides an indirection between the child offset and the type id\n * for each child typeIds[offset] is the id used in the type vector\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Union {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Union\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Union {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Union= obj\n         * @returns Union\n         */\n        static getRootAsUnion(bb: flatbuffers.ByteBuffer, obj?: Union): Union {\n            return (obj || new Union).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.UnionMode\n         */\n        mode(): org.apache.arrow.flatbuf.UnionMode {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.UnionMode.Sparse;\n        }\n\n        /**\n         * @param number index\n         * @returns number\n         */\n        typeIds(index: number): number | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n        }\n\n        /**\n         * @returns number\n         */\n        typeIdsLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @returns Int32Array\n         */\n        typeIdsArray(): Int32Array | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? new Int32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startUnion(builder: flatbuffers.Builder) {\n            builder.startObject(2);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.UnionMode mode\n         */\n        static addMode(builder: flatbuffers.Builder, mode: org.apache.arrow.flatbuf.UnionMode) {\n            builder.addFieldInt16(0, mode, org.apache.arrow.flatbuf.UnionMode.Sparse);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset typeIdsOffset\n         */\n        static addTypeIds(builder: flatbuffers.Builder, typeIdsOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, typeIdsOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<number> data\n         * @returns flatbuffers.Offset\n         */\n        static createTypeIdsVector(builder: flatbuffers.Builder, data: number[] | Int32Array): flatbuffers.Offset {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addInt32(data[i]);\n            }\n            return builder.endVector();\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startTypeIdsVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(4, numElems, 4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endUnion(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createUnion(builder: flatbuffers.Builder, mode: org.apache.arrow.flatbuf.UnionMode, typeIdsOffset: flatbuffers.Offset): flatbuffers.Offset {\n            Union.startUnion(builder);\n            Union.addMode(builder, mode);\n            Union.addTypeIds(builder, typeIdsOffset);\n            return Union.endUnion(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Int {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Int\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Int {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Int= obj\n         * @returns Int\n         */\n        static getRootAsInt(bb: flatbuffers.ByteBuffer, obj?: Int): Int {\n            return (obj || new Int).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns number\n         */\n        bitWidth(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @returns boolean\n         */\n        isSigned(): boolean {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startInt(builder: flatbuffers.Builder) {\n            builder.startObject(2);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number bitWidth\n         */\n        static addBitWidth(builder: flatbuffers.Builder, bitWidth: number) {\n            builder.addFieldInt32(0, bitWidth, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param boolean isSigned\n         */\n        static addIsSigned(builder: flatbuffers.Builder, isSigned: boolean) {\n            builder.addFieldInt8(1, +isSigned, +false);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endInt(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createInt(builder: flatbuffers.Builder, bitWidth: number, isSigned: boolean): flatbuffers.Offset {\n            Int.startInt(builder);\n            Int.addBitWidth(builder, bitWidth);\n            Int.addIsSigned(builder, isSigned);\n            return Int.endInt(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class FloatingPoint {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns FloatingPoint\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): FloatingPoint {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param FloatingPoint= obj\n         * @returns FloatingPoint\n         */\n        static getRootAsFloatingPoint(bb: flatbuffers.ByteBuffer, obj?: FloatingPoint): FloatingPoint {\n            return (obj || new FloatingPoint).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.Precision\n         */\n        precision(): org.apache.arrow.flatbuf.Precision {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Precision.HALF;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startFloatingPoint(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.Precision precision\n         */\n        static addPrecision(builder: flatbuffers.Builder, precision: org.apache.arrow.flatbuf.Precision) {\n            builder.addFieldInt16(0, precision, org.apache.arrow.flatbuf.Precision.HALF);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endFloatingPoint(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createFloatingPoint(builder: flatbuffers.Builder, precision: org.apache.arrow.flatbuf.Precision): flatbuffers.Offset {\n            FloatingPoint.startFloatingPoint(builder);\n            FloatingPoint.addPrecision(builder, precision);\n            return FloatingPoint.endFloatingPoint(builder);\n        }\n    }\n}\n/**\n * Unicode with UTF-8 encoding\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Utf8 {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Utf8\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Utf8 {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Utf8= obj\n         * @returns Utf8\n         */\n        static getRootAsUtf8(bb: flatbuffers.ByteBuffer, obj?: Utf8): Utf8 {\n            return (obj || new Utf8).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startUtf8(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endUtf8(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createUtf8(builder: flatbuffers.Builder): flatbuffers.Offset {\n            Utf8.startUtf8(builder);\n            return Utf8.endUtf8(builder);\n        }\n    }\n}\n/**\n * Opaque binary data\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Binary {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Binary\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Binary {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Binary= obj\n         * @returns Binary\n         */\n        static getRootAsBinary(bb: flatbuffers.ByteBuffer, obj?: Binary): Binary {\n            return (obj || new Binary).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startBinary(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n            Binary.startBinary(builder);\n            return Binary.endBinary(builder);\n        }\n    }\n}\n/**\n * Same as Utf8, but with 64-bit offsets, allowing to represent\n * extremely large data values.\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class LargeUtf8 {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns LargeUtf8\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): LargeUtf8 {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param LargeUtf8= obj\n         * @returns LargeUtf8\n         */\n        static getRootAsLargeUtf8(bb: flatbuffers.ByteBuffer, obj?: LargeUtf8): LargeUtf8 {\n            return (obj || new LargeUtf8).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startLargeUtf8(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endLargeUtf8(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createLargeUtf8(builder: flatbuffers.Builder): flatbuffers.Offset {\n            LargeUtf8.startLargeUtf8(builder);\n            return LargeUtf8.endLargeUtf8(builder);\n        }\n    }\n}\n/**\n * Same as Binary, but with 64-bit offsets, allowing to represent\n * extremely large data values.\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class LargeBinary {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns LargeBinary\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): LargeBinary {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param LargeBinary= obj\n         * @returns LargeBinary\n         */\n        static getRootAsLargeBinary(bb: flatbuffers.ByteBuffer, obj?: LargeBinary): LargeBinary {\n            return (obj || new LargeBinary).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startLargeBinary(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endLargeBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createLargeBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n            LargeBinary.startLargeBinary(builder);\n            return LargeBinary.endLargeBinary(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class FixedSizeBinary {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns FixedSizeBinary\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): FixedSizeBinary {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param FixedSizeBinary= obj\n         * @returns FixedSizeBinary\n         */\n        static getRootAsFixedSizeBinary(bb: flatbuffers.ByteBuffer, obj?: FixedSizeBinary): FixedSizeBinary {\n            return (obj || new FixedSizeBinary).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * Number of bytes per value\n         *\n         * @returns number\n         */\n        byteWidth(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startFixedSizeBinary(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number byteWidth\n         */\n        static addByteWidth(builder: flatbuffers.Builder, byteWidth: number) {\n            builder.addFieldInt32(0, byteWidth, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endFixedSizeBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createFixedSizeBinary(builder: flatbuffers.Builder, byteWidth: number): flatbuffers.Offset {\n            FixedSizeBinary.startFixedSizeBinary(builder);\n            FixedSizeBinary.addByteWidth(builder, byteWidth);\n            return FixedSizeBinary.endFixedSizeBinary(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Bool {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Bool\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Bool {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Bool= obj\n         * @returns Bool\n         */\n        static getRootAsBool(bb: flatbuffers.ByteBuffer, obj?: Bool): Bool {\n            return (obj || new Bool).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startBool(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endBool(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createBool(builder: flatbuffers.Builder): flatbuffers.Offset {\n            Bool.startBool(builder);\n            return Bool.endBool(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Decimal {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Decimal\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Decimal {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Decimal= obj\n         * @returns Decimal\n         */\n        static getRootAsDecimal(bb: flatbuffers.ByteBuffer, obj?: Decimal): Decimal {\n            return (obj || new Decimal).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * Total number of decimal digits\n         *\n         * @returns number\n         */\n        precision(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * Number of digits after the decimal point \".\"\n         *\n         * @returns number\n         */\n        scale(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startDecimal(builder: flatbuffers.Builder) {\n            builder.startObject(2);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number precision\n         */\n        static addPrecision(builder: flatbuffers.Builder, precision: number) {\n            builder.addFieldInt32(0, precision, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number scale\n         */\n        static addScale(builder: flatbuffers.Builder, scale: number) {\n            builder.addFieldInt32(1, scale, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endDecimal(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createDecimal(builder: flatbuffers.Builder, precision: number, scale: number): flatbuffers.Offset {\n            Decimal.startDecimal(builder);\n            Decimal.addPrecision(builder, precision);\n            Decimal.addScale(builder, scale);\n            return Decimal.endDecimal(builder);\n        }\n    }\n}\n/**\n * Date is either a 32-bit or 64-bit type representing elapsed time since UNIX\n * epoch (1970-01-01), stored in either of two units:\n *\n * * Milliseconds (64 bits) indicating UNIX time elapsed since the epoch (no\n *   leap seconds), where the values are evenly divisible by 86400000\n * * Days (32 bits) since the UNIX epoch\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Date {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Date\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Date {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Date= obj\n         * @returns Date\n         */\n        static getRootAsDate(bb: flatbuffers.ByteBuffer, obj?: Date): Date {\n            return (obj || new Date).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.DateUnit\n         */\n        unit(): org.apache.arrow.flatbuf.DateUnit {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.DateUnit.MILLISECOND;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startDate(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.DateUnit unit\n         */\n        static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.DateUnit) {\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.DateUnit.MILLISECOND);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endDate(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createDate(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.DateUnit): flatbuffers.Offset {\n            Date.startDate(builder);\n            Date.addUnit(builder, unit);\n            return Date.endDate(builder);\n        }\n    }\n}\n/**\n * Time type. The physical storage type depends on the unit\n * - SECOND and MILLISECOND: 32 bits\n * - MICROSECOND and NANOSECOND: 64 bits\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Time {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Time\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Time {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Time= obj\n         * @returns Time\n         */\n        static getRootAsTime(bb: flatbuffers.ByteBuffer, obj?: Time): Time {\n            return (obj || new Time).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.TimeUnit\n         */\n        unit(): org.apache.arrow.flatbuf.TimeUnit {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.TimeUnit.MILLISECOND;\n        }\n\n        /**\n         * @returns number\n         */\n        bitWidth(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 32;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startTime(builder: flatbuffers.Builder) {\n            builder.startObject(2);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.TimeUnit unit\n         */\n        static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit) {\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.MILLISECOND);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number bitWidth\n         */\n        static addBitWidth(builder: flatbuffers.Builder, bitWidth: number) {\n            builder.addFieldInt32(1, bitWidth, 32);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endTime(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createTime(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit, bitWidth: number): flatbuffers.Offset {\n            Time.startTime(builder);\n            Time.addUnit(builder, unit);\n            Time.addBitWidth(builder, bitWidth);\n            return Time.endTime(builder);\n        }\n    }\n}\n/**\n * Time elapsed from the Unix epoch, 00:00:00.000 on 1 January 1970, excluding\n * leap seconds, as a 64-bit integer. Note that UNIX time does not include\n * leap seconds.\n *\n * The Timestamp metadata supports both \"time zone naive\" and \"time zone\n * aware\" timestamps. Read about the timezone attribute for more detail\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Timestamp {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Timestamp\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Timestamp {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Timestamp= obj\n         * @returns Timestamp\n         */\n        static getRootAsTimestamp(bb: flatbuffers.ByteBuffer, obj?: Timestamp): Timestamp {\n            return (obj || new Timestamp).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.TimeUnit\n         */\n        unit(): org.apache.arrow.flatbuf.TimeUnit {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.TimeUnit.SECOND;\n        }\n\n        /**\n         * The time zone is a string indicating the name of a time zone, one of:\n         *\n         * * As used in the Olson time zone database (the \"tz database\" or\n         *   \"tzdata\"), such as \"America/New_York\"\n         * * An absolute time zone offset of the form +XX:XX or -XX:XX, such as +07:30\n         *\n         * Whether a timezone string is present indicates different semantics about\n         * the data:\n         *\n         * * If the time zone is null or equal to an empty string, the data is \"time\n         *   zone naive\" and shall be displayed *as is* to the user, not localized\n         *   to the locale of the user. This data can be though of as UTC but\n         *   without having \"UTC\" as the time zone, it is not considered to be\n         *   localized to any time zone\n         *\n         * * If the time zone is set to a valid value, values can be displayed as\n         *   \"localized\" to that time zone, even though the underlying 64-bit\n         *   integers are identical to the same data stored in UTC. Converting\n         *   between time zones is a metadata-only operation and does not change the\n         *   underlying values\n         *\n         * @param flatbuffers.Encoding= optionalEncoding\n         * @returns string|Uint8Array|null\n         */\n        timezone(): string | null;\n        timezone(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n        timezone(optionalEncoding?: any): string | Uint8Array | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startTimestamp(builder: flatbuffers.Builder) {\n            builder.startObject(2);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.TimeUnit unit\n         */\n        static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit) {\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.SECOND);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset timezoneOffset\n         */\n        static addTimezone(builder: flatbuffers.Builder, timezoneOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, timezoneOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endTimestamp(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createTimestamp(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit, timezoneOffset: flatbuffers.Offset): flatbuffers.Offset {\n            Timestamp.startTimestamp(builder);\n            Timestamp.addUnit(builder, unit);\n            Timestamp.addTimezone(builder, timezoneOffset);\n            return Timestamp.endTimestamp(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Interval {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Interval\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Interval {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Interval= obj\n         * @returns Interval\n         */\n        static getRootAsInterval(bb: flatbuffers.ByteBuffer, obj?: Interval): Interval {\n            return (obj || new Interval).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.IntervalUnit\n         */\n        unit(): org.apache.arrow.flatbuf.IntervalUnit {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.IntervalUnit.YEAR_MONTH;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startInterval(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.IntervalUnit unit\n         */\n        static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.IntervalUnit) {\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.IntervalUnit.YEAR_MONTH);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endInterval(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createInterval(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.IntervalUnit): flatbuffers.Offset {\n            Interval.startInterval(builder);\n            Interval.addUnit(builder, unit);\n            return Interval.endInterval(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Duration {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Duration\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Duration {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Duration= obj\n         * @returns Duration\n         */\n        static getRootAsDuration(bb: flatbuffers.ByteBuffer, obj?: Duration): Duration {\n            return (obj || new Duration).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.TimeUnit\n         */\n        unit(): org.apache.arrow.flatbuf.TimeUnit {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.TimeUnit.MILLISECOND;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startDuration(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.TimeUnit unit\n         */\n        static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit) {\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.MILLISECOND);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endDuration(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createDuration(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit): flatbuffers.Offset {\n            Duration.startDuration(builder);\n            Duration.addUnit(builder, unit);\n            return Duration.endDuration(builder);\n        }\n    }\n}\n/**\n * ----------------------------------------------------------------------\n * user defined key value pairs to add custom metadata to arrow\n * key namespacing is the responsibility of the user\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class KeyValue {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns KeyValue\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): KeyValue {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param KeyValue= obj\n         * @returns KeyValue\n         */\n        static getRootAsKeyValue(bb: flatbuffers.ByteBuffer, obj?: KeyValue): KeyValue {\n            return (obj || new KeyValue).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Encoding= optionalEncoding\n         * @returns string|Uint8Array|null\n         */\n        key(): string | null;\n        key(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n        key(optionalEncoding?: any): string | Uint8Array | null {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n        }\n\n        /**\n         * @param flatbuffers.Encoding= optionalEncoding\n         * @returns string|Uint8Array|null\n         */\n        value(): string | null;\n        value(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n        value(optionalEncoding?: any): string | Uint8Array | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startKeyValue(builder: flatbuffers.Builder) {\n            builder.startObject(2);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset keyOffset\n         */\n        static addKey(builder: flatbuffers.Builder, keyOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(0, keyOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset valueOffset\n         */\n        static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, valueOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endKeyValue(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createKeyValue(builder: flatbuffers.Builder, keyOffset: flatbuffers.Offset, valueOffset: flatbuffers.Offset): flatbuffers.Offset {\n            KeyValue.startKeyValue(builder);\n            KeyValue.addKey(builder, keyOffset);\n            KeyValue.addValue(builder, valueOffset);\n            return KeyValue.endKeyValue(builder);\n        }\n    }\n}\n/**\n * ----------------------------------------------------------------------\n * Dictionary encoding metadata\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class DictionaryEncoding {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns DictionaryEncoding\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): DictionaryEncoding {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param DictionaryEncoding= obj\n         * @returns DictionaryEncoding\n         */\n        static getRootAsDictionaryEncoding(bb: flatbuffers.ByteBuffer, obj?: DictionaryEncoding): DictionaryEncoding {\n            return (obj || new DictionaryEncoding).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * The known dictionary id in the application where this data is used. In\n         * the file or streaming formats, the dictionary ids are found in the\n         * DictionaryBatch messages\n         *\n         * @returns flatbuffers.Long\n         */\n        id(): flatbuffers.Long {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n        }\n\n        /**\n         * The dictionary indices are constrained to be positive integers. If this\n         * field is null, the indices must be signed int32\n         *\n         * @param org.apache.arrow.flatbuf.Int= obj\n         * @returns org.apache.arrow.flatbuf.Int|null\n         */\n        indexType(obj?: org.apache.arrow.flatbuf.Int): org.apache.arrow.flatbuf.Int | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? (obj || new org.apache.arrow.flatbuf.Int).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;\n        }\n\n        /**\n         * By default, dictionaries are not ordered, or the order does not have\n         * semantic meaning. In some statistical, applications, dictionary-encoding\n         * is used to represent ordered categorical data, and we provide a way to\n         * preserve that metadata here\n         *\n         * @returns boolean\n         */\n        isOrdered(): boolean {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startDictionaryEncoding(builder: flatbuffers.Builder) {\n            builder.startObject(3);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long id\n         */\n        static addId(builder: flatbuffers.Builder, id: flatbuffers.Long) {\n            builder.addFieldInt64(0, id, builder.createLong(0, 0));\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset indexTypeOffset\n         */\n        static addIndexType(builder: flatbuffers.Builder, indexTypeOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, indexTypeOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param boolean isOrdered\n         */\n        static addIsOrdered(builder: flatbuffers.Builder, isOrdered: boolean) {\n            builder.addFieldInt8(2, +isOrdered, +false);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endDictionaryEncoding(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createDictionaryEncoding(builder: flatbuffers.Builder, id: flatbuffers.Long, indexTypeOffset: flatbuffers.Offset, isOrdered: boolean): flatbuffers.Offset {\n            DictionaryEncoding.startDictionaryEncoding(builder);\n            DictionaryEncoding.addId(builder, id);\n            DictionaryEncoding.addIndexType(builder, indexTypeOffset);\n            DictionaryEncoding.addIsOrdered(builder, isOrdered);\n            return DictionaryEncoding.endDictionaryEncoding(builder);\n        }\n    }\n}\n/**\n * ----------------------------------------------------------------------\n * A field represents a named column in a record / row batch or child of a\n * nested type.\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Field {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Field\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Field {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Field= obj\n         * @returns Field\n         */\n        static getRootAsField(bb: flatbuffers.ByteBuffer, obj?: Field): Field {\n            return (obj || new Field).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * Name is not required, in i.e. a List\n         *\n         * @param flatbuffers.Encoding= optionalEncoding\n         * @returns string|Uint8Array|null\n         */\n        name(): string | null;\n        name(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n        name(optionalEncoding?: any): string | Uint8Array | null {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n        }\n\n        /**\n         * Whether or not this field can contain nulls. Should be true in general.\n         *\n         * @returns boolean\n         */\n        nullable(): boolean {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.Type\n         */\n        typeType(): org.apache.arrow.flatbuf.Type {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? /**  */ (this.bb!.readUint8(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Type.NONE;\n        }\n\n        /**\n         * This is the type of the decoded value if the field is dictionary encoded.\n         *\n         * @param flatbuffers.Table obj\n         * @returns ?flatbuffers.Table\n         */\n        type<T extends flatbuffers.Table>(obj: T): T | null {\n            let offset = this.bb!.__offset(this.bb_pos, 10);\n            return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;\n        }\n\n        /**\n         * Present only if the field is dictionary encoded.\n         *\n         * @param org.apache.arrow.flatbuf.DictionaryEncoding= obj\n         * @returns org.apache.arrow.flatbuf.DictionaryEncoding|null\n         */\n        dictionary(obj?: org.apache.arrow.flatbuf.DictionaryEncoding): org.apache.arrow.flatbuf.DictionaryEncoding | null {\n            let offset = this.bb!.__offset(this.bb_pos, 12);\n            return offset ? (obj || new org.apache.arrow.flatbuf.DictionaryEncoding).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;\n        }\n\n        /**\n         * children apply only to nested data types like Struct, List and Union. For\n         * primitive types children will have length 0.\n         *\n         * @param number index\n         * @param org.apache.arrow.flatbuf.Field= obj\n         * @returns org.apache.arrow.flatbuf.Field\n         */\n        children(index: number, obj?: org.apache.arrow.flatbuf.Field): org.apache.arrow.flatbuf.Field | null {\n            let offset = this.bb!.__offset(this.bb_pos, 14);\n            return offset ? (obj || new org.apache.arrow.flatbuf.Field).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        childrenLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 14);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * User-defined metadata\n         *\n         * @param number index\n         * @param org.apache.arrow.flatbuf.KeyValue= obj\n         * @returns org.apache.arrow.flatbuf.KeyValue\n         */\n        customMetadata(index: number, obj?: org.apache.arrow.flatbuf.KeyValue): org.apache.arrow.flatbuf.KeyValue | null {\n            let offset = this.bb!.__offset(this.bb_pos, 16);\n            return offset ? (obj || new org.apache.arrow.flatbuf.KeyValue).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        customMetadataLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 16);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startField(builder: flatbuffers.Builder) {\n            builder.startObject(7);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset nameOffset\n         */\n        static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(0, nameOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param boolean nullable\n         */\n        static addNullable(builder: flatbuffers.Builder, nullable: boolean) {\n            builder.addFieldInt8(1, +nullable, +false);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.Type typeType\n         */\n        static addTypeType(builder: flatbuffers.Builder, typeType: org.apache.arrow.flatbuf.Type) {\n            builder.addFieldInt8(2, typeType, org.apache.arrow.flatbuf.Type.NONE);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset typeOffset\n         */\n        static addType(builder: flatbuffers.Builder, typeOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(3, typeOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset dictionaryOffset\n         */\n        static addDictionary(builder: flatbuffers.Builder, dictionaryOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(4, dictionaryOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset childrenOffset\n         */\n        static addChildren(builder: flatbuffers.Builder, childrenOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(5, childrenOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<flatbuffers.Offset> data\n         * @returns flatbuffers.Offset\n         */\n        static createChildrenVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addOffset(data[i]);\n            }\n            return builder.endVector();\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startChildrenVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(4, numElems, 4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset customMetadataOffset\n         */\n        static addCustomMetadata(builder: flatbuffers.Builder, customMetadataOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(6, customMetadataOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<flatbuffers.Offset> data\n         * @returns flatbuffers.Offset\n         */\n        static createCustomMetadataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addOffset(data[i]);\n            }\n            return builder.endVector();\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startCustomMetadataVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(4, numElems, 4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endField(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createField(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, nullable: boolean, typeType: org.apache.arrow.flatbuf.Type, typeOffset: flatbuffers.Offset, dictionaryOffset: flatbuffers.Offset, childrenOffset: flatbuffers.Offset, customMetadataOffset: flatbuffers.Offset): flatbuffers.Offset {\n            Field.startField(builder);\n            Field.addName(builder, nameOffset);\n            Field.addNullable(builder, nullable);\n            Field.addTypeType(builder, typeType);\n            Field.addType(builder, typeOffset);\n            Field.addDictionary(builder, dictionaryOffset);\n            Field.addChildren(builder, childrenOffset);\n            Field.addCustomMetadata(builder, customMetadataOffset);\n            return Field.endField(builder);\n        }\n    }\n}\n/**\n * ----------------------------------------------------------------------\n * A Buffer represents a single contiguous memory segment\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Buffer {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Buffer\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Buffer {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * The relative offset into the shared memory page where the bytes for this\n         * buffer starts\n         *\n         * @returns flatbuffers.Long\n         */\n        offset(): flatbuffers.Long {\n            return this.bb!.readInt64(this.bb_pos);\n        }\n\n        /**\n         * The absolute length (in bytes) of the memory buffer. The memory is found\n         * from offset (inclusive) to offset + length (non-inclusive).\n         *\n         * @returns flatbuffers.Long\n         */\n        length(): flatbuffers.Long {\n            return this.bb!.readInt64(this.bb_pos + 8);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long offset\n         * @param flatbuffers.Long length\n         * @returns flatbuffers.Offset\n         */\n        static createBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Long, length: flatbuffers.Long): flatbuffers.Offset {\n            builder.prep(8, 16);\n            builder.writeInt64(length);\n            builder.writeInt64(offset);\n            return builder.offset();\n        }\n\n    }\n}\n/**\n * ----------------------------------------------------------------------\n * A Schema describes the columns in a row batch\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Schema {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Schema\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Schema {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Schema= obj\n         * @returns Schema\n         */\n        static getRootAsSchema(bb: flatbuffers.ByteBuffer, obj?: Schema): Schema {\n            return (obj || new Schema).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * endianness of the buffer\n         * it is Little Endian by default\n         * if endianness doesn't match the underlying system then the vectors need to be converted\n         *\n         * @returns org.apache.arrow.flatbuf.Endianness\n         */\n        endianness(): org.apache.arrow.flatbuf.Endianness {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Endianness.Little;\n        }\n\n        /**\n         * @param number index\n         * @param org.apache.arrow.flatbuf.Field= obj\n         * @returns org.apache.arrow.flatbuf.Field\n         */\n        fields(index: number, obj?: org.apache.arrow.flatbuf.Field): org.apache.arrow.flatbuf.Field | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? (obj || new org.apache.arrow.flatbuf.Field).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        fieldsLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param number index\n         * @param org.apache.arrow.flatbuf.KeyValue= obj\n         * @returns org.apache.arrow.flatbuf.KeyValue\n         */\n        customMetadata(index: number, obj?: org.apache.arrow.flatbuf.KeyValue): org.apache.arrow.flatbuf.KeyValue | null {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? (obj || new org.apache.arrow.flatbuf.KeyValue).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        customMetadataLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startSchema(builder: flatbuffers.Builder) {\n            builder.startObject(3);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.Endianness endianness\n         */\n        static addEndianness(builder: flatbuffers.Builder, endianness: org.apache.arrow.flatbuf.Endianness) {\n            builder.addFieldInt16(0, endianness, org.apache.arrow.flatbuf.Endianness.Little);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset fieldsOffset\n         */\n        static addFields(builder: flatbuffers.Builder, fieldsOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, fieldsOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<flatbuffers.Offset> data\n         * @returns flatbuffers.Offset\n         */\n        static createFieldsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addOffset(data[i]);\n            }\n            return builder.endVector();\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startFieldsVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(4, numElems, 4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset customMetadataOffset\n         */\n        static addCustomMetadata(builder: flatbuffers.Builder, customMetadataOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(2, customMetadataOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<flatbuffers.Offset> data\n         * @returns flatbuffers.Offset\n         */\n        static createCustomMetadataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addOffset(data[i]);\n            }\n            return builder.endVector();\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startCustomMetadataVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(4, numElems, 4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endSchema(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset offset\n         */\n        static finishSchemaBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n            builder.finish(offset);\n        }\n\n        static createSchema(builder: flatbuffers.Builder, endianness: org.apache.arrow.flatbuf.Endianness, fieldsOffset: flatbuffers.Offset, customMetadataOffset: flatbuffers.Offset): flatbuffers.Offset {\n            Schema.startSchema(builder);\n            Schema.addEndianness(builder, endianness);\n            Schema.addFields(builder, fieldsOffset);\n            Schema.addCustomMetadata(builder, customMetadataOffset);\n            return Schema.endSchema(builder);\n        }\n    }\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\n\nimport { flatbuffers } from 'flatbuffers';\nimport * as NS7624605610262437867 from './Schema';\nexport namespace org.apache.arrow.flatbuf {\n    export import Schema = NS7624605610262437867.org.apache.arrow.flatbuf.Schema;\n}\n/**\n * ----------------------------------------------------------------------\n * The root Message type\n * This union enables us to easily send different message types without\n * redundant storage, and in the future we can easily add new message types.\n *\n * Arrow implementations do not need to implement all of the message types,\n * which may include experimental metadata types. For maximum compatibility,\n * it is best to send data using RecordBatch\n *\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum MessageHeader {\n        NONE = 0,\n        Schema = 1,\n        DictionaryBatch = 2,\n        RecordBatch = 3,\n        Tensor = 4,\n        SparseTensor = 5\n    }\n}\n\n/**\n * ----------------------------------------------------------------------\n * Data structures for describing a table row batch (a collection of\n * equal-length Arrow arrays)\n * Metadata about a field at some level of a nested type tree (but not\n * its children).\n *\n * For example, a List<Int16> with values [[1, 2, 3], null, [4], [5, 6], null]\n * would have {length: 5, null_count: 2} for its List node, and {length: 6,\n * null_count: 0} for its Int16 node, as separate FieldNode structs\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class FieldNode {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns FieldNode\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): FieldNode {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * The number of value slots in the Arrow array at this level of a nested\n         * tree\n         *\n         * @returns flatbuffers.Long\n         */\n        length(): flatbuffers.Long {\n            return this.bb!.readInt64(this.bb_pos);\n        }\n\n        /**\n         * The number of observed nulls. Fields with null_count == 0 may choose not\n         * to write their physical validity bitmap out as a materialized buffer,\n         * instead setting the length of the bitmap buffer to 0.\n         *\n         * @returns flatbuffers.Long\n         */\n        nullCount(): flatbuffers.Long {\n            return this.bb!.readInt64(this.bb_pos + 8);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long length\n         * @param flatbuffers.Long null_count\n         * @returns flatbuffers.Offset\n         */\n        static createFieldNode(builder: flatbuffers.Builder, length: flatbuffers.Long, null_count: flatbuffers.Long): flatbuffers.Offset {\n            builder.prep(8, 16);\n            builder.writeInt64(null_count);\n            builder.writeInt64(length);\n            return builder.offset();\n        }\n\n    }\n}\n/**\n * A data header describing the shared memory layout of a \"record\" or \"row\"\n * batch. Some systems call this a \"row batch\" internally and others a \"record\n * batch\".\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class RecordBatch {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns RecordBatch\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): RecordBatch {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param RecordBatch= obj\n         * @returns RecordBatch\n         */\n        static getRootAsRecordBatch(bb: flatbuffers.ByteBuffer, obj?: RecordBatch): RecordBatch {\n            return (obj || new RecordBatch).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * number of records / rows. The arrays in the batch should all have this\n         * length\n         *\n         * @returns flatbuffers.Long\n         */\n        length(): flatbuffers.Long {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n        }\n\n        /**\n         * Nodes correspond to the pre-ordered flattened logical schema\n         *\n         * @param number index\n         * @param org.apache.arrow.flatbuf.FieldNode= obj\n         * @returns org.apache.arrow.flatbuf.FieldNode\n         */\n        nodes(index: number, obj?: org.apache.arrow.flatbuf.FieldNode): org.apache.arrow.flatbuf.FieldNode | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? (obj || new org.apache.arrow.flatbuf.FieldNode).__init(this.bb!.__vector(this.bb_pos + offset) + index * 16, this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        nodesLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * Buffers correspond to the pre-ordered flattened buffer tree\n         *\n         * The number of buffers appended to this list depends on the schema. For\n         * example, most primitive arrays will have 2 buffers, 1 for the validity\n         * bitmap and 1 for the values. For struct arrays, there will only be a\n         * single buffer for the validity (nulls) bitmap\n         *\n         * @param number index\n         * @param org.apache.arrow.flatbuf.Buffer= obj\n         * @returns org.apache.arrow.flatbuf.Buffer\n         */\n        buffers(index: number, obj?: NS7624605610262437867.org.apache.arrow.flatbuf.Buffer): NS7624605610262437867.org.apache.arrow.flatbuf.Buffer | null {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? (obj || new NS7624605610262437867.org.apache.arrow.flatbuf.Buffer).__init(this.bb!.__vector(this.bb_pos + offset) + index * 16, this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        buffersLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startRecordBatch(builder: flatbuffers.Builder) {\n            builder.startObject(3);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long length\n         */\n        static addLength(builder: flatbuffers.Builder, length: flatbuffers.Long) {\n            builder.addFieldInt64(0, length, builder.createLong(0, 0));\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset nodesOffset\n         */\n        static addNodes(builder: flatbuffers.Builder, nodesOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, nodesOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startNodesVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(16, numElems, 8);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset buffersOffset\n         */\n        static addBuffers(builder: flatbuffers.Builder, buffersOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(2, buffersOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startBuffersVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(16, numElems, 8);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endRecordBatch(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createRecordBatch(builder: flatbuffers.Builder, length: flatbuffers.Long, nodesOffset: flatbuffers.Offset, buffersOffset: flatbuffers.Offset): flatbuffers.Offset {\n            RecordBatch.startRecordBatch(builder);\n            RecordBatch.addLength(builder, length);\n            RecordBatch.addNodes(builder, nodesOffset);\n            RecordBatch.addBuffers(builder, buffersOffset);\n            return RecordBatch.endRecordBatch(builder);\n        }\n    }\n}\n/**\n * For sending dictionary encoding information. Any Field can be\n * dictionary-encoded, but in this case none of its children may be\n * dictionary-encoded.\n * There is one vector / column per dictionary, but that vector / column\n * may be spread across multiple dictionary batches by using the isDelta\n * flag\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class DictionaryBatch {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns DictionaryBatch\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): DictionaryBatch {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param DictionaryBatch= obj\n         * @returns DictionaryBatch\n         */\n        static getRootAsDictionaryBatch(bb: flatbuffers.ByteBuffer, obj?: DictionaryBatch): DictionaryBatch {\n            return (obj || new DictionaryBatch).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns flatbuffers.Long\n         */\n        id(): flatbuffers.Long {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n        }\n\n        /**\n         * @param org.apache.arrow.flatbuf.RecordBatch= obj\n         * @returns org.apache.arrow.flatbuf.RecordBatch|null\n         */\n        data(obj?: org.apache.arrow.flatbuf.RecordBatch): org.apache.arrow.flatbuf.RecordBatch | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? (obj || new org.apache.arrow.flatbuf.RecordBatch).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;\n        }\n\n        /**\n         * If isDelta is true the values in the dictionary are to be appended to a\n         * dictionary with the indicated id\n         *\n         * @returns boolean\n         */\n        isDelta(): boolean {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startDictionaryBatch(builder: flatbuffers.Builder) {\n            builder.startObject(3);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long id\n         */\n        static addId(builder: flatbuffers.Builder, id: flatbuffers.Long) {\n            builder.addFieldInt64(0, id, builder.createLong(0, 0));\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset dataOffset\n         */\n        static addData(builder: flatbuffers.Builder, dataOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, dataOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param boolean isDelta\n         */\n        static addIsDelta(builder: flatbuffers.Builder, isDelta: boolean) {\n            builder.addFieldInt8(2, +isDelta, +false);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endDictionaryBatch(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createDictionaryBatch(builder: flatbuffers.Builder, id: flatbuffers.Long, dataOffset: flatbuffers.Offset, isDelta: boolean): flatbuffers.Offset {\n            DictionaryBatch.startDictionaryBatch(builder);\n            DictionaryBatch.addId(builder, id);\n            DictionaryBatch.addData(builder, dataOffset);\n            DictionaryBatch.addIsDelta(builder, isDelta);\n            return DictionaryBatch.endDictionaryBatch(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Message {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Message\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Message {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Message= obj\n         * @returns Message\n         */\n        static getRootAsMessage(bb: flatbuffers.ByteBuffer, obj?: Message): Message {\n            return (obj || new Message).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.MetadataVersion\n         */\n        version(): NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion.V1;\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.MessageHeader\n         */\n        headerType(): org.apache.arrow.flatbuf.MessageHeader {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? /**  */ (this.bb!.readUint8(this.bb_pos + offset)) : org.apache.arrow.flatbuf.MessageHeader.NONE;\n        }\n\n        /**\n         * @param flatbuffers.Table obj\n         * @returns ?flatbuffers.Table\n         */\n        header<T extends flatbuffers.Table>(obj: T): T | null {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;\n        }\n\n        /**\n         * @returns flatbuffers.Long\n         */\n        bodyLength(): flatbuffers.Long {\n            let offset = this.bb!.__offset(this.bb_pos, 10);\n            return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n        }\n\n        /**\n         * @param number index\n         * @param org.apache.arrow.flatbuf.KeyValue= obj\n         * @returns org.apache.arrow.flatbuf.KeyValue\n         */\n        customMetadata(index: number, obj?: NS7624605610262437867.org.apache.arrow.flatbuf.KeyValue): NS7624605610262437867.org.apache.arrow.flatbuf.KeyValue | null {\n            let offset = this.bb!.__offset(this.bb_pos, 12);\n            return offset ? (obj || new NS7624605610262437867.org.apache.arrow.flatbuf.KeyValue).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        customMetadataLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 12);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startMessage(builder: flatbuffers.Builder) {\n            builder.startObject(5);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.MetadataVersion version\n         */\n        static addVersion(builder: flatbuffers.Builder, version: NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion) {\n            builder.addFieldInt16(0, version, NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion.V1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.MessageHeader headerType\n         */\n        static addHeaderType(builder: flatbuffers.Builder, headerType: org.apache.arrow.flatbuf.MessageHeader) {\n            builder.addFieldInt8(1, headerType, org.apache.arrow.flatbuf.MessageHeader.NONE);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset headerOffset\n         */\n        static addHeader(builder: flatbuffers.Builder, headerOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(2, headerOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long bodyLength\n         */\n        static addBodyLength(builder: flatbuffers.Builder, bodyLength: flatbuffers.Long) {\n            builder.addFieldInt64(3, bodyLength, builder.createLong(0, 0));\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset customMetadataOffset\n         */\n        static addCustomMetadata(builder: flatbuffers.Builder, customMetadataOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(4, customMetadataOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<flatbuffers.Offset> data\n         * @returns flatbuffers.Offset\n         */\n        static createCustomMetadataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addOffset(data[i]);\n            }\n            return builder.endVector();\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startCustomMetadataVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(4, numElems, 4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endMessage(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset offset\n         */\n        static finishMessageBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n            builder.finish(offset);\n        }\n\n        static createMessage(builder: flatbuffers.Builder, version: NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion, headerType: org.apache.arrow.flatbuf.MessageHeader, headerOffset: flatbuffers.Offset, bodyLength: flatbuffers.Long, customMetadataOffset: flatbuffers.Offset): flatbuffers.Offset {\n            Message.startMessage(builder);\n            Message.addVersion(builder, version);\n            Message.addHeaderType(builder, headerType);\n            Message.addHeader(builder, headerOffset);\n            Message.addBodyLength(builder, bodyLength);\n            Message.addCustomMetadata(builder, customMetadataOffset);\n            return Message.endMessage(builder);\n        }\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport * as Schema_ from './fb/Schema';\nimport * as Message_ from './fb/Message';\n\nexport import ArrowType = Schema_.org.apache.arrow.flatbuf.Type;\nexport import DateUnit = Schema_.org.apache.arrow.flatbuf.DateUnit;\nexport import TimeUnit = Schema_.org.apache.arrow.flatbuf.TimeUnit;\nexport import Precision = Schema_.org.apache.arrow.flatbuf.Precision;\nexport import UnionMode = Schema_.org.apache.arrow.flatbuf.UnionMode;\nexport import IntervalUnit = Schema_.org.apache.arrow.flatbuf.IntervalUnit;\nexport import MessageHeader = Message_.org.apache.arrow.flatbuf.MessageHeader;\nexport import MetadataVersion = Schema_.org.apache.arrow.flatbuf.MetadataVersion;\n\n/**\n * Main data type enumeration.\n *\n * Data types in this library are all *logical*. They can be expressed as\n * either a primitive physical type (bytes or bits of some fixed size), a\n * nested type consisting of other data types, or another data type (e.g. a\n * timestamp encoded as an int64).\n *\n * **Note**: Only enum values 0-17 (NONE through Map) are written to an Arrow\n * IPC payload.\n *\n * The rest of the values are specified here so TypeScript can narrow the type\n * signatures further beyond the base Arrow Types. The Arrow DataTypes include\n * metadata like `bitWidth` that impact the type signatures of the values we\n * accept and return.\n *\n * For example, the `Int8Vector` reads 1-byte numbers from an `Int8Array`, an\n * `Int32Vector` reads a 4-byte number from an `Int32Array`, and an `Int64Vector`\n * reads a pair of 4-byte lo, hi 32-bit integers as a zero-copy slice from the\n * underlying `Int32Array`.\n *\n * Library consumers benefit by knowing the narrowest type, since we can ensure\n * the types across all public methods are propagated, and never bail to `any`.\n * These values are _never_ used at runtime, and they will _never_ be written\n * to the flatbuffers metadata of serialized Arrow IPC payloads.\n */\nexport enum Type {\n    /** The default placeholder type */\n    NONE            =  0,\n    /** A NULL type having no physical storage */\n    Null            =  1,\n    /** Signed or unsigned 8, 16, 32, or 64-bit little-endian integer */\n    Int             =  2,\n    /** 2, 4, or 8-byte floating point value */\n    Float           =  3,\n    /** Variable-length bytes (no guarantee of UTF8-ness) */\n    Binary          =  4,\n    /** UTF8 variable-length string as List<Char> */\n    Utf8            =  5,\n    /** Boolean as 1 bit, LSB bit-packed ordering */\n    Bool            =  6,\n    /** Precision-and-scale-based decimal type. Storage type depends on the parameters. */\n    Decimal         =  7,\n    /** int32_t days or int64_t milliseconds since the UNIX epoch */\n    Date            =  8,\n    /** Time as signed 32 or 64-bit integer, representing either seconds, milliseconds, microseconds, or nanoseconds since midnight since midnight */\n    Time            =  9,\n    /** Exact timestamp encoded with int64 since UNIX epoch (Default unit millisecond) */\n    Timestamp       = 10,\n    /** YEAR_MONTH or DAY_TIME interval in SQL style */\n    Interval        = 11,\n    /** A list of some logical data type */\n    List            = 12,\n    /** Struct of logical types */\n    Struct          = 13,\n    /** Union of logical types */\n    Union           = 14,\n    /** Fixed-size binary. Each value occupies the same number of bytes */\n    FixedSizeBinary = 15,\n    /** Fixed-size list. Each value occupies the same number of bytes */\n    FixedSizeList   = 16,\n    /** Map of named logical types */\n    Map             = 17,\n\n    /** Dictionary aka Category type */\n    Dictionary            = -1,\n    Int8                  = -2,\n    Int16                 = -3,\n    Int32                 = -4,\n    Int64                 = -5,\n    Uint8                 = -6,\n    Uint16                = -7,\n    Uint32                = -8,\n    Uint64                = -9,\n    Float16               = -10,\n    Float32               = -11,\n    Float64               = -12,\n    DateDay               = -13,\n    DateMillisecond       = -14,\n    TimestampSecond       = -15,\n    TimestampMillisecond  = -16,\n    TimestampMicrosecond  = -17,\n    TimestampNanosecond   = -18,\n    TimeSecond            = -19,\n    TimeMillisecond       = -20,\n    TimeMicrosecond       = -21,\n    TimeNanosecond        = -22,\n    DenseUnion            = -23,\n    SparseUnion           = -24,\n    IntervalDayTime       = -25,\n    IntervalYearMonth     = -26,\n}\n\nexport enum BufferType {\n    /**\n     * used in List type, Dense Union and variable length primitive types (String, Binary)\n     */\n    OFFSET = 0,\n\n    /**\n     * actual data, either wixed width primitive types in slots or variable width delimited by an OFFSET vector\n     */\n    DATA = 1,\n\n    /**\n     * Bit vector indicating if each value is null\n     */\n    VALIDITY = 2,\n\n    /**\n     * Type vector used in Union type\n     */\n    TYPE = 3\n  }\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/** @ignore */\nexport function getBool(_data: any, _index: number, byte: number, bit: number) {\n    return (byte & 1 << bit) !== 0;\n}\n\n/** @ignore */\nexport function getBit(_data: any, _index: number, byte: number, bit: number): 0 | 1 {\n    return (byte & 1 << bit) >> bit as (0 | 1);\n}\n\n/** @ignore */\nexport function setBool(bytes: Uint8Array, index: number, value: any) {\n    return value ?\n        !!(bytes[index >> 3] |=  (1 << (index % 8))) || true :\n        !(bytes[index >> 3] &= ~(1 << (index % 8))) && false ;\n}\n\n/** @ignore */\nexport function truncateBitmap(offset: number, length: number, bitmap: Uint8Array) {\n    const alignedSize = (bitmap.byteLength + 7) & ~7;\n    if (offset > 0 || bitmap.byteLength < alignedSize) {\n        const bytes = new Uint8Array(alignedSize);\n        // If the offset is a multiple of 8 bits, it's safe to slice the bitmap\n        bytes.set(offset % 8 === 0 ? bitmap.subarray(offset >> 3) :\n            // Otherwise iterate each bit from the offset and return a new one\n            packBools(iterateBits(bitmap, offset, length, null, getBool)).subarray(0, alignedSize));\n        return bytes;\n    }\n    return bitmap;\n}\n\n/** @ignore */\nexport function packBools(values: Iterable<any>) {\n    let xs: number[] = [];\n    let i = 0, bit = 0, byte = 0;\n    for (const value of values) {\n        value && (byte |= 1 << bit);\n        if (++bit === 8) {\n            xs[i++] = byte;\n            byte = bit = 0;\n        }\n    }\n    if (i === 0 || bit > 0) { xs[i++] = byte; }\n    let b = new Uint8Array((xs.length + 7) & ~7);\n    b.set(xs);\n    return b;\n}\n\n/** @ignore */\nexport function* iterateBits<T>(bytes: Uint8Array, begin: number, length: number, context: any,\n                                get: (context: any, index: number, byte: number, bit: number) => T) {\n    let bit = begin % 8;\n    let byteIndex = begin >> 3;\n    let index = 0, remaining = length;\n    for (; remaining > 0; bit = 0) {\n        let byte = bytes[byteIndex++];\n        do {\n            yield get(context, index++, byte, bit);\n        } while (--remaining > 0 && ++bit < 8);\n    }\n}\n\n/**\n * Compute the population count (the number of bits set to 1) for a range of bits in a Uint8Array.\n * @param vector The Uint8Array of bits for which to compute the population count.\n * @param lhs The range's left-hand side (or start) bit\n * @param rhs The range's right-hand side (or end) bit\n */\n/** @ignore */\nexport function popcnt_bit_range(data: Uint8Array, lhs: number, rhs: number): number {\n    if (rhs - lhs <= 0) { return 0; }\n    // If the bit range is less than one byte, sum the 1 bits in the bit range\n    if (rhs - lhs < 8) {\n        let sum = 0;\n        for (const bit of iterateBits(data, lhs, rhs - lhs, data, getBit)) {\n            sum += bit;\n        }\n        return sum;\n    }\n    // Get the next lowest multiple of 8 from the right hand side\n    const rhsInside = rhs >> 3 << 3;\n    // Get the next highest multiple of 8 from the left hand side\n    const lhsInside = lhs + (lhs % 8 === 0 ? 0 : 8 - lhs % 8);\n    return (\n        // Get the popcnt of bits between the left hand side, and the next highest multiple of 8\n        popcnt_bit_range(data, lhs, lhsInside) +\n        // Get the popcnt of bits between the right hand side, and the next lowest multiple of 8\n        popcnt_bit_range(data, rhsInside, rhs) +\n        // Get the popcnt of all bits between the left and right hand sides' multiples of 8\n        popcnt_array(data, lhsInside >> 3, (rhsInside - lhsInside) >> 3)\n    );\n}\n\n/** @ignore */\nexport function popcnt_array(arr: ArrayBufferView, byteOffset?: number, byteLength?: number) {\n    let cnt = 0, pos = byteOffset! | 0;\n    const view = new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n    const len =  byteLength === void 0 ? arr.byteLength : pos + byteLength;\n    while (len - pos >= 4) {\n        cnt += popcnt_uint32(view.getUint32(pos));\n        pos += 4;\n    }\n    while (len - pos >= 2) {\n        cnt += popcnt_uint32(view.getUint16(pos));\n        pos += 2;\n    }\n    while (len - pos >= 1) {\n        cnt += popcnt_uint32(view.getUint8(pos));\n        pos += 1;\n    }\n    return cnt;\n}\n\n/** @ignore */\nexport function popcnt_uint32(uint32: number): number {\n    let i = uint32 | 0;\n    i = i - ((i >>> 1) & 0x55555555);\n    i = (i & 0x33333333) + ((i >>> 2) & 0x33333333);\n    return (((i + (i >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n}\n","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Vector } from './vector';\nimport { Type, Precision, DateUnit, TimeUnit, IntervalUnit, UnionMode } from './enum';\nimport { DataType, Float, Int, Date_, Interval, Time, Timestamp, Union, } from './type';\n\nexport abstract class Visitor {\n    public visitMany(nodes: any[], ...args: any[][]) {\n        return nodes.map((node, i) => this.visit(node, ...args.map((x) => x[i])));\n    }\n    public visit(...args: any[]) {\n        return this.getVisitFn(args[0], false).apply(this, args);\n    }\n    public getVisitFn(node: any, throwIfNotFound = true) {\n        return getVisitFn(this, node, throwIfNotFound);\n    }\n    public visitNull            (_node: any, ..._args: any[]): any { return null; }\n    public visitBool            (_node: any, ..._args: any[]): any { return null; }\n    public visitInt             (_node: any, ..._args: any[]): any { return null; }\n    public visitFloat           (_node: any, ..._args: any[]): any { return null; }\n    public visitUtf8            (_node: any, ..._args: any[]): any { return null; }\n    public visitBinary          (_node: any, ..._args: any[]): any { return null; }\n    public visitFixedSizeBinary (_node: any, ..._args: any[]): any { return null; }\n    public visitDate            (_node: any, ..._args: any[]): any { return null; }\n    public visitTimestamp       (_node: any, ..._args: any[]): any { return null; }\n    public visitTime            (_node: any, ..._args: any[]): any { return null; }\n    public visitDecimal         (_node: any, ..._args: any[]): any { return null; }\n    public visitList            (_node: any, ..._args: any[]): any { return null; }\n    public visitStruct          (_node: any, ..._args: any[]): any { return null; }\n    public visitUnion           (_node: any, ..._args: any[]): any { return null; }\n    public visitDictionary      (_node: any, ..._args: any[]): any { return null; }\n    public visitInterval        (_node: any, ..._args: any[]): any { return null; }\n    public visitFixedSizeList   (_node: any, ..._args: any[]): any { return null; }\n    public visitMap             (_node: any, ..._args: any[]): any { return null; }\n}\n\n/** @ignore */\nfunction getVisitFn<T extends DataType>(visitor: Visitor, node: any, throwIfNotFound = true) {\n    let fn: any = null;\n    let dtype: T['TType'] = Type.NONE;\n    // tslint:disable\n    if      (node instanceof Data    ) { dtype = inferDType(node.type as T); }\n    else if (node instanceof Vector  ) { dtype = inferDType(node.type as T); }\n    else if (node instanceof DataType) { dtype = inferDType(node      as T); }\n    else if (typeof (dtype = node) !== 'number') { dtype = Type[node] as any as T['TType']; }\n\n    switch (dtype) {\n        case Type.Null:                 fn = visitor.visitNull; break;\n        case Type.Bool:                 fn = visitor.visitBool; break;\n        case Type.Int:                  fn = visitor.visitInt; break;\n        case Type.Int8:                 fn = visitor.visitInt8 || visitor.visitInt; break;\n        case Type.Int16:                fn = visitor.visitInt16 || visitor.visitInt; break;\n        case Type.Int32:                fn = visitor.visitInt32 || visitor.visitInt; break;\n        case Type.Int64:                fn = visitor.visitInt64 || visitor.visitInt; break;\n        case Type.Uint8:                fn = visitor.visitUint8 || visitor.visitInt; break;\n        case Type.Uint16:               fn = visitor.visitUint16 || visitor.visitInt; break;\n        case Type.Uint32:               fn = visitor.visitUint32 || visitor.visitInt; break;\n        case Type.Uint64:               fn = visitor.visitUint64 || visitor.visitInt; break;\n        case Type.Float:                fn = visitor.visitFloat; break;\n        case Type.Float16:              fn = visitor.visitFloat16 || visitor.visitFloat; break;\n        case Type.Float32:              fn = visitor.visitFloat32 || visitor.visitFloat; break;\n        case Type.Float64:              fn = visitor.visitFloat64 || visitor.visitFloat; break;\n        case Type.Utf8:                 fn = visitor.visitUtf8; break;\n        case Type.Binary:               fn = visitor.visitBinary; break;\n        case Type.FixedSizeBinary:      fn = visitor.visitFixedSizeBinary; break;\n        case Type.Date:                 fn = visitor.visitDate; break;\n        case Type.DateDay:              fn = visitor.visitDateDay || visitor.visitDate; break;\n        case Type.DateMillisecond:      fn = visitor.visitDateMillisecond || visitor.visitDate; break;\n        case Type.Timestamp:            fn = visitor.visitTimestamp; break;\n        case Type.TimestampSecond:      fn = visitor.visitTimestampSecond || visitor.visitTimestamp; break;\n        case Type.TimestampMillisecond: fn = visitor.visitTimestampMillisecond || visitor.visitTimestamp; break;\n        case Type.TimestampMicrosecond: fn = visitor.visitTimestampMicrosecond || visitor.visitTimestamp; break;\n        case Type.TimestampNanosecond:  fn = visitor.visitTimestampNanosecond || visitor.visitTimestamp; break;\n        case Type.Time:                 fn = visitor.visitTime; break;\n        case Type.TimeSecond:           fn = visitor.visitTimeSecond || visitor.visitTime; break;\n        case Type.TimeMillisecond:      fn = visitor.visitTimeMillisecond || visitor.visitTime; break;\n        case Type.TimeMicrosecond:      fn = visitor.visitTimeMicrosecond || visitor.visitTime; break;\n        case Type.TimeNanosecond:       fn = visitor.visitTimeNanosecond || visitor.visitTime; break;\n        case Type.Decimal:              fn = visitor.visitDecimal; break;\n        case Type.List:                 fn = visitor.visitList; break;\n        case Type.Struct:               fn = visitor.visitStruct; break;\n        case Type.Union:                fn = visitor.visitUnion; break;\n        case Type.DenseUnion:           fn = visitor.visitDenseUnion || visitor.visitUnion; break;\n        case Type.SparseUnion:          fn = visitor.visitSparseUnion || visitor.visitUnion; break;\n        case Type.Dictionary:           fn = visitor.visitDictionary; break;\n        case Type.Interval:             fn = visitor.visitInterval; break;\n        case Type.IntervalDayTime:      fn = visitor.visitIntervalDayTime || visitor.visitInterval; break;\n        case Type.IntervalYearMonth:    fn = visitor.visitIntervalYearMonth || visitor.visitInterval; break;\n        case Type.FixedSizeList:        fn = visitor.visitFixedSizeList; break;\n        case Type.Map:                  fn = visitor.visitMap; break;\n    }\n    if (typeof fn === 'function') return fn;\n    if (!throwIfNotFound) return () => null;\n    throw new Error(`Unrecognized type '${Type[dtype]}'`);\n}\n\n/** @ignore */\nfunction inferDType<T extends DataType>(type: T): Type {\n    switch (type.typeId) {\n        case Type.Null: return Type.Null;\n        case Type.Int:\n            const { bitWidth, isSigned } = (type as any as Int);\n            switch (bitWidth) {\n                case  8: return isSigned ? Type.Int8  : Type.Uint8 ;\n                case 16: return isSigned ? Type.Int16 : Type.Uint16;\n                case 32: return isSigned ? Type.Int32 : Type.Uint32;\n                case 64: return isSigned ? Type.Int64 : Type.Uint64;\n            }\n            return Type.Int;\n        case Type.Float:\n            switch((type as any as Float).precision) {\n                case Precision.HALF: return Type.Float16;\n                case Precision.SINGLE: return Type.Float32;\n                case Precision.DOUBLE: return Type.Float64;\n            }\n            return Type.Float;\n        case Type.Binary: return Type.Binary;\n        case Type.Utf8: return Type.Utf8;\n        case Type.Bool: return Type.Bool;\n        case Type.Decimal: return Type.Decimal;\n        case Type.Time:\n            switch ((type as any as Time).unit) {\n                case TimeUnit.SECOND: return Type.TimeSecond;\n                case TimeUnit.MILLISECOND: return Type.TimeMillisecond;\n                case TimeUnit.MICROSECOND: return Type.TimeMicrosecond;\n                case TimeUnit.NANOSECOND: return Type.TimeNanosecond;\n            }\n            return Type.Time;\n        case Type.Timestamp:\n            switch ((type as any as Timestamp).unit) {\n                case TimeUnit.SECOND: return Type.TimestampSecond;\n                case TimeUnit.MILLISECOND: return Type.TimestampMillisecond;\n                case TimeUnit.MICROSECOND: return Type.TimestampMicrosecond;\n                case TimeUnit.NANOSECOND: return Type.TimestampNanosecond;\n            }\n            return Type.Timestamp;\n        case Type.Date:\n            switch ((type as any as Date_).unit) {\n                case DateUnit.DAY: return Type.DateDay;\n                case DateUnit.MILLISECOND: return Type.DateMillisecond;\n            }\n            return Type.Date;\n        case Type.Interval:\n            switch ((type as any as Interval).unit) {\n                case IntervalUnit.DAY_TIME: return Type.IntervalDayTime;\n                case IntervalUnit.YEAR_MONTH: return Type.IntervalYearMonth;\n            }\n            return Type.Interval;\n        case Type.Map: return Type.Map;\n        case Type.List: return Type.List;\n        case Type.Struct: return Type.Struct;\n        case Type.Union:\n            switch ((type as any as Union).mode) {\n                case UnionMode.Dense: return Type.DenseUnion;\n                case UnionMode.Sparse: return Type.SparseUnion;\n            }\n            return Type.Union;\n        case Type.FixedSizeBinary: return Type.FixedSizeBinary;\n        case Type.FixedSizeList: return Type.FixedSizeList;\n        case Type.Dictionary: return Type.Dictionary;\n    }\n    throw new Error(`Unrecognized type '${Type[type.typeId]}'`);\n}\n\nexport interface Visitor {\n    visitNull                  (node: any, ...args: any[]): any;\n    visitBool                  (node: any, ...args: any[]): any;\n    visitInt                   (node: any, ...args: any[]): any;\n    visitInt8?                 (node: any, ...args: any[]): any;\n    visitInt16?                (node: any, ...args: any[]): any;\n    visitInt32?                (node: any, ...args: any[]): any;\n    visitInt64?                (node: any, ...args: any[]): any;\n    visitUint8?                (node: any, ...args: any[]): any;\n    visitUint16?               (node: any, ...args: any[]): any;\n    visitUint32?               (node: any, ...args: any[]): any;\n    visitUint64?               (node: any, ...args: any[]): any;\n    visitFloat                 (node: any, ...args: any[]): any;\n    visitFloat16?              (node: any, ...args: any[]): any;\n    visitFloat32?              (node: any, ...args: any[]): any;\n    visitFloat64?              (node: any, ...args: any[]): any;\n    visitUtf8                  (node: any, ...args: any[]): any;\n    visitBinary                (node: any, ...args: any[]): any;\n    visitFixedSizeBinary       (node: any, ...args: any[]): any;\n    visitDate                  (node: any, ...args: any[]): any;\n    visitDateDay?              (node: any, ...args: any[]): any;\n    visitDateMillisecond?      (node: any, ...args: any[]): any;\n    visitTimestamp             (node: any, ...args: any[]): any;\n    visitTimestampSecond?      (node: any, ...args: any[]): any;\n    visitTimestampMillisecond? (node: any, ...args: any[]): any;\n    visitTimestampMicrosecond? (node: any, ...args: any[]): any;\n    visitTimestampNanosecond?  (node: any, ...args: any[]): any;\n    visitTime                  (node: any, ...args: any[]): any;\n    visitTimeSecond?           (node: any, ...args: any[]): any;\n    visitTimeMillisecond?      (node: any, ...args: any[]): any;\n    visitTimeMicrosecond?      (node: any, ...args: any[]): any;\n    visitTimeNanosecond?       (node: any, ...args: any[]): any;\n    visitDecimal               (node: any, ...args: any[]): any;\n    visitList                  (node: any, ...args: any[]): any;\n    visitStruct                (node: any, ...args: any[]): any;\n    visitUnion                 (node: any, ...args: any[]): any;\n    visitDenseUnion?           (node: any, ...args: any[]): any;\n    visitSparseUnion?          (node: any, ...args: any[]): any;\n    visitDictionary            (node: any, ...args: any[]): any;\n    visitInterval              (node: any, ...args: any[]): any;\n    visitIntervalDayTime?      (node: any, ...args: any[]): any;\n    visitIntervalYearMonth?    (node: any, ...args: any[]): any;\n    visitFixedSizeList         (node: any, ...args: any[]): any;\n    visitMap                   (node: any, ...args: any[]): any;\n}\n\n// Add these here so they're picked up by the externs creator\n// in the build, and closure-compiler doesn't minify them away\n(Visitor.prototype as any).visitInt8 = null;\n(Visitor.prototype as any).visitInt16 = null;\n(Visitor.prototype as any).visitInt32 = null;\n(Visitor.prototype as any).visitInt64 = null;\n(Visitor.prototype as any).visitUint8 = null;\n(Visitor.prototype as any).visitUint16 = null;\n(Visitor.prototype as any).visitUint32 = null;\n(Visitor.prototype as any).visitUint64 = null;\n(Visitor.prototype as any).visitFloat16 = null;\n(Visitor.prototype as any).visitFloat32 = null;\n(Visitor.prototype as any).visitFloat64 = null;\n(Visitor.prototype as any).visitDateDay = null;\n(Visitor.prototype as any).visitDateMillisecond = null;\n(Visitor.prototype as any).visitTimestampSecond = null;\n(Visitor.prototype as any).visitTimestampMillisecond = null;\n(Visitor.prototype as any).visitTimestampMicrosecond = null;\n(Visitor.prototype as any).visitTimestampNanosecond = null;\n(Visitor.prototype as any).visitTimeSecond = null;\n(Visitor.prototype as any).visitTimeMillisecond = null;\n(Visitor.prototype as any).visitTimeMicrosecond = null;\n(Visitor.prototype as any).visitTimeNanosecond = null;\n(Visitor.prototype as any).visitDenseUnion = null;\n(Visitor.prototype as any).visitSparseUnion = null;\n(Visitor.prototype as any).visitIntervalDayTime = null;\n(Visitor.prototype as any).visitIntervalYearMonth = null;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Visitor } from '../visitor';\nimport { VectorType } from '../interfaces';\nimport { Schema, Field } from '../schema';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\n/** @ignore */\nexport interface TypeComparator extends Visitor {\n    visit<T extends DataType>(type: T, other?: DataType | null): other is T;\n    visitMany<T extends DataType>(nodes: T[], others?: DataType[] | null): boolean[];\n    getVisitFn<T extends DataType>(node: VectorType<T> |  Data<T> | T): (other?: DataType | null) => other is T;\n    visitNull                 <T extends Null>                 (type: T, other?: DataType | null): other is T;\n    visitBool                 <T extends Bool>                 (type: T, other?: DataType | null): other is T;\n    visitInt                  <T extends Int>                  (type: T, other?: DataType | null): other is T;\n    visitInt8                 <T extends Int8>                 (type: T, other?: DataType | null): other is T;\n    visitInt16                <T extends Int16>                (type: T, other?: DataType | null): other is T;\n    visitInt32                <T extends Int32>                (type: T, other?: DataType | null): other is T;\n    visitInt64                <T extends Int64>                (type: T, other?: DataType | null): other is T;\n    visitUint8                <T extends Uint8>                (type: T, other?: DataType | null): other is T;\n    visitUint16               <T extends Uint16>               (type: T, other?: DataType | null): other is T;\n    visitUint32               <T extends Uint32>               (type: T, other?: DataType | null): other is T;\n    visitUint64               <T extends Uint64>               (type: T, other?: DataType | null): other is T;\n    visitFloat                <T extends Float>                (type: T, other?: DataType | null): other is T;\n    visitFloat16              <T extends Float16>              (type: T, other?: DataType | null): other is T;\n    visitFloat32              <T extends Float32>              (type: T, other?: DataType | null): other is T;\n    visitFloat64              <T extends Float64>              (type: T, other?: DataType | null): other is T;\n    visitUtf8                 <T extends Utf8>                 (type: T, other?: DataType | null): other is T;\n    visitBinary               <T extends Binary>               (type: T, other?: DataType | null): other is T;\n    visitFixedSizeBinary      <T extends FixedSizeBinary>      (type: T, other?: DataType | null): other is T;\n    visitDate                 <T extends Date_>                (type: T, other?: DataType | null): other is T;\n    visitDateDay              <T extends DateDay>              (type: T, other?: DataType | null): other is T;\n    visitDateMillisecond      <T extends DateMillisecond>      (type: T, other?: DataType | null): other is T;\n    visitTimestamp            <T extends Timestamp>            (type: T, other?: DataType | null): other is T;\n    visitTimestampSecond      <T extends TimestampSecond>      (type: T, other?: DataType | null): other is T;\n    visitTimestampMillisecond <T extends TimestampMillisecond> (type: T, other?: DataType | null): other is T;\n    visitTimestampMicrosecond <T extends TimestampMicrosecond> (type: T, other?: DataType | null): other is T;\n    visitTimestampNanosecond  <T extends TimestampNanosecond>  (type: T, other?: DataType | null): other is T;\n    visitTime                 <T extends Time>                 (type: T, other?: DataType | null): other is T;\n    visitTimeSecond           <T extends TimeSecond>           (type: T, other?: DataType | null): other is T;\n    visitTimeMillisecond      <T extends TimeMillisecond>      (type: T, other?: DataType | null): other is T;\n    visitTimeMicrosecond      <T extends TimeMicrosecond>      (type: T, other?: DataType | null): other is T;\n    visitTimeNanosecond       <T extends TimeNanosecond>       (type: T, other?: DataType | null): other is T;\n    visitDecimal              <T extends Decimal>              (type: T, other?: DataType | null): other is T;\n    visitList                 <T extends List>                 (type: T, other?: DataType | null): other is T;\n    visitStruct               <T extends Struct>               (type: T, other?: DataType | null): other is T;\n    visitUnion                <T extends Union>                (type: T, other?: DataType | null): other is T;\n    visitDenseUnion           <T extends DenseUnion>           (type: T, other?: DataType | null): other is T;\n    visitSparseUnion          <T extends SparseUnion>          (type: T, other?: DataType | null): other is T;\n    visitDictionary           <T extends Dictionary>           (type: T, other?: DataType | null): other is T;\n    visitInterval             <T extends Interval>             (type: T, other?: DataType | null): other is T;\n    visitIntervalDayTime      <T extends IntervalDayTime>      (type: T, other?: DataType | null): other is T;\n    visitIntervalYearMonth    <T extends IntervalYearMonth>    (type: T, other?: DataType | null): other is T;\n    visitFixedSizeList        <T extends FixedSizeList>        (type: T, other?: DataType | null): other is T;\n    visitMap                  <T extends Map_>                 (type: T, other?: DataType | null): other is T;\n}\n\n/** @ignore */\nexport class TypeComparator extends Visitor {\n    compareSchemas<T extends { [key: string]: DataType }>(schema: Schema<T>, other?: Schema | null): other is Schema<T> {\n        return (schema === other) || (\n            other instanceof schema.constructor &&\n            instance.compareFields(schema.fields, other.fields)\n        );\n    }\n    compareFields<T extends { [key: string]: DataType }>(fields: Field<T[keyof T]>[], others?: Field[] | null): others is Field<T[keyof T]>[] {\n        return (fields === others) || (\n            Array.isArray(fields) &&\n            Array.isArray(others) &&\n            fields.length === others.length &&\n            fields.every((f, i) => instance.compareField(f, others[i]))\n        );\n    }\n    compareField<T extends DataType = any>(field: Field<T>, other?: Field | null): other is Field<T> {\n        return (field === other) || (\n            other instanceof field.constructor &&\n            field.name === other.name &&\n            field.nullable === other.nullable &&\n            instance.visit(field.type, other.type)\n        );\n    }\n}\n\nfunction compareConstructor<T extends DataType>(type: T, other?: DataType | null): other is T {\n    return other instanceof type.constructor;\n}\n\nfunction compareAny<T extends DataType>(type: T, other?: DataType | null): other is T {\n    return (type === other) || compareConstructor(type, other);\n}\n\nfunction compareInt<T extends Int>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.bitWidth === other.bitWidth &&\n        type.isSigned === other.isSigned\n    );\n}\n\nfunction compareFloat<T extends Float>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.precision === other.precision\n    );\n}\n\nfunction compareFixedSizeBinary<T extends FixedSizeBinary>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.byteWidth === other.byteWidth\n    );\n}\n\nfunction compareDate<T extends Date_>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.unit === other.unit\n    );\n}\n\nfunction compareTimestamp<T extends Timestamp>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.unit === other.unit &&\n        type.timezone === other.timezone\n    );\n}\n\nfunction compareTime<T extends Time>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.unit === other.unit &&\n        type.bitWidth === other.bitWidth\n    );\n}\n\nfunction compareList<T extends List>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.children.length === other.children.length &&\n        instance.compareFields(type.children, other.children)\n    );\n}\n\nfunction compareStruct<T extends Struct>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.children.length === other.children.length &&\n        instance.compareFields(type.children, other.children)\n    );\n}\n\nfunction compareUnion<T extends Union>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.mode === other.mode &&\n        type.typeIds.every((x, i) => x === other.typeIds[i]) &&\n        instance.compareFields(type.children, other.children)\n    );\n}\n\nfunction compareDictionary<T extends Dictionary>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.id === other.id &&\n        type.isOrdered === other.isOrdered &&\n        instance.visit(<any> type.indices, other.indices) &&\n        instance.visit(type.dictionary, other.dictionary)\n    );\n}\n\nfunction compareInterval<T extends Interval>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.unit === other.unit\n    );\n}\n\nfunction compareFixedSizeList<T extends FixedSizeList>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.listSize === other.listSize &&\n        type.children.length === other.children.length &&\n        instance.compareFields(type.children, other.children)\n    );\n}\n\nfunction compareMap<T extends Map_>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.keysSorted === other.keysSorted &&\n        type.children.length === other.children.length &&\n        instance.compareFields(type.children, other.children)\n    );\n}\n\nTypeComparator.prototype.visitNull                 =             compareAny;\nTypeComparator.prototype.visitBool                 =             compareAny;\nTypeComparator.prototype.visitInt                  =             compareInt;\nTypeComparator.prototype.visitInt8                 =             compareInt;\nTypeComparator.prototype.visitInt16                =             compareInt;\nTypeComparator.prototype.visitInt32                =             compareInt;\nTypeComparator.prototype.visitInt64                =             compareInt;\nTypeComparator.prototype.visitUint8                =             compareInt;\nTypeComparator.prototype.visitUint16               =             compareInt;\nTypeComparator.prototype.visitUint32               =             compareInt;\nTypeComparator.prototype.visitUint64               =             compareInt;\nTypeComparator.prototype.visitFloat                =           compareFloat;\nTypeComparator.prototype.visitFloat16              =           compareFloat;\nTypeComparator.prototype.visitFloat32              =           compareFloat;\nTypeComparator.prototype.visitFloat64              =           compareFloat;\nTypeComparator.prototype.visitUtf8                 =             compareAny;\nTypeComparator.prototype.visitBinary               =             compareAny;\nTypeComparator.prototype.visitFixedSizeBinary      = compareFixedSizeBinary;\nTypeComparator.prototype.visitDate                 =            compareDate;\nTypeComparator.prototype.visitDateDay              =            compareDate;\nTypeComparator.prototype.visitDateMillisecond      =            compareDate;\nTypeComparator.prototype.visitTimestamp            =       compareTimestamp;\nTypeComparator.prototype.visitTimestampSecond      =       compareTimestamp;\nTypeComparator.prototype.visitTimestampMillisecond =       compareTimestamp;\nTypeComparator.prototype.visitTimestampMicrosecond =       compareTimestamp;\nTypeComparator.prototype.visitTimestampNanosecond  =       compareTimestamp;\nTypeComparator.prototype.visitTime                 =            compareTime;\nTypeComparator.prototype.visitTimeSecond           =            compareTime;\nTypeComparator.prototype.visitTimeMillisecond      =            compareTime;\nTypeComparator.prototype.visitTimeMicrosecond      =            compareTime;\nTypeComparator.prototype.visitTimeNanosecond       =            compareTime;\nTypeComparator.prototype.visitDecimal              =             compareAny;\nTypeComparator.prototype.visitList                 =            compareList;\nTypeComparator.prototype.visitStruct               =          compareStruct;\nTypeComparator.prototype.visitUnion                =           compareUnion;\nTypeComparator.prototype.visitDenseUnion           =           compareUnion;\nTypeComparator.prototype.visitSparseUnion          =           compareUnion;\nTypeComparator.prototype.visitDictionary           =      compareDictionary;\nTypeComparator.prototype.visitInterval             =        compareInterval;\nTypeComparator.prototype.visitIntervalDayTime      =        compareInterval;\nTypeComparator.prototype.visitIntervalYearMonth    =        compareInterval;\nTypeComparator.prototype.visitFixedSizeList        =   compareFixedSizeList;\nTypeComparator.prototype.visitMap                  =             compareMap;\n\n/** @ignore */\nexport const instance = new TypeComparator();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/* tslint:disable:class-name */\n\nimport { Field } from './schema';\nimport { flatbuffers } from 'flatbuffers';\nimport { TypedArrayConstructor } from './interfaces';\nimport { VectorType as V, TypeToDataType } from './interfaces';\nimport { instance as comparer } from './visitor/typecomparator';\n\nimport Long = flatbuffers.Long;\nimport {\n    Type,\n    Precision, UnionMode,\n    DateUnit, TimeUnit, IntervalUnit\n} from './enum';\n\n/** @ignore */\nexport type TimeBitWidth = 32 | 64;\n/** @ignore */\nexport type IntBitWidth = 8 | 16 | 32 | 64;\n/** @ignore */\nexport type IsSigned = { 'true': true; 'false': false };\n/** @ignore */\nexport type RowLike<T extends { [key: string]: DataType }> =\n      ( Iterable<[string, T[keyof T]['TValue'] | null]> )\n    & { [P in keyof T]: T[P]['TValue'] | null }\n    & { get<K extends keyof T>(key: K): T[K]['TValue'] | null; }\n    & { set<K extends keyof T>(key: K, val: T[K]['TValue'] | null): void; }\n    ;\n\n/** @ignore */\nexport type MapLike<K extends DataType = any, V extends DataType = any> =\n      { [P in K['TValue']]: V['TValue'] | null }\n    & ( Map<K['TValue'], V['TValue'] | null> )\n    ;\n\nexport interface DataType<TType extends Type = Type, TChildren extends { [key: string]: DataType } = any> {\n    readonly TType: TType;\n    readonly TArray: any;\n    readonly TValue: any;\n    readonly ArrayType: any;\n    readonly children: Field<TChildren[keyof TChildren]>[];\n}\n\n/**\n * An abstract base class for classes that encapsulate metadata about each of\n * the logical types that Arrow can represent.\n */\nexport abstract class DataType<TType extends Type = Type, TChildren extends { [key: string]: DataType } = any> {\n\n    // @ts-ignore\n    public [Symbol.toStringTag]: string;\n\n    /** @nocollapse */ static            isNull (x: any): x is Null            { return x && x.typeId === Type.Null;            }\n    /** @nocollapse */ static             isInt (x: any): x is Int_            { return x && x.typeId === Type.Int;             }\n    /** @nocollapse */ static           isFloat (x: any): x is Float           { return x && x.typeId === Type.Float;           }\n    /** @nocollapse */ static          isBinary (x: any): x is Binary          { return x && x.typeId === Type.Binary;          }\n    /** @nocollapse */ static            isUtf8 (x: any): x is Utf8            { return x && x.typeId === Type.Utf8;            }\n    /** @nocollapse */ static            isBool (x: any): x is Bool            { return x && x.typeId === Type.Bool;            }\n    /** @nocollapse */ static         isDecimal (x: any): x is Decimal         { return x && x.typeId === Type.Decimal;         }\n    /** @nocollapse */ static            isDate (x: any): x is Date_           { return x && x.typeId === Type.Date;            }\n    /** @nocollapse */ static            isTime (x: any): x is Time_           { return x && x.typeId === Type.Time;            }\n    /** @nocollapse */ static       isTimestamp (x: any): x is Timestamp_      { return x && x.typeId === Type.Timestamp;       }\n    /** @nocollapse */ static        isInterval (x: any): x is Interval_       { return x && x.typeId === Type.Interval;        }\n    /** @nocollapse */ static            isList (x: any): x is List            { return x && x.typeId === Type.List;            }\n    /** @nocollapse */ static          isStruct (x: any): x is Struct          { return x && x.typeId === Type.Struct;          }\n    /** @nocollapse */ static           isUnion (x: any): x is Union_          { return x && x.typeId === Type.Union;           }\n    /** @nocollapse */ static isFixedSizeBinary (x: any): x is FixedSizeBinary { return x && x.typeId === Type.FixedSizeBinary; }\n    /** @nocollapse */ static   isFixedSizeList (x: any): x is FixedSizeList   { return x && x.typeId === Type.FixedSizeList;   }\n    /** @nocollapse */ static             isMap (x: any): x is Map_            { return x && x.typeId === Type.Map;             }\n    /** @nocollapse */ static      isDictionary (x: any): x is Dictionary      { return x && x.typeId === Type.Dictionary;      }\n\n    public get typeId(): TType { return <any> Type.NONE; }\n    public compareTo(other: DataType): other is TypeToDataType<TType> {\n        return comparer.visit(this, other);\n    }\n\n    protected static [Symbol.toStringTag] = ((proto: DataType) => {\n        (<any> proto).children = null;\n        (<any> proto).ArrayType = Array;\n        return proto[Symbol.toStringTag] = 'DataType';\n    })(DataType.prototype);\n}\n\n/** @ignore */\nexport interface Null extends DataType<Type.Null> { TArray: void; TValue: null; }\n/** @ignore */\nexport class Null extends DataType<Type.Null> {\n    public toString() { return `Null`; }\n    public get typeId() { return Type.Null as Type.Null; }\n    protected static [Symbol.toStringTag] = ((proto: Null) => {\n        return proto[Symbol.toStringTag] = 'Null';\n    })(Null.prototype);\n}\n\n/** @ignore */\ntype Ints = Type.Int | Type.Int8 | Type.Int16 | Type.Int32 | Type.Int64 | Type.Uint8 | Type.Uint16 | Type.Uint32 | Type.Uint64;\n/** @ignore */\ntype IType = {\n    [Type.Int   ]: { bitWidth: IntBitWidth; isSigned: true | false; TArray: IntArray;    TValue: number | bigint | Int32Array | Uint32Array; };\n    [Type.Int8  ]: { bitWidth:           8; isSigned: true;         TArray: Int8Array;   TValue: number; };\n    [Type.Int16 ]: { bitWidth:          16; isSigned: true;         TArray: Int16Array;  TValue: number; };\n    [Type.Int32 ]: { bitWidth:          32; isSigned: true;         TArray: Int32Array;  TValue: number; };\n    [Type.Int64 ]: { bitWidth:          64; isSigned: true;         TArray: Int32Array;  TValue: bigint | Int32Array | Uint32Array; };\n    [Type.Uint8 ]: { bitWidth:           8; isSigned: false;        TArray: Uint8Array;  TValue: number; };\n    [Type.Uint16]: { bitWidth:          16; isSigned: false;        TArray: Uint16Array; TValue: number; };\n    [Type.Uint32]: { bitWidth:          32; isSigned: false;        TArray: Uint32Array; TValue: number; };\n    [Type.Uint64]: { bitWidth:          64; isSigned: false;        TArray: Uint32Array; TValue: bigint | Int32Array | Uint32Array; };\n};\n\n/** @ignore */\ninterface Int_<T extends Ints = Ints> extends DataType<T> { TArray: IType[T]['TArray']; TValue: IType[T]['TValue']; }\n/** @ignore */\nclass Int_<T extends Ints = Ints> extends DataType<T> {\n    constructor(public readonly isSigned: IType[T]['isSigned'],\n                public readonly bitWidth: IType[T]['bitWidth']) {\n        super();\n    }\n    public get typeId() { return Type.Int as T; }\n    public get ArrayType(): TypedArrayConstructor<IType[T]['TArray']> {\n        switch (this.bitWidth) {\n            case  8: return this.isSigned ?  Int8Array :  Uint8Array;\n            case 16: return this.isSigned ? Int16Array : Uint16Array;\n            case 32: return this.isSigned ? Int32Array : Uint32Array;\n            case 64: return this.isSigned ? Int32Array : Uint32Array;\n        }\n        throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n    }\n    public toString() { return `${this.isSigned ? `I` : `Ui`}nt${this.bitWidth}`; }\n    protected static [Symbol.toStringTag] = ((proto: Int_) => {\n        (<any> proto).isSigned = null;\n        (<any> proto).bitWidth = null;\n        return proto[Symbol.toStringTag] = 'Int';\n    })(Int_.prototype);\n}\n\nexport { Int_ as Int };\n\n/** @ignore */\nexport class Int8 extends Int_<Type.Int8> { constructor() { super(true, 8); } }\n/** @ignore */\nexport class Int16 extends Int_<Type.Int16> { constructor() { super(true, 16); } }\n/** @ignore */\nexport class Int32 extends Int_<Type.Int32> { constructor() { super(true, 32); } }\n/** @ignore */\nexport class Int64 extends Int_<Type.Int64> { constructor() { super(true, 64); } }\n/** @ignore */\nexport class Uint8 extends Int_<Type.Uint8> { constructor() { super(false, 8); } }\n/** @ignore */\nexport class Uint16 extends Int_<Type.Uint16> { constructor() { super(false, 16); } }\n/** @ignore */\nexport class Uint32 extends Int_<Type.Uint32> { constructor() { super(false, 32); } }\n/** @ignore */\nexport class Uint64 extends Int_<Type.Uint64> { constructor() { super(false, 64); } }\n\nObject.defineProperty(Int8.prototype, 'ArrayType', { value: Int8Array });\nObject.defineProperty(Int16.prototype, 'ArrayType', { value: Int16Array });\nObject.defineProperty(Int32.prototype, 'ArrayType', { value: Int32Array });\nObject.defineProperty(Int64.prototype, 'ArrayType', { value: Int32Array });\nObject.defineProperty(Uint8.prototype, 'ArrayType', { value: Uint8Array });\nObject.defineProperty(Uint16.prototype, 'ArrayType', { value: Uint16Array });\nObject.defineProperty(Uint32.prototype, 'ArrayType', { value: Uint32Array });\nObject.defineProperty(Uint64.prototype, 'ArrayType', { value: Uint32Array });\n\n/** @ignore */\ntype Floats = Type.Float | Type.Float16 | Type.Float32 | Type.Float64;\n/** @ignore */\ntype FType = {\n    [Type.Float  ]: { precision: Precision;        TArray: FloatArray;    TValue: number; };\n    [Type.Float16]: { precision: Precision.HALF;   TArray: Uint16Array;   TValue: number; };\n    [Type.Float32]: { precision: Precision.SINGLE; TArray: Float32Array;  TValue: number; };\n    [Type.Float64]: { precision: Precision.DOUBLE; TArray: Float64Array;  TValue: number; };\n};\n\n/** @ignore */\nexport interface Float<T extends Floats = Floats> extends DataType<T> { TArray: FType[T]['TArray']; TValue: number; }\n/** @ignore */\nexport class Float<T extends Floats = Floats> extends DataType<T> {\n    constructor(public readonly precision: Precision) {\n        super();\n    }\n    public get typeId() { return Type.Float as T; }\n    public get ArrayType(): TypedArrayConstructor<FType[T]['TArray']> {\n        switch (this.precision) {\n            case Precision.HALF: return Uint16Array;\n            case Precision.SINGLE: return Float32Array;\n            case Precision.DOUBLE: return Float64Array;\n        }\n        throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n    }\n    public toString() { return `Float${(this.precision << 5) || 16}`; }\n    protected static [Symbol.toStringTag] = ((proto: Float) => {\n        (<any> proto).precision = null;\n        return proto[Symbol.toStringTag] = 'Float';\n    })(Float.prototype);\n}\n\n/** @ignore */\nexport class Float16 extends Float<Type.Float16> { constructor() { super(Precision.HALF); } }\n/** @ignore */\nexport class Float32 extends Float<Type.Float32> { constructor() { super(Precision.SINGLE); } }\n/** @ignore */\nexport class Float64 extends Float<Type.Float64> { constructor() { super(Precision.DOUBLE); } }\n\nObject.defineProperty(Float16.prototype, 'ArrayType', { value: Uint16Array });\nObject.defineProperty(Float32.prototype, 'ArrayType', { value: Float32Array });\nObject.defineProperty(Float64.prototype, 'ArrayType', { value: Float64Array });\n\n/** @ignore */\nexport interface Binary extends DataType<Type.Binary> { TArray: Uint8Array; TValue: Uint8Array; ArrayType: TypedArrayConstructor<Uint8Array>; }\n/** @ignore */\nexport class Binary extends DataType<Type.Binary> {\n    constructor() {\n        super();\n    }\n    public get typeId() { return Type.Binary as Type.Binary; }\n    public toString() { return `Binary`; }\n    protected static [Symbol.toStringTag] = ((proto: Binary) => {\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'Binary';\n    })(Binary.prototype);\n}\n\n/** @ignore */\nexport interface Utf8 extends DataType<Type.Utf8> { TArray: Uint8Array; TValue: string; ArrayType: TypedArrayConstructor<Uint8Array>; }\n/** @ignore */\nexport class Utf8 extends DataType<Type.Utf8> {\n    constructor() {\n        super();\n    }\n    public get typeId() { return Type.Utf8 as Type.Utf8; }\n    public toString() { return `Utf8`; }\n    protected static [Symbol.toStringTag] = ((proto: Utf8) => {\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'Utf8';\n    })(Utf8.prototype);\n}\n\n/** @ignore */\nexport interface Bool extends DataType<Type.Bool> { TArray: Uint8Array; TValue: boolean; ArrayType: TypedArrayConstructor<Uint8Array>; }\n/** @ignore */\nexport class Bool extends DataType<Type.Bool> {\n    constructor() {\n        super();\n    }\n    public get typeId() { return Type.Bool as Type.Bool; }\n    public toString() { return `Bool`; }\n    protected static [Symbol.toStringTag] = ((proto: Bool) => {\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'Bool';\n    })(Bool.prototype);\n}\n\n/** @ignore */\nexport interface Decimal extends DataType<Type.Decimal> { TArray: Uint32Array; TValue: Uint32Array; ArrayType: TypedArrayConstructor<Uint32Array>; }\n/** @ignore */\nexport class Decimal extends DataType<Type.Decimal> {\n    constructor(public readonly scale: number,\n                public readonly precision: number) {\n        super();\n    }\n    public get typeId() { return Type.Decimal as Type.Decimal; }\n    public toString() { return `Decimal[${this.precision}e${this.scale > 0 ? `+` : ``}${this.scale}]`; }\n    protected static [Symbol.toStringTag] = ((proto: Decimal) => {\n        (<any> proto).scale = null;\n        (<any> proto).precision = null;\n        (<any> proto).ArrayType = Uint32Array;\n        return proto[Symbol.toStringTag] = 'Decimal';\n    })(Decimal.prototype);\n}\n\n/** @ignore */\nexport type Dates = Type.Date | Type.DateDay | Type.DateMillisecond;\n/** @ignore */\nexport interface Date_<T extends Dates = Dates> extends DataType<T> { TArray: Int32Array; TValue: Date; ArrayType: TypedArrayConstructor<Int32Array>; }\n/** @ignore */\nexport class Date_<T extends Dates = Dates> extends DataType<T> {\n    constructor(public readonly unit: DateUnit) {\n        super();\n    }\n    public get typeId() { return Type.Date as T; }\n    public toString() { return `Date${(this.unit + 1) * 32}<${DateUnit[this.unit]}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Date_) => {\n        (<any> proto).unit = null;\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Date';\n    })(Date_.prototype);\n}\n\n/** @ignore */\nexport class DateDay extends Date_<Type.DateDay> { constructor() { super(DateUnit.DAY); } }\n/** @ignore */\nexport class DateMillisecond extends Date_<Type.DateMillisecond> { constructor() { super(DateUnit.MILLISECOND); } }\n\n/** @ignore */\ntype Times = Type.Time | Type.TimeSecond | Type.TimeMillisecond | Type.TimeMicrosecond | Type.TimeNanosecond;\n/** @ignore */\ntype TimesType = {\n    [Type.Time           ]: { unit: TimeUnit;             TValue: number | Int32Array };\n    [Type.TimeSecond     ]: { unit: TimeUnit.SECOND;      TValue: number;             };\n    [Type.TimeMillisecond]: { unit: TimeUnit.MILLISECOND; TValue: number;             };\n    [Type.TimeMicrosecond]: { unit: TimeUnit.MICROSECOND; TValue: Int32Array;         };\n    [Type.TimeNanosecond ]: { unit: TimeUnit.NANOSECOND;  TValue: Int32Array;         };\n};\n\n/** @ignore */\ninterface Time_<T extends Times = Times> extends DataType<T> { TArray: Int32Array; TValue: TimesType[T]['TValue']; ArrayType: TypedArrayConstructor<Int32Array>; }\n/** @ignore */\nclass Time_<T extends Times = Times> extends DataType<T> {\n    constructor(public readonly unit: TimesType[T]['unit'],\n                public readonly bitWidth: TimeBitWidth) {\n        super();\n    }\n    public get typeId() { return Type.Time as T; }\n    public toString() { return `Time${this.bitWidth}<${TimeUnit[this.unit]}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Time_) => {\n        (<any> proto).unit = null;\n        (<any> proto).bitWidth = null;\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Time';\n    })(Time_.prototype);\n}\n\nexport { Time_ as Time };\n\n/** @ignore */\nexport class TimeSecond extends Time_<Type.TimeSecond> { constructor() { super(TimeUnit.SECOND, 32); } }\n/** @ignore */\nexport class TimeMillisecond extends Time_<Type.TimeMillisecond> { constructor() { super(TimeUnit.MILLISECOND, 32); } }\n/** @ignore */\nexport class TimeMicrosecond extends Time_<Type.TimeMicrosecond> { constructor() { super(TimeUnit.MICROSECOND, 64); } }\n/** @ignore */\nexport class TimeNanosecond extends Time_<Type.TimeNanosecond> { constructor() { super(TimeUnit.NANOSECOND, 64); } }\n\n/** @ignore */\ntype Timestamps = Type.Timestamp | Type.TimestampSecond | Type.TimestampMillisecond | Type.TimestampMicrosecond | Type.TimestampNanosecond;\n/** @ignore */\ninterface Timestamp_<T extends Timestamps = Timestamps> extends DataType<T> { TArray: Int32Array; TValue: number; ArrayType: TypedArrayConstructor<Int32Array>; }\n/** @ignore */\nclass Timestamp_<T extends Timestamps = Timestamps> extends DataType<T> {\n    constructor(public readonly unit: TimeUnit,\n                public readonly timezone?: string | null) {\n        super();\n    }\n    public get typeId() { return Type.Timestamp as T; }\n    public toString() { return `Timestamp<${TimeUnit[this.unit]}${this.timezone ? `, ${this.timezone}` : ``}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Timestamp_) => {\n        (<any> proto).unit = null;\n        (<any> proto).timezone = null;\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Timestamp';\n    })(Timestamp_.prototype);\n}\n\nexport { Timestamp_ as Timestamp };\n\n/** @ignore */\nexport class TimestampSecond extends Timestamp_<Type.TimestampSecond> { constructor(timezone?: string | null) { super(TimeUnit.SECOND, timezone); } }\n/** @ignore */\nexport class TimestampMillisecond extends Timestamp_<Type.TimestampMillisecond> { constructor(timezone?: string | null) { super(TimeUnit.MILLISECOND, timezone); } }\n/** @ignore */\nexport class TimestampMicrosecond extends Timestamp_<Type.TimestampMicrosecond> { constructor(timezone?: string | null) { super(TimeUnit.MICROSECOND, timezone); } }\n/** @ignore */\nexport class TimestampNanosecond extends Timestamp_<Type.TimestampNanosecond> { constructor(timezone?: string | null) { super(TimeUnit.NANOSECOND, timezone); } }\n\n/** @ignore */\ntype Intervals = Type.Interval | Type.IntervalDayTime | Type.IntervalYearMonth;\n/** @ignore */\ninterface Interval_<T extends Intervals = Intervals> extends DataType<T> { TArray: Int32Array; TValue: Int32Array; ArrayType: TypedArrayConstructor<Int32Array>; }\n/** @ignore */\nclass Interval_<T extends Intervals = Intervals> extends DataType<T> {\n    constructor(public readonly unit: IntervalUnit) {\n        super();\n    }\n    public get typeId() { return Type.Interval as T; }\n    public toString() { return `Interval<${IntervalUnit[this.unit]}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Interval_) => {\n        (<any> proto).unit = null;\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Interval';\n    })(Interval_.prototype);\n}\n\nexport { Interval_ as Interval };\n\n/** @ignore */\nexport class IntervalDayTime extends Interval_<Type.IntervalDayTime> { constructor() { super(IntervalUnit.DAY_TIME); } }\n/** @ignore */\nexport class IntervalYearMonth extends Interval_<Type.IntervalYearMonth> { constructor() { super(IntervalUnit.YEAR_MONTH); } }\n\n/** @ignore */\nexport interface List<T extends DataType = any> extends DataType<Type.List, { [0]: T }>  { TArray: IterableArrayLike<T>; TValue: V<T>; }\n/** @ignore */\nexport class List<T extends DataType = any> extends DataType<Type.List, { [0]: T }> {\n    constructor(child: Field<T>) {\n        super();\n        this.children = [child];\n    }\n    public readonly children: Field<T>[];\n    public get typeId() { return Type.List as Type.List; }\n    public toString() { return `List<${this.valueType}>`; }\n    public get valueType(): T { return this.children[0].type as T; }\n    public get valueField(): Field<T> { return this.children[0] as Field<T>; }\n    public get ArrayType(): T['ArrayType'] { return this.valueType.ArrayType; }\n    protected static [Symbol.toStringTag] = ((proto: List) => {\n        (<any> proto).children = null;\n        return proto[Symbol.toStringTag] = 'List';\n    })(List.prototype);\n}\n\n/** @ignore */\nexport interface Struct<T extends { [key: string]: DataType } = any> extends DataType<Type.Struct> { TArray: IterableArrayLike<RowLike<T>>; TValue: RowLike<T>; dataTypes: T; }\n/** @ignore */\nexport class Struct<T extends { [key: string]: DataType } = any> extends DataType<Type.Struct, T> {\n    public readonly children: Field<T[keyof T]>[];\n    constructor(children: Field<T[keyof T]>[]) {\n        super();\n        this.children = children;\n    }\n    public get typeId() { return Type.Struct as Type.Struct; }\n    public toString() { return `Struct<{${this.children.map((f) => `${f.name}:${f.type}`).join(`, `)}}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Struct) => {\n        (<any> proto).children = null;\n        return proto[Symbol.toStringTag] = 'Struct';\n    })(Struct.prototype);\n}\n\n/** @ignore */\ntype Unions = Type.Union | Type.DenseUnion | Type.SparseUnion;\n/** @ignore */\ninterface Union_<T extends Unions = Unions> extends DataType<T> { TArray: Int8Array; TValue: any; ArrayType: TypedArrayConstructor<Int8Array>; }\n/** @ignore */\nclass Union_<T extends Unions = Unions> extends DataType<T> {\n    public readonly mode: UnionMode;\n    public readonly typeIds: Int32Array;\n    public readonly children: Field<any>[];\n    public readonly typeIdToChildIndex: { [key: number]: number };\n    constructor(mode: UnionMode,\n                typeIds: number[] | Int32Array,\n                children: Field<any>[]) {\n        super();\n        this.mode = mode;\n        this.children = children;\n        this.typeIds = typeIds = Int32Array.from(typeIds);\n        this.typeIdToChildIndex = typeIds.reduce((typeIdToChildIndex, typeId, idx) => {\n            return (typeIdToChildIndex[typeId] = idx) && typeIdToChildIndex || typeIdToChildIndex;\n        }, Object.create(null) as { [key: number]: number });\n    }\n    public get typeId() { return Type.Union as T; }\n    public toString() { return `${this[Symbol.toStringTag]}<${\n        this.children.map((x) => `${x.type}`).join(` | `)\n    }>`; }\n    protected static [Symbol.toStringTag] = ((proto: Union_) => {\n        (<any> proto).mode = null;\n        (<any> proto).typeIds = null;\n        (<any> proto).children = null;\n        (<any> proto).typeIdToChildIndex = null;\n        (<any> proto).ArrayType = Int8Array;\n        return proto[Symbol.toStringTag] = 'Union';\n    })(Union_.prototype);\n}\n\nexport { Union_ as Union };\n\n/** @ignore */\nexport class DenseUnion extends Union_<Type.DenseUnion> {\n    constructor(typeIds: number[] | Int32Array, children: Field[]) {\n        super(UnionMode.Dense, typeIds, children);\n    }\n}\n\n/** @ignore */\nexport class SparseUnion extends Union_<Type.SparseUnion> {\n    constructor(typeIds: number[] | Int32Array, children: Field[]) {\n        super(UnionMode.Sparse, typeIds, children);\n    }\n}\n\n/** @ignore */\nexport interface FixedSizeBinary extends DataType<Type.FixedSizeBinary> { TArray: Uint8Array; TValue: Uint8Array; ArrayType: TypedArrayConstructor<Uint8Array>; }\n/** @ignore */\nexport class FixedSizeBinary extends DataType<Type.FixedSizeBinary> {\n    constructor(public readonly byteWidth: number) {\n        super();\n    }\n    public get typeId() { return Type.FixedSizeBinary as Type.FixedSizeBinary; }\n    public toString() { return `FixedSizeBinary[${this.byteWidth}]`; }\n    protected static [Symbol.toStringTag] = ((proto: FixedSizeBinary) => {\n        (<any> proto).byteWidth = null;\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'FixedSizeBinary';\n    })(FixedSizeBinary.prototype);\n}\n\n/** @ignore */\nexport interface FixedSizeList<T extends DataType = any> extends DataType<Type.FixedSizeList> { TArray: IterableArrayLike<T['TArray']>; TValue: V<T>; }\n/** @ignore */\nexport class FixedSizeList<T extends DataType = any> extends DataType<Type.FixedSizeList, { [0]: T }> {\n    public readonly children: Field<T>[];\n    constructor(public readonly listSize: number, child: Field<T>) {\n        super();\n        this.children = [child];\n    }\n    public get typeId() { return Type.FixedSizeList as Type.FixedSizeList; }\n    public get valueType(): T { return this.children[0].type as T; }\n    public get valueField(): Field<T> { return this.children[0] as Field<T>; }\n    public get ArrayType(): T['ArrayType'] { return this.valueType.ArrayType; }\n    public toString() { return `FixedSizeList[${this.listSize}]<${this.valueType}>`; }\n    protected static [Symbol.toStringTag] = ((proto: FixedSizeList) => {\n        (<any> proto).children = null;\n        (<any> proto).listSize = null;\n        return proto[Symbol.toStringTag] = 'FixedSizeList';\n    })(FixedSizeList.prototype);\n}\n\n/** @ignore */\nexport interface Map_<TKey extends DataType = any, TValue extends DataType = any> extends DataType<Type.Map> {\n    TArray: IterableArrayLike<Map<TKey['TValue'], TValue['TValue'] | null>>;\n    TChild: Struct<{ key: TKey, value: TValue }>;\n    TValue: MapLike<TKey, TValue>;\n}\n\n/** @ignore */\nexport class Map_<TKey extends DataType = any, TValue extends DataType = any> extends DataType<Type.Map> {\n    constructor(child: Field<Struct<{ key: TKey, value: TValue }>>, keysSorted = false) {\n        super();\n        this.children = [child];\n        this.keysSorted = keysSorted;\n    }\n    public readonly keysSorted: boolean;\n    public readonly children: Field<Struct<{ key: TKey, value: TValue }>>[];\n    public get typeId() { return Type.Map as Type.Map; }\n    public get keyType(): TKey { return this.children[0].type.children[0].type as TKey; }\n    public get valueType(): TValue { return this.children[0].type.children[1].type as TValue; }\n    public toString() { return `Map<{${this.children[0].type.children.map((f) => `${f.name}:${f.type}`).join(`, `)}}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Map_) => {\n        (<any> proto).children = null;\n        (<any> proto).keysSorted = null;\n        return proto[Symbol.toStringTag] = 'Map_';\n    })(Map_.prototype);\n}\n\n/** @ignore */\nconst getId = ((atomicDictionaryId) => () => ++atomicDictionaryId)(-1);\n\n/** @ignore */\nexport type TKeys = Int8 | Int16 | Int32 | Uint8 | Uint16 | Uint32;\n\n/** @ignore */\nexport interface Dictionary<T extends DataType = any, TKey extends TKeys = TKeys> extends DataType<Type.Dictionary> { TArray: TKey['TArray']; TValue: T['TValue']; }\n/** @ignore */\nexport class Dictionary<T extends DataType = any, TKey extends TKeys = TKeys> extends DataType<Type.Dictionary> {\n    public readonly id: number;\n    public readonly indices: TKey;\n    public readonly dictionary: T;\n    public readonly isOrdered: boolean;\n    constructor(dictionary: T, indices: TKey, id?: Long | number | null, isOrdered?: boolean | null) {\n        super();\n        this.indices = indices;\n        this.dictionary = dictionary;\n        this.isOrdered = isOrdered || false;\n        this.id = id == null ? getId() : typeof id === 'number' ? id : id.low;\n    }\n    public get typeId() { return Type.Dictionary as Type.Dictionary; }\n    public get children() { return this.dictionary.children; }\n    public get valueType(): T { return this.dictionary as T; }\n    public get ArrayType(): T['ArrayType'] { return this.dictionary.ArrayType; }\n    public toString() { return `Dictionary<${this.indices}, ${this.dictionary}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Dictionary) => {\n        (<any> proto).id = null;\n        (<any> proto).indices = null;\n        (<any> proto).isOrdered = null;\n        (<any> proto).dictionary = null;\n        return proto[Symbol.toStringTag] = 'Dictionary';\n    })(Dictionary.prototype);\n}\n\n/** @ignore */\nexport interface IterableArrayLike<T = any> extends ArrayLike<T>, Iterable<T> {}\n/** @ignore */\nexport type FloatArray = Uint16Array | Float32Array | Float64Array;\n/** @ignore */\nexport type IntArray = Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array;\n\n/** @ignore */\nexport function strideForType(type: DataType) {\n    let t: any = type;\n    switch (type.typeId) {\n        case Type.Decimal: return 4;\n        case Type.Timestamp: return 2;\n        case Type.Date: return 1 + (t as Date_).unit;\n        case Type.Interval: return 1 + (t as Interval_).unit;\n        case Type.Int: return 1 + +((t as Int_).bitWidth > 32);\n        case Type.Time: return 1 + +((t as Time_).bitWidth > 32);\n        case Type.FixedSizeList: return (t as FixedSizeList).listSize;\n        case Type.FixedSizeBinary: return (t as FixedSizeBinary).byteWidth;\n        default: return 1;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from './vector';\nimport { truncateBitmap } from './util/bit';\nimport { popcnt_bit_range } from './util/bit';\nimport { BufferType, UnionMode, Type } from './enum';\nimport { DataType, SparseUnion, DenseUnion, strideForType } from './type';\nimport { toArrayBufferView, toUint8Array, toInt32Array } from './util/buffer';\nimport {\n    Dictionary,\n    Null, Int, Float,\n    Binary, Bool, Utf8, Decimal,\n    Date_, Time, Timestamp, Interval,\n    List, Struct, Union, FixedSizeBinary, FixedSizeList, Map_,\n} from './type';\n\n// When slicing, we do not know the null count of the sliced range without\n// doing some computation. To avoid doing this eagerly, we set the null count\n// to -1 (any negative number will do). When Vector.nullCount is called the\n// first time, the null count will be computed. See ARROW-33\n/** @ignore */ export type kUnknownNullCount = -1;\n/** @ignore */ export const kUnknownNullCount = -1;\n\n/** @ignore */ export type NullBuffer = Uint8Array | null | undefined;\n/** @ignore */ export type TypeIdsBuffer = Int8Array  | ArrayLike<number> | Iterable<number> | undefined;\n/** @ignore */ export type ValueOffsetsBuffer = Int32Array  | ArrayLike<number> | Iterable<number> | undefined;\n/** @ignore */ export type DataBuffer<T extends DataType> = T['TArray'] | ArrayLike<number> | Iterable<number> | undefined;\n\n/** @ignore */\nexport interface Buffers<T extends DataType> {\n      [BufferType.OFFSET]: Int32Array;\n        [BufferType.DATA]: T['TArray'];\n    [BufferType.VALIDITY]: Uint8Array;\n        [BufferType.TYPE]: T['TArray'];\n}\n\n/** @ignore */\nexport interface Data<T extends DataType = DataType> {\n    readonly TType: T['TType'];\n    readonly TArray: T['TArray'];\n    readonly TValue: T['TValue'];\n}\n\n/** @ignore */\nexport class Data<T extends DataType = DataType> {\n\n    public readonly type: T;\n    public readonly length: number;\n    public readonly offset: number;\n    public readonly stride: number;\n    public readonly childData: Data[];\n\n    /**\n     * The dictionary for this Vector, if any. Only used for Dictionary type.\n     */\n    public dictionary?: Vector;\n\n    public readonly values: Buffers<T>[BufferType.DATA];\n    // @ts-ignore\n    public readonly typeIds: Buffers<T>[BufferType.TYPE];\n    // @ts-ignore\n    public readonly nullBitmap: Buffers<T>[BufferType.VALIDITY];\n    // @ts-ignore\n    public readonly valueOffsets: Buffers<T>[BufferType.OFFSET];\n\n    public get typeId(): T['TType'] { return this.type.typeId; }\n    public get ArrayType(): T['ArrayType'] { return this.type.ArrayType; }\n    public get buffers() {\n        return [this.valueOffsets, this.values, this.nullBitmap, this.typeIds] as Buffers<T>;\n    }\n    public get byteLength(): number {\n        let byteLength = 0;\n        let { valueOffsets, values, nullBitmap, typeIds } = this;\n        valueOffsets && (byteLength += valueOffsets.byteLength);\n        values       && (byteLength += values.byteLength);\n        nullBitmap   && (byteLength += nullBitmap.byteLength);\n        typeIds      && (byteLength += typeIds.byteLength);\n        return this.childData.reduce((byteLength, child) => byteLength + child.byteLength, byteLength);\n    }\n\n    protected _nullCount: number | kUnknownNullCount;\n\n    public get nullCount() {\n        let nullCount = this._nullCount;\n        let nullBitmap: Uint8Array | undefined;\n        if (nullCount <= kUnknownNullCount && (nullBitmap = this.nullBitmap)) {\n            this._nullCount = nullCount = this.length - popcnt_bit_range(nullBitmap, this.offset, this.offset + this.length);\n        }\n        return nullCount;\n    }\n\n    constructor(type: T, offset: number, length: number, nullCount?: number, buffers?: Partial<Buffers<T>> | Data<T>, childData?: (Data | Vector)[], dictionary?: Vector) {\n        this.type = type;\n        this.dictionary = dictionary;\n        this.offset = Math.floor(Math.max(offset || 0, 0));\n        this.length = Math.floor(Math.max(length || 0, 0));\n        this._nullCount = Math.floor(Math.max(nullCount || 0, -1));\n        this.childData = (childData || []).map((x) => x instanceof Data ? x : x.data) as Data[];\n        let buffer: Buffers<T>[keyof Buffers<T>];\n        if (buffers instanceof Data) {\n            this.stride = buffers.stride;\n            this.values = buffers.values;\n            this.typeIds = buffers.typeIds;\n            this.nullBitmap = buffers.nullBitmap;\n            this.valueOffsets = buffers.valueOffsets;\n        } else {\n            this.stride = strideForType(type);\n            if (buffers) {\n                (buffer = (buffers as Buffers<T>)[0]) && (this.valueOffsets = buffer);\n                (buffer = (buffers as Buffers<T>)[1]) && (this.values = buffer);\n                (buffer = (buffers as Buffers<T>)[2]) && (this.nullBitmap = buffer);\n                (buffer = (buffers as Buffers<T>)[3]) && (this.typeIds = buffer);\n            }\n        }\n    }\n\n    public clone<R extends DataType>(type: R, offset = this.offset, length = this.length, nullCount = this._nullCount, buffers: Buffers<R> = <any> this, childData: (Data | Vector)[] = this.childData) {\n        return new Data(type, offset, length, nullCount, buffers, childData, this.dictionary);\n    }\n\n    public slice(offset: number, length: number): Data<T> {\n        const { stride, typeId, childData } = this;\n        // +true === 1, +false === 0, so this means\n        // we keep nullCount at 0 if it's already 0,\n        // otherwise set to the invalidated flag -1\n        const nullCount = +(this._nullCount === 0) - 1;\n        const childStride = typeId === 16 /* FixedSizeList */ ? stride : 1;\n        const buffers = this._sliceBuffers(offset, length, stride, typeId);\n        return this.clone<T>(this.type, this.offset + offset, length, nullCount, buffers,\n            // Don't slice children if we have value offsets (the variable-width types)\n            (!childData.length || this.valueOffsets) ? childData : this._sliceChildren(childData, childStride * offset, childStride * length));\n    }\n\n    public _changeLengthAndBackfillNullBitmap(newLength: number): Data<T> {\n        if (this.typeId === Type.Null) {\n            return this.clone(this.type, 0, newLength, 0);\n        }\n        const { length, nullCount } = this;\n        // start initialized with 0s (nulls), then fill from 0 to length with 1s (not null)\n        const bitmap = new Uint8Array(((newLength + 63) & ~63) >> 3).fill(255, 0, length >> 3);\n        // set all the bits in the last byte (up to bit `length - length % 8`) to 1 (not null)\n        bitmap[length >> 3] = (1 << (length - (length & ~7))) - 1;\n        // if we have a nullBitmap, truncate + slice and set it over the pre-filled 1s\n        if (nullCount > 0) {\n            bitmap.set(truncateBitmap(this.offset, length, this.nullBitmap), 0);\n        }\n        const buffers = this.buffers;\n        buffers[BufferType.VALIDITY] = bitmap;\n        return this.clone(this.type, 0, newLength, nullCount + (newLength - length), buffers);\n    }\n\n    protected _sliceBuffers(offset: number, length: number, stride: number, typeId: T['TType']): Buffers<T> {\n        let arr: any, { buffers } = this;\n        // If typeIds exist, slice the typeIds buffer\n        (arr = buffers[BufferType.TYPE]) && (buffers[BufferType.TYPE] = arr.subarray(offset, offset + length));\n        // If offsets exist, only slice the offsets buffer\n        (arr = buffers[BufferType.OFFSET]) && (buffers[BufferType.OFFSET] = arr.subarray(offset, offset + length + 1)) ||\n        // Otherwise if no offsets, slice the data buffer. Don't slice the data vector for Booleans, since the offset goes by bits not bytes\n        (arr = buffers[BufferType.DATA]) && (buffers[BufferType.DATA] = typeId === 6 ? arr : arr.subarray(stride * offset, stride * (offset + length)));\n        return buffers;\n    }\n\n    protected _sliceChildren(childData: Data[], offset: number, length: number): Data[] {\n        return childData.map((child) => child.slice(offset, length));\n    }\n\n    //\n    // Convenience methods for creating Data instances for each of the Arrow Vector types\n    //\n    /** @nocollapse */\n    public static new<T extends DataType>(type: T, offset: number, length: number, nullCount?: number, buffers?: Partial<Buffers<T>> | Data<T>, childData?: (Data | Vector)[], dictionary?: Vector): Data<T> {\n        if (buffers instanceof Data) { buffers = buffers.buffers; } else if (!buffers) { buffers = [] as Partial<Buffers<T>>; }\n        switch (type.typeId) {\n            case Type.Null:            return <unknown> Data.Null(            <unknown> type as Null,            offset, length) as Data<T>;\n            case Type.Int:             return <unknown> Data.Int(             <unknown> type as Int,             offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Dictionary:      return <unknown> Data.Dictionary(      <unknown> type as Dictionary,      offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || [], dictionary!) as Data<T>;\n            case Type.Float:           return <unknown> Data.Float(           <unknown> type as Float,           offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Bool:            return <unknown> Data.Bool(            <unknown> type as Bool,            offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Decimal:         return <unknown> Data.Decimal(         <unknown> type as Decimal,         offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Date:            return <unknown> Data.Date(            <unknown> type as Date_,           offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Time:            return <unknown> Data.Time(            <unknown> type as Time,            offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Timestamp:       return <unknown> Data.Timestamp(       <unknown> type as Timestamp,       offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Interval:        return <unknown> Data.Interval(        <unknown> type as Interval,        offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.FixedSizeBinary: return <unknown> Data.FixedSizeBinary( <unknown> type as FixedSizeBinary, offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Binary:          return <unknown> Data.Binary(          <unknown> type as Binary,          offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.OFFSET] || [], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Utf8:            return <unknown> Data.Utf8(            <unknown> type as Utf8,            offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.OFFSET] || [], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.List:            return <unknown> Data.List(            <unknown> type as List,            offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.OFFSET] || [], (childData || [])[0]) as Data<T>;\n            case Type.FixedSizeList:   return <unknown> Data.FixedSizeList(   <unknown> type as FixedSizeList,   offset, length, nullCount || 0, buffers[BufferType.VALIDITY], (childData || [])[0]) as Data<T>;\n            case Type.Struct:          return <unknown> Data.Struct(          <unknown> type as Struct,          offset, length, nullCount || 0, buffers[BufferType.VALIDITY], childData || []) as Data<T>;\n            case Type.Map:             return <unknown> Data.Map(             <unknown> type as Map_,            offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.OFFSET] || [], (childData || [])[0]) as Data<T>;\n            case Type.Union:           return <unknown> Data.Union(           <unknown> type as Union,           offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.TYPE] || [], buffers[BufferType.OFFSET] || childData, childData) as Data<T>;\n        }\n        throw new Error(`Unrecognized typeId ${type.typeId}`);\n    }\n\n    /** @nocollapse */\n    public static Null<T extends Null>(type: T, offset: number, length: number) {\n        return new Data(type, offset, length, 0);\n    }\n    /** @nocollapse */\n    public static Int<T extends Int>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Dictionary<T extends Dictionary>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>, dictionary: Vector<T['dictionary']>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView<T['TArray']>(type.indices.ArrayType, data), toUint8Array(nullBitmap)], [], dictionary);\n    }\n    /** @nocollapse */\n    public static Float<T extends Float>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Bool<T extends Bool>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Decimal<T extends Decimal>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Date<T extends Date_>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Time<T extends Time>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Timestamp<T extends Timestamp>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Interval<T extends Interval>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static FixedSizeBinary<T extends FixedSizeBinary>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Binary<T extends Binary>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, data: Uint8Array) {\n        return new Data(type, offset, length, nullCount, [toInt32Array(valueOffsets), toUint8Array(data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Utf8<T extends Utf8>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, data: Uint8Array) {\n        return new Data(type, offset, length, nullCount, [toInt32Array(valueOffsets), toUint8Array(data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static List<T extends List>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, child: Data<T['valueType']> | Vector<T['valueType']>) {\n        return new Data(type, offset, length, nullCount, [toInt32Array(valueOffsets), undefined, toUint8Array(nullBitmap)], [child]);\n    }\n    /** @nocollapse */\n    public static FixedSizeList<T extends FixedSizeList>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, child: Data<T['valueType']> | Vector<T['valueType']>) {\n        return new Data(type, offset, length, nullCount, [undefined, undefined, toUint8Array(nullBitmap)], [child]);\n    }\n    /** @nocollapse */\n    public static Struct<T extends Struct>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, children: (Data | Vector)[]) {\n        return new Data(type, offset, length, nullCount, [undefined, undefined, toUint8Array(nullBitmap)], children);\n    }\n    /** @nocollapse */\n    public static Map<T extends Map_>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, child: (Data | Vector)) {\n        return new Data(type, offset, length, nullCount, [toInt32Array(valueOffsets), undefined, toUint8Array(nullBitmap)], [child]);\n    }\n    public static Union<T extends SparseUnion>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, typeIds: TypeIdsBuffer, children: (Data | Vector)[], _?: any): Data<T>;\n    public static Union<T extends DenseUnion>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, typeIds: TypeIdsBuffer, valueOffsets: ValueOffsetsBuffer, children: (Data | Vector)[]): Data<T>;\n    public static Union<T extends Union>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, typeIds: TypeIdsBuffer, valueOffsetsOrChildren: ValueOffsetsBuffer | (Data | Vector)[], children?: (Data | Vector)[]): Data<T>;\n    /** @nocollapse */\n    public static Union<T extends Union>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, typeIds: TypeIdsBuffer, valueOffsetsOrChildren: ValueOffsetsBuffer | (Data | Vector)[], children?: (Data | Vector)[]) {\n        const buffers = <unknown> [\n            undefined, undefined,\n            toUint8Array(nullBitmap),\n            toArrayBufferView(type.ArrayType, typeIds)\n        ] as Partial<Buffers<T>>;\n        if (type.mode === UnionMode.Sparse) {\n            return new Data(type, offset, length, nullCount, buffers, valueOffsetsOrChildren as (Data | Vector)[]);\n        }\n        buffers[BufferType.OFFSET] = toInt32Array(<ValueOffsetsBuffer> valueOffsetsOrChildren);\n        return new Data(type, offset, length, nullCount, buffers, children);\n    }\n}\n\n(Data.prototype as any).childData = Object.freeze([]);\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/** @ignore */ const undf = void (0);\n\n/** @ignore */\nexport function valueToString(x: any) {\n    if (x === null) { return 'null'; }\n    if (x === undf) { return 'undefined'; }\n    switch (typeof x) {\n        case 'number': return `${x}`;\n        case 'bigint': return `${x}`;\n        case 'string': return `\"${x}\"`;\n    }\n    // If [Symbol.toPrimitive] is implemented (like in BN)\n    // use it instead of JSON.stringify(). This ensures we\n    // print BigInts, Decimals, and Binary in their native\n    // representation\n    if (typeof x[Symbol.toPrimitive] === 'function') {\n        return x[Symbol.toPrimitive]('string');\n    }\n    return ArrayBuffer.isView(x) ? `[${x}]` : JSON.stringify(x);\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DataType } from '../type';\nimport { valueToString } from '../util/pretty';\nimport { BigIntAvailable } from '../util/compat';\n\n/**\n * Dynamically compile the null values into an `isValid()` function whose\n * implementation is a switch statement. Microbenchmarks in v8 indicate\n * this approach is 25% faster than using an ES6 Map.\n *\n * @example\n * console.log(createIsValidFunction([null, 'N/A', NaN]));\n * `function (x) {\n *     if (x !== x) return false;\n *     switch (x) {\n *         case null:\n *         case \"N/A\":\n *             return false;\n *     }\n *     return true;\n * }`\n *\n * @ignore\n * @param nullValues\n */\nexport function createIsValidFunction<T extends DataType = any, TNull = any>(nullValues?: ReadonlyArray<TNull>) {\n\n    if (!nullValues || nullValues.length <= 0) {\n        // @ts-ignore\n        return function isValid(value: any) { return true; };\n    }\n\n    let fnBody = '';\n    let noNaNs = nullValues.filter((x) => x === x);\n\n    if (noNaNs.length > 0) {\n        fnBody = `\n    switch (x) {${noNaNs.map((x) => `\n        case ${valueToCase(x)}:`).join('')}\n            return false;\n    }`;\n    }\n\n    // NaN doesn't equal anything including itself, so it doesn't work as a\n    // switch case. Instead we must explicitly check for NaN before the switch.\n    if (nullValues.length !== noNaNs.length) {\n        fnBody = `if (x !== x) return false;\\n${fnBody}`;\n    }\n\n    return new Function(`x`, `${fnBody}\\nreturn true;`) as (value: T['TValue'] | TNull) => boolean;\n}\n\n/** @ignore */\nfunction valueToCase(x: any) {\n    if (typeof x !== 'bigint') {\n        return valueToString(x);\n    } else if (BigIntAvailable) {\n        return `${valueToString(x)}n`;\n    }\n    return `\"${valueToString(x)}\"`;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { memcpy } from '../util/buffer';\nimport { BigIntAvailable, BigInt64Array, BigUint64Array } from '../util/compat';\nimport {\n    TypedArray, TypedArrayConstructor,\n    BigIntArray, BigIntArrayConstructor\n} from '../interfaces';\n\n/** @ignore */ type DataValue<T> = T extends TypedArray ? number : T extends BigIntArray ? WideValue<T> : T;\n/** @ignore */ type WideValue<T extends BigIntArray> = T extends BigIntArray ? bigint | Int32Array | Uint32Array : never;\n/** @ignore */ type ArrayCtor<T extends TypedArray | BigIntArray> =\n    T extends TypedArray  ? TypedArrayConstructor<T>  :\n    T extends BigIntArray ? BigIntArrayConstructor<T> :\n    any;\n\n/** @ignore */\nconst roundLengthUpToNearest64Bytes = (len: number, BPE: number) => ((((len * BPE) + 63) & ~63) || 64) / BPE;\n/** @ignore */\nconst sliceOrExtendArray = <T extends TypedArray | BigIntArray>(arr: T, len = 0) => (\n    arr.length >= len ? arr.subarray(0, len) : memcpy(new (arr.constructor as any)(len), arr, 0)\n) as T;\n\n/** @ignore */\nexport interface BufferBuilder<T extends TypedArray | BigIntArray = any, TValue = DataValue<T>> {\n    readonly offset: number;\n}\n\n/** @ignore */\nexport class BufferBuilder<T extends TypedArray | BigIntArray = any, TValue = DataValue<T>> {\n\n    constructor(buffer: T, stride = 1) {\n        this.buffer = buffer;\n        this.stride = stride;\n        this.BYTES_PER_ELEMENT = buffer.BYTES_PER_ELEMENT;\n        this.ArrayType = buffer.constructor as ArrayCtor<T>;\n        this._resize(this.length = buffer.length / stride | 0);\n    }\n\n    public buffer: T;\n    public length: number;\n    public readonly stride: number;\n    public readonly ArrayType: ArrayCtor<T>;\n    public readonly BYTES_PER_ELEMENT: number;\n\n    public get byteLength() { return this.length * this.stride * this.BYTES_PER_ELEMENT | 0; }\n    public get reservedLength() { return this.buffer.length / this.stride; }\n    public get reservedByteLength() { return this.buffer.byteLength; }\n\n    // @ts-ignore\n    public set(index: number, value: TValue) { return this; }\n    public append(value: TValue) { return this.set(this.length, value); }\n    public reserve(extra: number) {\n        if (extra > 0) {\n            this.length += extra;\n            const stride = this.stride;\n            const length = this.length * stride;\n            const reserved = this.buffer.length;\n            if (length >= reserved) {\n                this._resize(reserved === 0\n                    ? roundLengthUpToNearest64Bytes(length * 1, this.BYTES_PER_ELEMENT)\n                    : roundLengthUpToNearest64Bytes(length * 2, this.BYTES_PER_ELEMENT)\n                );\n            }\n        }\n        return this;\n    }\n    public flush(length = this.length) {\n        length = roundLengthUpToNearest64Bytes(length * this.stride, this.BYTES_PER_ELEMENT);\n        const array = sliceOrExtendArray<T>(this.buffer, length);\n        this.clear();\n        return array;\n    }\n    public clear() {\n        this.length = 0;\n        this._resize(0);\n        return this;\n    }\n    protected _resize(newLength: number) {\n        return this.buffer = <T> memcpy(new this.ArrayType(newLength), this.buffer);\n    }\n}\n\n(BufferBuilder.prototype as any).offset = 0;\n\n/** @ignore */\nexport class DataBufferBuilder<T extends TypedArray> extends BufferBuilder<T, number> {\n    public last() { return this.get(this.length - 1); }\n    public get(index: number) { return this.buffer[index]; }\n    public set(index: number, value: number) {\n        this.reserve(index - this.length + 1);\n        this.buffer[index * this.stride] = value;\n        return this;\n    }\n}\n\n/** @ignore */\nexport class BitmapBufferBuilder extends DataBufferBuilder<Uint8Array> {\n\n    constructor(data = new Uint8Array(0)) { super(data, 1 / 8); }\n\n    public numValid = 0;\n    public get numInvalid() { return this.length - this.numValid; }\n    public get(idx: number) { return this.buffer[idx >> 3] >> idx % 8 & 1; }\n    public set(idx: number, val: number) {\n        const { buffer } = this.reserve(idx - this.length + 1);\n        const byte = idx >> 3, bit = idx % 8, cur = buffer[byte] >> bit & 1;\n        // If `val` is truthy and the current bit is 0, flip it to 1 and increment `numValid`.\n        // If `val` is falsey and the current bit is 1, flip it to 0 and decrement `numValid`.\n        val ? cur === 0 && ((buffer[byte] |=  (1 << bit)), ++this.numValid)\n            : cur === 1 && ((buffer[byte] &= ~(1 << bit)), --this.numValid);\n        return this;\n    }\n    public clear() {\n        this.numValid = 0;\n        return super.clear();\n    }\n}\n\n/** @ignore */\nexport class OffsetsBufferBuilder extends DataBufferBuilder<Int32Array> {\n    constructor(data = new Int32Array(1)) { super(data, 1); }\n    public append(value: number) {\n        return this.set(this.length - 1, value);\n    }\n    public set(index: number, value: number) {\n        const offset = this.length - 1;\n        const buffer = this.reserve(index - offset + 1).buffer;\n        if (offset < index++) {\n            buffer.fill(buffer[offset], offset, index);\n        }\n        buffer[index] = buffer[index - 1] + value;\n        return this;\n    }\n    public flush(length = this.length - 1) {\n        if (length > this.length) {\n            this.set(length - 1, 0);\n        }\n        return super.flush(length + 1);\n    }\n}\n\n/** @ignore */\nexport class WideBufferBuilder<T extends TypedArray, R extends BigIntArray> extends BufferBuilder<T, DataValue<T>> {\n    // @ts-ignore\n    public buffer64: R;\n    // @ts-ignore\n    protected _ArrayType64: BigIntArrayConstructor<R>;\n    public get ArrayType64() {\n        return this._ArrayType64 || (this._ArrayType64 = <BigIntArrayConstructor<R>> (this.buffer instanceof Int32Array ? BigInt64Array : BigUint64Array));\n    }\n    public set(index: number, value: DataValue<T>) {\n        this.reserve(index - this.length + 1);\n        switch (typeof value) {\n            case 'bigint': this.buffer64[index] = value; break;\n            case 'number': this.buffer[index * this.stride] = value; break;\n            default: this.buffer.set(value as TypedArray, index * this.stride);\n        }\n        return this;\n    }\n    protected _resize(newLength: number) {\n        const data = super._resize(newLength);\n        const length = data.byteLength / (this.BYTES_PER_ELEMENT * this.stride);\n        if (BigIntAvailable) {\n            this.buffer64 = new this.ArrayType64(data.buffer, data.byteOffset, length);\n        }\n        return data;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from './vector';\nimport { BufferType } from './enum';\nimport { Data, Buffers } from './data';\nimport { createIsValidFunction } from './builder/valid';\nimport { BuilderType as B, VectorType as V} from './interfaces';\nimport { BufferBuilder, BitmapBufferBuilder, DataBufferBuilder, OffsetsBufferBuilder } from './builder/buffer';\nimport {\n    DataType, strideForType,\n    Float, Int, Decimal, FixedSizeBinary,\n    Date_, Time, Timestamp, Interval,\n    Utf8, Binary, List, Map_\n} from './type';\n\n/**\n * A set of options required to create a `Builder` instance for a given `DataType`.\n * @see {@link Builder}\n */\nexport interface BuilderOptions<T extends DataType = any, TNull = any> {\n    type: T;\n    nullValues?: TNull[] | ReadonlyArray<TNull> | null;\n    children?: { [key: string]: BuilderOptions; } | BuilderOptions[];\n}\n\n/**\n * A set of options to create an Iterable or AsyncIterable `Builder` transform function.\n * @see {@link Builder.throughIterable}\n * @see {@link Builder.throughAsyncIterable}\n */\n\nexport interface IterableBuilderOptions<T extends DataType = any, TNull = any> extends BuilderOptions<T, TNull> {\n    highWaterMark?: number;\n    queueingStrategy?: 'bytes' | 'count';\n    dictionaryHashFunction?: (value: any) => string | number;\n    valueToChildTypeId?: (builder: Builder<T, TNull>, value: any, offset: number) => number;\n}\n\n/**\n * An abstract base class for types that construct Arrow Vectors from arbitrary JavaScript values.\n *\n * A `Builder` is responsible for writing arbitrary JavaScript values\n * to ArrayBuffers and/or child Builders according to the Arrow specification\n * for each DataType, creating or resizing the underlying ArrayBuffers as necessary.\n *\n * The `Builder` for each Arrow `DataType` handles converting and appending\n * values for a given `DataType`. The high-level {@link Builder.new `Builder.new()`} convenience\n * method creates the specific `Builder` subclass for the supplied `DataType`.\n *\n * Once created, `Builder` instances support both appending values to the end\n * of the `Builder`, and random-access writes to specific indices\n * (`Builder.prototype.append(value)` is a convenience method for\n * `builder.set(builder.length, value)`). Appending or setting values beyond the\n * Builder's current length may cause the builder to grow its underlying buffers\n * or child Builders (if applicable) to accommodate the new values.\n *\n * After enough values have been written to a `Builder`, `Builder.prototype.flush()`\n * will commit the values to the underlying ArrayBuffers (or child Builders). The\n * internal Builder state will be reset, and an instance of `Data<T>` is returned.\n * Alternatively, `Builder.prototype.toVector()` will flush the `Builder` and return\n * an instance of `Vector<T>` instead.\n *\n * When there are no more values to write, use `Builder.prototype.finish()` to\n * finalize the `Builder`. This does not reset the internal state, so it is\n * necessary to call `Builder.prototype.flush()` or `toVector()` one last time\n * if there are still values queued to be flushed.\n *\n * Note: calling `Builder.prototype.finish()` is required when using a `DictionaryBuilder`,\n * because this is when it flushes the values that have been enqueued in its internal\n * dictionary's `Builder`, and creates the `dictionaryVector` for the `Dictionary` `DataType`.\n *\n * ```ts\n * import { Builder, Utf8 } from 'apache-arrow';\n *\n * const utf8Builder = Builder.new({\n *     type: new Utf8(),\n *     nullValues: [null, 'n/a']\n * });\n *\n * utf8Builder\n *     .append('hello')\n *     .append('n/a')\n *     .append('world')\n *     .append(null);\n *\n * const utf8Vector = utf8Builder.finish().toVector();\n *\n * console.log(utf8Vector.toJSON());\n * // > [\"hello\", null, \"world\", null]\n * ```\n *\n * @typeparam T The `DataType` of this `Builder`.\n * @typeparam TNull The type(s) of values which will be considered null-value sentinels.\n */\nexport abstract class Builder<T extends DataType = any, TNull = any> {\n\n    /**\n     * Create a `Builder` instance based on the `type` property of the supplied `options` object.\n     * @param {BuilderOptions<T, TNull>} options An object with a required `DataType` instance\n     * and other optional parameters to be passed to the `Builder` subclass for the given `type`.\n     *\n     * @typeparam T The `DataType` of the `Builder` to create.\n     * @typeparam TNull The type(s) of values which will be considered null-value sentinels.\n     * @nocollapse\n     */\n    // @ts-ignore\n    public static new<T extends DataType = any, TNull = any>(options: BuilderOptions<T, TNull>): B<T, TNull> {}\n\n    /** @nocollapse */\n    // @ts-ignore\n    public static throughNode<T extends DataType = any, TNull = any>(options: import('./io/node/builder').BuilderDuplexOptions<T, TNull>): import('stream').Duplex {\n        throw new Error(`\"throughNode\" not available in this environment`);\n    }\n    /** @nocollapse */\n    // @ts-ignore\n    public static throughDOM<T extends DataType = any, TNull = any>(options: import('./io/whatwg/builder').BuilderTransformOptions<T, TNull>): import('./io/whatwg/builder').BuilderTransform<T, TNull> {\n        throw new Error(`\"throughDOM\" not available in this environment`);\n    }\n\n    /**\n     * Transform a synchronous `Iterable` of arbitrary JavaScript values into a\n     * sequence of Arrow Vector<T> following the chunking semantics defined in\n     * the supplied `options` argument.\n     *\n     * This function returns a function that accepts an `Iterable` of values to\n     * transform. When called, this function returns an Iterator of `Vector<T>`.\n     *\n     * The resulting `Iterator<Vector<T>>` yields Vectors based on the\n     * `queueingStrategy` and `highWaterMark` specified in the `options` argument.\n     *\n     * * If `queueingStrategy` is `\"count\"` (or omitted), The `Iterator<Vector<T>>`\n     *   will flush the underlying `Builder` (and yield a new `Vector<T>`) once the\n     *   Builder's `length` reaches or exceeds the supplied `highWaterMark`.\n     * * If `queueingStrategy` is `\"bytes\"`, the `Iterator<Vector<T>>` will flush\n     *   the underlying `Builder` (and yield a new `Vector<T>`) once its `byteLength`\n     *   reaches or exceeds the supplied `highWaterMark`.\n     *\n     * @param {IterableBuilderOptions<T, TNull>} options An object of properties which determine the `Builder` to create and the chunking semantics to use.\n     * @returns A function which accepts a JavaScript `Iterable` of values to\n     *          write, and returns an `Iterator` that yields Vectors according\n     *          to the chunking semantics defined in the `options` argument.\n     * @nocollapse\n     */\n    public static throughIterable<T extends DataType = any, TNull = any>(options: IterableBuilderOptions<T, TNull>) {\n        return throughIterable(options);\n    }\n\n    /**\n     * Transform an `AsyncIterable` of arbitrary JavaScript values into a\n     * sequence of Arrow Vector<T> following the chunking semantics defined in\n     * the supplied `options` argument.\n     *\n     * This function returns a function that accepts an `AsyncIterable` of values to\n     * transform. When called, this function returns an AsyncIterator of `Vector<T>`.\n     *\n     * The resulting `AsyncIterator<Vector<T>>` yields Vectors based on the\n     * `queueingStrategy` and `highWaterMark` specified in the `options` argument.\n     *\n     * * If `queueingStrategy` is `\"count\"` (or omitted), The `AsyncIterator<Vector<T>>`\n     *   will flush the underlying `Builder` (and yield a new `Vector<T>`) once the\n     *   Builder's `length` reaches or exceeds the supplied `highWaterMark`.\n     * * If `queueingStrategy` is `\"bytes\"`, the `AsyncIterator<Vector<T>>` will flush\n     *   the underlying `Builder` (and yield a new `Vector<T>`) once its `byteLength`\n     *   reaches or exceeds the supplied `highWaterMark`.\n     *\n     * @param {IterableBuilderOptions<T, TNull>} options An object of properties which determine the `Builder` to create and the chunking semantics to use.\n     * @returns A function which accepts a JavaScript `AsyncIterable` of values\n     *          to write, and returns an `AsyncIterator` that yields Vectors\n     *          according to the chunking semantics defined in the `options`\n     *          argument.\n     * @nocollapse\n     */\n    public static throughAsyncIterable<T extends DataType = any, TNull = any>(options: IterableBuilderOptions<T, TNull>) {\n        return throughAsyncIterable(options);\n    }\n\n    /**\n     * Construct a builder with the given Arrow DataType with optional null values,\n     * which will be interpreted as \"null\" when set or appended to the `Builder`.\n     * @param {{ type: T, nullValues?: any[] }} options A `BuilderOptions` object used to create this `Builder`.\n     */\n    constructor({ 'type': type, 'nullValues': nulls }: BuilderOptions<T, TNull>) {\n        this.type = type;\n        this.children = [];\n        this.nullValues = nulls;\n        this.stride = strideForType(type);\n        this._nulls = new BitmapBufferBuilder();\n        if (nulls && nulls.length > 0) {\n            this._isValid = createIsValidFunction(nulls);\n        }\n    }\n\n    /**\n     * The Builder's `DataType` instance.\n     * @readonly\n     */\n    public type: T;\n    /**\n     * The number of values written to the `Builder` that haven't been flushed yet.\n     * @readonly\n     */\n    public length = 0;\n    /**\n     * A boolean indicating whether `Builder.prototype.finish()` has been called on this `Builder`.\n     * @readonly\n     */\n    public finished = false;\n    /**\n     * The number of elements in the underlying values TypedArray that\n     * represent a single logical element, determined by this Builder's\n     * `DataType`. This is 1 for most types, but is larger when the `DataType`\n     * is `Int64`, `Uint64`, `Decimal`, `DateMillisecond`, certain variants of\n     * `Interval`, `Time`, or `Timestamp`, `FixedSizeBinary`, and `FixedSizeList`.\n     * @readonly\n     */\n    public readonly stride: number;\n    public readonly children: Builder[];\n    /**\n     * The list of null-value sentinels for this `Builder`. When one of these values\n     * is written to the `Builder` (either via `Builder.prototype.set()` or `Builder.prototype.append()`),\n     * a 1-bit is written to this Builder's underlying null BitmapBufferBuilder.\n     * @readonly\n     */\n    public readonly nullValues?: TNull[] | ReadonlyArray<TNull> | null;\n\n    /**\n     * Flush the `Builder` and return a `Vector<T>`.\n     * @returns {Vector<T>} A `Vector<T>` of the flushed values.\n     */\n    public toVector() { return Vector.new(this.flush()); }\n\n    public get ArrayType() { return this.type.ArrayType; }\n    public get nullCount() { return this._nulls.numInvalid; }\n    public get numChildren() { return this.children.length; }\n\n    /**\n     * @returns The aggregate length (in bytes) of the values that have been written.\n     */\n    public get byteLength(): number {\n        let size = 0;\n        this._offsets && (size += this._offsets.byteLength);\n        this._values && (size += this._values.byteLength);\n        this._nulls && (size += this._nulls.byteLength);\n        this._typeIds && (size += this._typeIds.byteLength);\n        return this.children.reduce((size, child) => size + child.byteLength, size);\n    }\n\n    /**\n     * @returns The aggregate number of rows that have been reserved to write new values.\n     */\n    public get reservedLength(): number {\n        return this._nulls.reservedLength;\n    }\n\n    /**\n     * @returns The aggregate length (in bytes) that has been reserved to write new values.\n     */\n    public get reservedByteLength(): number {\n        let size = 0;\n        this._offsets && (size += this._offsets.reservedByteLength);\n        this._values && (size += this._values.reservedByteLength);\n        this._nulls && (size += this._nulls.reservedByteLength);\n        this._typeIds && (size += this._typeIds.reservedByteLength);\n        return this.children.reduce((size, child) => size + child.reservedByteLength, size);\n    }\n\n    // @ts-ignore\n    protected _offsets: DataBufferBuilder<Int32Array>;\n    public get valueOffsets() { return this._offsets ? this._offsets.buffer : null; }\n\n    // @ts-ignore\n    protected _values: BufferBuilder<T['TArray'], any>;\n    public get values() { return this._values ? this._values.buffer : null; }\n\n    protected _nulls: BitmapBufferBuilder;\n    public get nullBitmap() { return this._nulls ? this._nulls.buffer : null; }\n\n    // @ts-ignore\n    protected _typeIds: DataBufferBuilder<Int8Array>;\n    public get typeIds() { return this._typeIds ? this._typeIds.buffer : null; }\n\n    // @ts-ignore\n    protected _isValid: (value: T['TValue'] | TNull) => boolean;\n    // @ts-ignore\n    protected _setValue: (inst: Builder<T>, index: number, value: T['TValue']) => void;\n\n    /**\n     * Appends a value (or null) to this `Builder`.\n     * This is equivalent to `builder.set(builder.length, value)`.\n     * @param {T['TValue'] | TNull } value The value to append.\n     */\n    public append(value: T['TValue'] | TNull) { return this.set(this.length, value); }\n\n    /**\n     * Validates whether a value is valid (true), or null (false)\n     * @param {T['TValue'] | TNull } value The value to compare against null the value representations\n     */\n    // @ts-ignore\n    public isValid(value: T['TValue'] | TNull): boolean { return this._isValid(value); }\n\n    /**\n     * Write a value (or null-value sentinel) at the supplied index.\n     * If the value matches one of the null-value representations, a 1-bit is\n     * written to the null `BitmapBufferBuilder`. Otherwise, a 0 is written to\n     * the null `BitmapBufferBuilder`, and the value is passed to\n     * `Builder.prototype.setValue()`.\n     * @param {number} index The index of the value to write.\n     * @param {T['TValue'] | TNull } value The value to write at the supplied index.\n     * @returns {this} The updated `Builder` instance.\n     */\n    public set(index: number, value: T['TValue'] | TNull) {\n        if (this.setValid(index, this.isValid(value))) {\n            this.setValue(index, value);\n        }\n        return this;\n    }\n\n    /**\n     * Write a value to the underlying buffers at the supplied index, bypassing\n     * the null-value check. This is a low-level method that\n     * @param {number} index\n     * @param {T['TValue'] | TNull } value\n     */\n    // @ts-ignore\n    public setValue(index: number, value: T['TValue']) { this._setValue(this, index, value); }\n    public setValid(index: number, valid: boolean) {\n        this.length = this._nulls.set(index, +valid).length;\n        return valid;\n    }\n\n    // @ts-ignore\n    public addChild(child: Builder, name = `${this.numChildren}`) {\n        throw new Error(`Cannot append children to non-nested type \"${this.type}\"`);\n    }\n\n    /**\n     * Retrieve the child `Builder` at the supplied `index`, or null if no child\n     * exists at that index.\n     * @param {number} index The index of the child `Builder` to retrieve.\n     * @returns {Builder | null} The child Builder at the supplied index or null.\n     */\n    public getChildAt<R extends DataType = any>(index: number): Builder<R> | null {\n        return this.children[index] || null;\n    }\n\n    /**\n     * Commit all the values that have been written to their underlying\n     * ArrayBuffers, including any child Builders if applicable, and reset\n     * the internal `Builder` state.\n     * @returns A `Data<T>` of the buffers and childData representing the values written.\n     */\n    public flush() {\n\n        const buffers: any = [];\n        const values =  this._values;\n        const offsets =  this._offsets;\n        const typeIds =  this._typeIds;\n        const { length, nullCount } = this;\n\n        if (typeIds) { /* Unions */\n            buffers[BufferType.TYPE] = typeIds.flush(length);\n            // DenseUnions\n            offsets && (buffers[BufferType.OFFSET] = offsets.flush(length));\n        } else if (offsets) { /* Variable-width primitives (Binary, Utf8) and Lists */\n            // Binary, Utf8\n            values && (buffers[BufferType.DATA] = values.flush(offsets.last()));\n            buffers[BufferType.OFFSET] = offsets.flush(length);\n        } else if (values) { /* Fixed-width primitives (Int, Float, Decimal, Time, Timestamp, and Interval) */\n            buffers[BufferType.DATA] = values.flush(length);\n        }\n\n        nullCount > 0 && (buffers[BufferType.VALIDITY] = this._nulls.flush(length));\n\n        const data = Data.new<T>(\n            this.type, 0, length, nullCount, buffers as Buffers<T>,\n            this.children.map((child) => child.flush())) as Data<T>;\n\n        this.clear();\n\n        return data;\n    }\n\n    /**\n     * Finalize this `Builder`, and child builders if applicable.\n     * @returns {this} The finalized `Builder` instance.\n     */\n    public finish() {\n        this.finished = true;\n        this.children.forEach((child) => child.finish());\n        return this;\n    }\n\n    /**\n     * Clear this Builder's internal state, including child Builders if applicable, and reset the length to 0.\n     * @returns {this} The cleared `Builder` instance.\n     */\n    public clear() {\n        this.length = 0;\n        this._offsets && (this._offsets.clear());\n        this._values && (this._values.clear());\n        this._nulls && (this._nulls.clear());\n        this._typeIds && (this._typeIds.clear());\n        this.children.forEach((child) => child.clear());\n        return this;\n    }\n}\n\n(Builder.prototype as any).length = 1;\n(Builder.prototype as any).stride = 1;\n(Builder.prototype as any).children = null;\n(Builder.prototype as any).finished = false;\n(Builder.prototype as any).nullValues = null;\n(Builder.prototype as any)._isValid = () => true;\n\n/** @ignore */\nexport abstract class FixedWidthBuilder<T extends Int | Float | FixedSizeBinary | Date_ | Timestamp | Time | Decimal | Interval = any, TNull = any> extends Builder<T, TNull> {\n    constructor(opts: BuilderOptions<T, TNull>) {\n        super(opts);\n        this._values = new DataBufferBuilder(new this.ArrayType(0), this.stride);\n    }\n    public setValue(index: number, value: T['TValue']) {\n        const values = this._values;\n        values.reserve(index - values.length + 1);\n        return super.setValue(index, value);\n    }\n}\n\n/** @ignore */\nexport abstract class VariableWidthBuilder<T extends Binary | Utf8 | List | Map_, TNull = any> extends Builder<T, TNull> {\n    protected _pendingLength: number = 0;\n    protected _offsets: OffsetsBufferBuilder;\n    protected _pending: Map<number, any> | undefined;\n    constructor(opts: BuilderOptions<T, TNull>) {\n        super(opts);\n        this._offsets = new OffsetsBufferBuilder();\n    }\n    public setValue(index: number, value: T['TValue']) {\n        const pending = this._pending || (this._pending = new Map());\n        const current = pending.get(index);\n        current && (this._pendingLength -= current.length);\n        this._pendingLength += value.length;\n        pending.set(index, value);\n    }\n    public setValid(index: number, isValid: boolean) {\n        if (!super.setValid(index, isValid)) {\n            (this._pending || (this._pending = new Map())).set(index, undefined);\n            return false;\n        }\n        return true;\n    }\n    public clear() {\n        this._pendingLength = 0;\n        this._pending = undefined;\n        return super.clear();\n    }\n    public flush() {\n        this._flush();\n        return super.flush();\n    }\n    public finish() {\n        this._flush();\n        return super.finish();\n    }\n    protected _flush() {\n        const pending = this._pending;\n        const pendingLength = this._pendingLength;\n        this._pendingLength = 0;\n        this._pending = undefined;\n        if (pending && pending.size > 0) {\n            this._flushPending(pending, pendingLength);\n        }\n        return this;\n    }\n    protected abstract _flushPending(pending: Map<number, any>, pendingLength: number): void;\n}\n\n/** @ignore */\ntype ThroughIterable<T extends DataType = any, TNull = any> = (source: Iterable<T['TValue'] | TNull>) => IterableIterator<V<T>>;\n\n/** @ignore */\nfunction throughIterable<T extends DataType = any, TNull = any>(options: IterableBuilderOptions<T, TNull>): ThroughIterable<T, TNull> {\n    const { ['queueingStrategy']: queueingStrategy = 'count' } = options;\n    const { ['highWaterMark']: highWaterMark = queueingStrategy !== 'bytes' ? 1000 : 2 ** 14 } = options;\n    const sizeProperty: 'length' | 'byteLength' = queueingStrategy !== 'bytes' ? 'length' : 'byteLength';\n    return function*(source: Iterable<T['TValue'] | TNull>) {\n        let numChunks = 0;\n        let builder = Builder.new(options);\n        for (const value of source) {\n            if (builder.append(value)[sizeProperty] >= highWaterMark) {\n                ++numChunks && (yield builder.toVector());\n            }\n        }\n        if (builder.finish().length > 0 || numChunks === 0) {\n            yield builder.toVector();\n        }\n    };\n}\n\n/** @ignore */\ntype ThroughAsyncIterable<T extends DataType = any, TNull = any> = (source: Iterable<T['TValue'] | TNull> | AsyncIterable<T['TValue'] | TNull>) => AsyncIterableIterator<V<T>>;\n\n/** @ignore */\nfunction throughAsyncIterable<T extends DataType = any, TNull = any>(options: IterableBuilderOptions<T, TNull>): ThroughAsyncIterable<T, TNull> {\n    const { ['queueingStrategy']: queueingStrategy = 'count' } = options;\n    const { ['highWaterMark']: highWaterMark = queueingStrategy !== 'bytes' ? 1000 : 2 ** 14 } = options;\n    const sizeProperty: 'length' | 'byteLength' = queueingStrategy !== 'bytes' ? 'length' : 'byteLength';\n    return async function* (source: Iterable<T['TValue'] | TNull> | AsyncIterable<T['TValue'] | TNull>) {\n        let numChunks = 0;\n        let builder = Builder.new(options);\n        for await (const value of source) {\n            if (builder.append(value)[sizeProperty] >= highWaterMark) {\n                ++numChunks && (yield builder.toVector());\n            }\n        }\n        if (builder.finish().length > 0 || numChunks === 0) {\n            yield builder.toVector();\n        }\n    };\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Bool } from '../type';\nimport { BitmapBufferBuilder } from './buffer';\nimport { Builder, BuilderOptions } from '../builder';\n\n/** @ignore */\nexport class BoolBuilder<TNull = any> extends Builder<Bool, TNull> {\n    constructor(options: BuilderOptions<Bool, TNull>) {\n        super(options);\n        this._values = new BitmapBufferBuilder();\n    }\n    public setValue(index: number, value: boolean) {\n        this._values.set(index, +value);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Null } from '../type';\nimport { Builder } from '../builder';\n\n/** @ignore */\nexport class NullBuilder<TNull = any> extends Builder<Null, TNull> {\n    // @ts-ignore\n    public setValue(index: number, value: null) {}\n    public setValid(index: number, valid: boolean) {\n        this.length = Math.max(index + 1, this.length);\n        return valid;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { FixedWidthBuilder } from '../builder';\nimport { Date_, DateDay, DateMillisecond } from '../type';\n\n/** @ignore */\nexport class DateBuilder<T extends Date_ = Date_, TNull = any> extends FixedWidthBuilder<T, TNull> {}\n/** @ignore */\nexport class DateDayBuilder<TNull = any> extends DateBuilder<DateDay, TNull> {}\n/** @ignore */\nexport class DateMillisecondBuilder<TNull = any> extends DateBuilder<DateMillisecond, TNull> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Decimal } from '../type';\nimport { FixedWidthBuilder } from '../builder';\n\n/** @ignore */\nexport class DecimalBuilder<TNull = any> extends FixedWidthBuilder<Decimal, TNull> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { IntBuilder } from './int';\nimport { Dictionary, DataType } from '../type';\nimport { Builder, BuilderOptions } from '../builder';\n\ntype DictionaryHashFunction = (x: any) => string | number;\n\nexport interface DictionaryBuilderOptions<T extends DataType = any, TNull = any> extends BuilderOptions<T, TNull> {\n    dictionaryHashFunction?: DictionaryHashFunction;\n}\n\n/** @ignore */\nexport class DictionaryBuilder<T extends Dictionary, TNull = any> extends Builder<T, TNull> {\n\n    protected _dictionaryOffset: number;\n    protected _dictionary?: Vector<T['dictionary']>;\n    protected _keysToIndices: { [key: string]: number };\n    public readonly indices: IntBuilder<T['indices']>;\n    public readonly dictionary: Builder<T['dictionary']>;\n\n    constructor({ 'type': type, 'nullValues': nulls, 'dictionaryHashFunction': hashFn }: DictionaryBuilderOptions<T, TNull>) {\n        super({ type: new Dictionary(type.dictionary, type.indices, type.id, type.isOrdered) as T });\n        this._nulls = <any> null;\n        this._dictionaryOffset = 0;\n        this._keysToIndices = Object.create(null);\n        this.indices = Builder.new({ 'type': this.type.indices, 'nullValues': nulls }) as IntBuilder<T['indices']>;\n        this.dictionary = Builder.new({ 'type': this.type.dictionary, 'nullValues': null }) as Builder<T['dictionary']>;\n        if (typeof hashFn === 'function') {\n            this.valueToKey = hashFn;\n        }\n    }\n\n    public get values() { return this.indices.values; }\n    public get nullCount() { return this.indices.nullCount; }\n    public get nullBitmap() { return this.indices.nullBitmap; }\n    public get byteLength() { return this.indices.byteLength + this.dictionary.byteLength; }\n    public get reservedLength() { return this.indices.reservedLength + this.dictionary.reservedLength; }\n    public get reservedByteLength() { return this.indices.reservedByteLength + this.dictionary.reservedByteLength; }\n    public isValid(value: T['TValue'] | TNull) { return this.indices.isValid(value); }\n    public setValid(index: number, valid: boolean) {\n        const indices = this.indices;\n        valid = indices.setValid(index, valid);\n        this.length = indices.length;\n        return valid;\n    }\n    public setValue(index: number, value: T['TValue']) {\n        let keysToIndices = this._keysToIndices;\n        let key = this.valueToKey(value);\n        let idx = keysToIndices[key];\n        if (idx === undefined) {\n            keysToIndices[key] = idx = this._dictionaryOffset + this.dictionary.append(value).length - 1;\n        }\n        return this.indices.setValue(index, idx);\n    }\n    public flush() {\n        const type = this.type;\n        const prev = this._dictionary;\n        const curr = this.dictionary.toVector();\n        const data = this.indices.flush().clone(type);\n        data.dictionary = prev ? prev.concat(curr) : curr;\n        this.finished || (this._dictionaryOffset += curr.length);\n        this._dictionary = data.dictionary as Vector<T['dictionary']>;\n        this.clear();\n        return data;\n    }\n    public finish() {\n        this.indices.finish();\n        this.dictionary.finish();\n        this._dictionaryOffset = 0;\n        this._keysToIndices = Object.create(null);\n        return super.finish();\n    }\n    public clear() {\n        this.indices.clear();\n        this.dictionary.clear();\n        return super.clear();\n    }\n    public valueToKey(val: any): string | number {\n        return typeof val === 'string' ? val : `${val}`;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { FixedSizeBinary } from '../type';\nimport { FixedWidthBuilder } from '../builder';\n\n/** @ignore */\nexport class FixedSizeBinaryBuilder<TNull = any> extends FixedWidthBuilder<FixedSizeBinary, TNull> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nconst f64 = new Float64Array(1);\nconst u32 = new Uint32Array(f64.buffer);\n\n/**\n * Convert uint16 (logically a float16) to a JS float64. Inspired by numpy's `npy_half_to_double`:\n * https://github.com/numpy/numpy/blob/5a5987291dc95376bb098be8d8e5391e89e77a2c/numpy/core/src/npymath/halffloat.c#L29\n * @param h {number} the uint16 to convert\n * @private\n * @ignore\n */\nexport function uint16ToFloat64(h: number) {\n    let expo = (h & 0x7C00) >> 10;\n    let sigf = (h & 0x03FF) / 1024;\n    let sign = (-1) ** ((h & 0x8000) >> 15);\n    switch (expo) {\n        case 0x1F: return sign * (sigf ? NaN : 1 / 0);\n        case 0x00: return sign * (sigf ? 6.103515625e-5 * sigf : 0);\n    }\n    return sign * (2 ** (expo - 15)) * (1 + sigf);\n}\n\n/**\n * Convert a float64 to uint16 (assuming the float64 is logically a float16). Inspired by numpy's `npy_double_to_half`:\n * https://github.com/numpy/numpy/blob/5a5987291dc95376bb098be8d8e5391e89e77a2c/numpy/core/src/npymath/halffloat.c#L43\n * @param d {number} The float64 to convert\n * @private\n * @ignore\n */\nexport function float64ToUint16(d: number) {\n\n    if (d !== d) { return 0x7E00; } // NaN\n\n    f64[0] = d;\n\n    // Magic numbers:\n    // 0x80000000 = 10000000 00000000 00000000 00000000 -- masks the 32nd bit\n    // 0x7ff00000 = 01111111 11110000 00000000 00000000 -- masks the 21st-31st bits\n    // 0x000fffff = 00000000 00001111 11111111 11111111 -- masks the 1st-20th bit\n\n    let sign = (u32[1] & 0x80000000) >> 16 & 0xFFFF;\n    let expo = (u32[1] & 0x7ff00000), sigf = 0x0000;\n\n    if (expo >= 0x40f00000) {\n        //\n        // If exponent overflowed, the float16 is either NaN or Infinity.\n        // Rules to propagate the sign bit: mantissa > 0 ? NaN : +/-Infinity\n        //\n        // Magic numbers:\n        // 0x40F00000 = 01000000 11110000 00000000 00000000 -- 6-bit exponent overflow\n        // 0x7C000000 = 01111100 00000000 00000000 00000000 -- masks the 27th-31st bits\n        //\n        // returns:\n        // qNaN, aka 32256 decimal, 0x7E00 hex, or 01111110 00000000 binary\n        // sNaN, aka 32000 decimal, 0x7D00 hex, or 01111101 00000000 binary\n        // +inf, aka 31744 decimal, 0x7C00 hex, or 01111100 00000000 binary\n        // -inf, aka 64512 decimal, 0xFC00 hex, or 11111100 00000000 binary\n        //\n        // If mantissa is greater than 23 bits, set to +Infinity like numpy\n        if (u32[0] > 0) {\n            expo = 0x7C00;\n        } else {\n            expo = (expo & 0x7C000000) >> 16;\n            sigf = (u32[1] & 0x000fffff) >> 10;\n        }\n    } else if (expo <= 0x3f000000) {\n        //\n        // If exponent underflowed, the float is either signed zero or subnormal.\n        //\n        // Magic numbers:\n        // 0x3F000000 = 00111111 00000000 00000000 00000000 -- 6-bit exponent underflow\n        //\n        sigf = 0x100000 + (u32[1] & 0x000fffff);\n        sigf = 0x100000 + (sigf << ((expo >> 20) - 998)) >> 21;\n        expo = 0;\n    } else {\n        //\n        // No overflow or underflow, rebase the exponent and round the mantissa\n        // Magic numbers:\n        // 0x200 = 00000010 00000000 -- masks off the 10th bit\n        //\n\n        // Ensure the first mantissa bit (the 10th one) is 1 and round\n        expo = (expo - 0x3f000000) >> 10;\n        sigf = ((u32[1] & 0x000fffff) + 0x200) >> 10;\n    }\n\n    return sign | expo | sigf & 0xFFFF;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { float64ToUint16 } from '../util/math';\nimport { FixedWidthBuilder } from '../builder';\nimport { Float, Float16, Float32, Float64 } from '../type';\n\n/** @ignore */\nexport class FloatBuilder<T extends Float = Float, TNull = any> extends FixedWidthBuilder<T, TNull> {}\n\n/** @ignore */\nexport class Float16Builder<TNull = any> extends FloatBuilder<Float16, TNull> {\n    public setValue(index: number, value: number) {\n        // convert JS float64 to a uint16\n        this._values.set(index, float64ToUint16(value));\n    }\n}\n\n/** @ignore */\nexport class Float32Builder<TNull = any> extends FloatBuilder<Float32, TNull> {\n    public setValue(index: number, value: number) {\n        this._values.set(index, value);\n    }\n}\n\n/** @ignore */\nexport class Float64Builder<TNull = any> extends FloatBuilder<Float64, TNull> {\n    public setValue(index: number, value: number) {\n        this._values.set(index, value);\n    }\n}\n","import setPrototypeOf from \"./setPrototypeOf\";\nimport isNativeReflectConstruct from \"./isNativeReflectConstruct\";\nexport default function _construct(Parent, args, Class) {\n  if (isNativeReflectConstruct()) {\n    _construct = Reflect.construct;\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n\n  return _construct.apply(null, arguments);\n}","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { ArrayBufferViewInput, toArrayBufferView } from './buffer';\nimport { TypedArray, TypedArrayConstructor } from '../interfaces';\nimport { BigIntArray, BigIntArrayConstructor } from '../interfaces';\nimport { BigIntAvailable, BigInt64Array, BigUint64Array } from './compat';\n\n/** @ignore */\nexport const isArrowBigNumSymbol = Symbol.for('isArrowBigNum');\n\n/** @ignore */ type BigNumArray = IntArray | UintArray;\n/** @ignore */ type IntArray = Int8Array | Int16Array | Int32Array;\n/** @ignore */ type UintArray = Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray;\n\n/** @ignore */\nfunction BigNum(this: any, x: any, ...xs: any) {\n    if (xs.length === 0) {\n        return Object.setPrototypeOf(toArrayBufferView(this['TypedArray'], x), this.constructor.prototype);\n    }\n    return Object.setPrototypeOf(new this['TypedArray'](x, ...xs), this.constructor.prototype);\n}\n\nBigNum.prototype[isArrowBigNumSymbol] = true;\nBigNum.prototype.toJSON = function<T extends BN<BigNumArray>>(this: T) { return `\"${bignumToString(this)}\"`; };\nBigNum.prototype.valueOf = function<T extends BN<BigNumArray>>(this: T) { return bignumToNumber(this); };\nBigNum.prototype.toString = function<T extends BN<BigNumArray>>(this: T) { return bignumToString(this); };\nBigNum.prototype[Symbol.toPrimitive] = function<T extends BN<BigNumArray>>(this: T, hint: 'string' | 'number' | 'default' = 'default') {\n    switch (hint) {\n        case 'number': return bignumToNumber(this);\n        case 'string': return bignumToString(this);\n        case 'default': return bignumToBigInt(this);\n    }\n    return bignumToString(this);\n};\n\n/** @ignore */\ntype TypedArrayConstructorArgs =\n    [number | void] |\n    [Iterable<number> | Iterable<bigint>] |\n    [ArrayBufferLike, number | void, number | void] ;\n\n/** @ignore */\nfunction SignedBigNum(this: any, ...args: TypedArrayConstructorArgs) { return BigNum.apply(this, args); }\n/** @ignore */\nfunction UnsignedBigNum(this: any, ...args: TypedArrayConstructorArgs) { return BigNum.apply(this, args); }\n/** @ignore */\nfunction DecimalBigNum(this: any, ...args: TypedArrayConstructorArgs) { return BigNum.apply(this, args); }\n\nObject.setPrototypeOf(SignedBigNum.prototype,   Object.create(Int32Array.prototype));\nObject.setPrototypeOf(UnsignedBigNum.prototype, Object.create(Uint32Array.prototype));\nObject.setPrototypeOf(DecimalBigNum.prototype,  Object.create(Uint32Array.prototype));\nObject.assign(SignedBigNum.prototype,   BigNum.prototype, { 'constructor': SignedBigNum,   'signed': true,  'TypedArray': Int32Array,  'BigIntArray': BigInt64Array  });\nObject.assign(UnsignedBigNum.prototype, BigNum.prototype, { 'constructor': UnsignedBigNum, 'signed': false, 'TypedArray': Uint32Array, 'BigIntArray': BigUint64Array });\nObject.assign(DecimalBigNum.prototype,  BigNum.prototype, { 'constructor': DecimalBigNum,  'signed': true,  'TypedArray': Uint32Array, 'BigIntArray': BigUint64Array });\n\n/** @ignore */\nfunction bignumToNumber<T extends BN<BigNumArray>>(bn: T) {\n    let { buffer, byteOffset, length, 'signed': signed } = bn;\n    let words = new Int32Array(buffer, byteOffset, length);\n    let number = 0, i = 0, n = words.length, hi, lo;\n    while (i < n) {\n        lo = words[i++];\n        hi = words[i++];\n        signed || (hi = hi >>> 0);\n        number += (lo >>> 0) + (hi * (i ** 32));\n    }\n    return number;\n}\n\n/** @ignore */\nexport let bignumToString: { <T extends BN<BigNumArray>>(a: T): string; };\n/** @ignore */\nexport let bignumToBigInt: { <T extends BN<BigNumArray>>(a: T): bigint; };\n\nif (!BigIntAvailable) {\n    bignumToString = decimalToString;\n    bignumToBigInt = <any> bignumToString;\n} else {\n    bignumToBigInt = (<T extends BN<BigNumArray>>(a: T) => a.byteLength === 8 ? new a['BigIntArray'](a.buffer, a.byteOffset, 1)[0] : <any>decimalToString(a));\n    bignumToString = (<T extends BN<BigNumArray>>(a: T) => a.byteLength === 8 ? `${new a['BigIntArray'](a.buffer, a.byteOffset, 1)[0]}` : decimalToString(a));\n}\n\n/** @ignore */\nfunction decimalToString<T extends BN<BigNumArray>>(a: T) {\n    let digits = '';\n    let base64 = new Uint32Array(2);\n    let base32 = new Uint16Array(a.buffer, a.byteOffset, a.byteLength / 2);\n    let checks = new Uint32Array((base32 = new Uint16Array(base32).reverse()).buffer);\n    let i = -1, n = base32.length - 1;\n    do {\n        for (base64[0] = base32[i = 0]; i < n;) {\n            base32[i++] = base64[1] = base64[0] / 10;\n            base64[0] = ((base64[0] - base64[1] * 10) << 16) + base32[i];\n        }\n        base32[i] = base64[1] = base64[0] / 10;\n        base64[0] = base64[0] - base64[1] * 10;\n        digits = `${base64[0]}${digits}`;\n    } while (checks[0] || checks[1] || checks[2] || checks[3]);\n    return digits ? digits : `0`;\n}\n\n/** @ignore */\nexport class BN<T extends BigNumArray> {\n    /** @nocollapse */\n    public static new<T extends BigNumArray>(num: T, isSigned?: boolean): (T & BN<T>) {\n        switch (isSigned) {\n            case true: return new (<any> SignedBigNum)(num) as (T & BN<T>);\n            case false: return new (<any> UnsignedBigNum)(num) as (T & BN<T>);\n        }\n        switch (num.constructor) {\n            case Int8Array:\n            case Int16Array:\n            case Int32Array:\n            case BigInt64Array:\n                return new (<any> SignedBigNum)(num) as (T & BN<T>);\n        }\n        if (num.byteLength === 16) {\n            return new (<any> DecimalBigNum)(num) as (T & BN<T>);\n        }\n        return new (<any> UnsignedBigNum)(num) as (T & BN<T>);\n    }\n    /** @nocollapse */\n    public static signed<T extends IntArray>(num: T): (T & BN<T>) {\n        return new (<any> SignedBigNum)(num) as (T & BN<T>);\n    }\n    /** @nocollapse */\n    public static unsigned<T extends UintArray>(num: T): (T & BN<T>) {\n        return new (<any> UnsignedBigNum)(num) as (T & BN<T>);\n    }\n    /** @nocollapse */\n    public static decimal<T extends UintArray>(num: T): (T & BN<T>) {\n        return new (<any> DecimalBigNum)(num) as (T & BN<T>);\n    }\n    constructor(num: T, isSigned?: boolean) {\n        return BN.new(num, isSigned) as any;\n    }\n}\n\n/** @ignore */\nexport interface BN<T extends BigNumArray> extends TypedArrayLike<T> {\n\n    new<T extends ArrayBufferViewInput>(buffer: T, signed?: boolean): T;\n\n    readonly signed: boolean;\n    readonly TypedArray: TypedArrayConstructor<TypedArray>;\n    readonly BigIntArray: BigIntArrayConstructor<BigIntArray>;\n\n    [Symbol.toStringTag]:\n        'Int8Array'         |\n        'Int16Array'        |\n        'Int32Array'        |\n        'Uint8Array'        |\n        'Uint16Array'       |\n        'Uint32Array'       |\n        'Uint8ClampedArray';\n\n    /**\n     * Convert the bytes to their (positive) decimal representation for printing\n     */\n    toString(): string;\n    /**\n     * Down-convert the bytes to a 53-bit precision integer. Invoked by JS for\n     * arithmetic operators, like `+`. Easy (and unsafe) way to convert BN to\n     * number via `+bn_inst`\n     */\n    valueOf(): number;\n    /**\n     * Return the JSON representation of the bytes. Must be wrapped in double-quotes,\n     * so it's compatible with JSON.stringify().\n     */\n    toJSON(): string;\n    [Symbol.toPrimitive](hint?: any): number | string | bigint;\n}\n\n/** @ignore */\ninterface TypedArrayLike<T extends BigNumArray> {\n\n    readonly length: number;\n    readonly buffer: ArrayBuffer;\n    readonly byteLength: number;\n    readonly byteOffset: number;\n    readonly BYTES_PER_ELEMENT: number;\n\n    includes(searchElement: number, fromIndex?: number | undefined): boolean;\n    copyWithin(target: number, start: number, end?: number | undefined): this;\n    every(callbackfn: (value: number, index: number, array: T) => boolean, thisArg?: any): boolean;\n    fill(value: number, start?: number | undefined, end?: number | undefined): this;\n    filter(callbackfn: (value: number, index: number, array: T) => boolean, thisArg?: any): T;\n    find(predicate: (value: number, index: number, obj: T) => boolean, thisArg?: any): number | undefined;\n    findIndex(predicate: (value: number, index: number, obj: T) => boolean, thisArg?: any): number;\n    forEach(callbackfn: (value: number, index: number, array: T) => void, thisArg?: any): void;\n    indexOf(searchElement: number, fromIndex?: number | undefined): number;\n    join(separator?: string | undefined): string;\n    lastIndexOf(searchElement: number, fromIndex?: number | undefined): number;\n    map(callbackfn: (value: number, index: number, array: T) => number, thisArg?: any): T;\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: T) => number): number;\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: T) => number, initialValue: number): number;\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: T) => U, initialValue: U): U;\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: T) => number): number;\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: T) => number, initialValue: number): number;\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: T) => U, initialValue: U): U;\n    reverse(): T;\n    set(array: ArrayLike<number>, offset?: number | undefined): void;\n    slice(start?: number | undefined, end?: number | undefined): T;\n    some(callbackfn: (value: number, index: number, array: T) => boolean, thisArg?: any): boolean;\n    sort(compareFn?: ((a: number, b: number) => number) | undefined): this;\n    subarray(begin: number, end?: number | undefined): T;\n    toLocaleString(): string;\n    entries(): IterableIterator<[number, number]>;\n    keys(): IterableIterator<number>;\n    values(): IterableIterator<number>;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { bignumToBigInt } from '../util/bn';\nimport { WideBufferBuilder } from './buffer';\nimport { BigInt64Array } from '../util/compat';\nimport { FixedWidthBuilder, BuilderOptions } from '../builder';\nimport { Int, Int8, Int16, Int32, Int64, Uint8, Uint16, Uint32, Uint64 } from '../type';\n\n/** @ignore */\nexport class IntBuilder<T extends Int = Int, TNull = any> extends FixedWidthBuilder<T, TNull> {\n    public setValue(index: number, value: T['TValue']) {\n        this._values.set(index, value);\n    }\n}\n\n/** @ignore */\nexport class Int8Builder<TNull = any> extends IntBuilder<Int8, TNull> {}\n/** @ignore */\nexport class Int16Builder<TNull = any> extends IntBuilder<Int16, TNull> {}\n/** @ignore */\nexport class Int32Builder<TNull = any> extends IntBuilder<Int32, TNull> {}\n/** @ignore */\nexport class Int64Builder<TNull = any> extends IntBuilder<Int64, TNull> {\n    protected _values: WideBufferBuilder<Int32Array, BigInt64Array>;\n    constructor(options: BuilderOptions<Int64, TNull>) {\n        if (options['nullValues']) {\n            options['nullValues'] = (options['nullValues'] as TNull[]).map(toBigInt);\n        }\n        super(options);\n        this._values = new WideBufferBuilder(new Int32Array(0), 2);\n    }\n    public get values64() { return this._values.buffer64; }\n    public isValid(value: Int32Array | bigint | TNull) { return super.isValid(toBigInt(value)); }\n}\n\n/** @ignore */\nexport class Uint8Builder<TNull = any> extends IntBuilder<Uint8, TNull> {}\n/** @ignore */\nexport class Uint16Builder<TNull = any> extends IntBuilder<Uint16, TNull> {}\n/** @ignore */\nexport class Uint32Builder<TNull = any> extends IntBuilder<Uint32, TNull> {}\n/** @ignore */\nexport class Uint64Builder<TNull = any> extends IntBuilder<Uint64, TNull> {\n    protected _values: WideBufferBuilder<Uint32Array, BigUint64Array>;\n    constructor(options: BuilderOptions<Uint64, TNull>) {\n        if (options['nullValues']) {\n            options['nullValues'] = (options['nullValues'] as TNull[]).map(toBigInt);\n        }\n        super(options);\n        this._values = new WideBufferBuilder(new Uint32Array(0), 2);\n    }\n    public get values64() { return this._values.buffer64; }\n    public isValid(value: Uint32Array | bigint | TNull) { return super.isValid(toBigInt(value)); }\n}\n\nconst toBigInt = ((memo: any) => (value: any) => {\n    if (ArrayBuffer.isView(value)) {\n        memo.buffer = value.buffer;\n        memo.byteOffset = value.byteOffset;\n        memo.byteLength = value.byteLength;\n        value = bignumToBigInt(memo);\n        memo.buffer = null;\n    }\n    return value;\n})({ 'BigIntArray': BigInt64Array });\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { FixedWidthBuilder } from '../builder';\nimport { Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond } from '../type';\n\n/** @ignore */\nexport class TimeBuilder<T extends Time = Time, TNull = any> extends FixedWidthBuilder<T, TNull> {}\n/** @ignore */\nexport class TimeSecondBuilder<TNull = any> extends TimeBuilder<TimeSecond, TNull> {}\n/** @ignore */\nexport class TimeMillisecondBuilder<TNull = any> extends TimeBuilder<TimeMillisecond, TNull> {}\n/** @ignore */\nexport class TimeMicrosecondBuilder<TNull = any> extends TimeBuilder<TimeMicrosecond, TNull> {}\n/** @ignore */\nexport class TimeNanosecondBuilder<TNull = any> extends TimeBuilder<TimeNanosecond, TNull> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { FixedWidthBuilder } from '../builder';\nimport { Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond } from '../type';\n\n/** @ignore */\nexport class TimestampBuilder<T extends Timestamp = Timestamp, TNull = any> extends FixedWidthBuilder<T, TNull> {}\n/** @ignore */\nexport class TimestampSecondBuilder<TNull = any> extends TimestampBuilder<TimestampSecond, TNull> {}\n/** @ignore */\nexport class TimestampMillisecondBuilder<TNull = any> extends TimestampBuilder<TimestampMillisecond, TNull> {}\n/** @ignore */\nexport class TimestampMicrosecondBuilder<TNull = any> extends TimestampBuilder<TimestampMicrosecond, TNull> {}\n/** @ignore */\nexport class TimestampNanosecondBuilder<TNull = any> extends TimestampBuilder<TimestampNanosecond, TNull> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { FixedWidthBuilder } from '../builder';\nimport { Interval, IntervalDayTime, IntervalYearMonth } from '../type';\n\n/** @ignore */\nexport class IntervalBuilder<T extends Interval = Interval, TNull = any> extends FixedWidthBuilder<T, TNull> {}\n/** @ignore */\nexport class IntervalDayTimeBuilder<TNull = any> extends IntervalBuilder<IntervalDayTime, TNull> {}\n/** @ignore */\nexport class IntervalYearMonthBuilder<TNull = any> extends IntervalBuilder<IntervalYearMonth, TNull> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Binary } from '../type';\nimport { toUint8Array } from '../util/buffer';\nimport { BufferBuilder } from './buffer';\nimport { VariableWidthBuilder, BuilderOptions } from '../builder';\n\n/** @ignore */\nexport class BinaryBuilder<TNull = any> extends VariableWidthBuilder<Binary, TNull> {\n    constructor(opts: BuilderOptions<Binary, TNull>) {\n        super(opts);\n        this._values = new BufferBuilder(new Uint8Array(0));\n    }\n    public get byteLength(): number {\n        let size = this._pendingLength + (this.length * 4);\n        this._offsets && (size += this._offsets.byteLength);\n        this._values && (size += this._values.byteLength);\n        this._nulls && (size += this._nulls.byteLength);\n        return size;\n    }\n    public setValue(index: number, value: Uint8Array) {\n        return super.setValue(index, toUint8Array(value));\n    }\n    protected _flushPending(pending: Map<number, Uint8Array | undefined>, pendingLength: number) {\n        const offsets = this._offsets;\n        const data = this._values.reserve(pendingLength).buffer;\n        let index = 0, length = 0, offset = 0, value: Uint8Array | undefined;\n        for ([index, value] of pending) {\n            if (value === undefined) {\n                offsets.set(index, 0);\n            } else {\n                length = value.length;\n                data.set(value, offset);\n                offsets.set(index, length);\n                offset += length;\n            }\n        }\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Utf8 } from '../type';\nimport { encodeUtf8 } from '../util/utf8';\nimport { BinaryBuilder } from './binary';\nimport { BufferBuilder } from './buffer';\nimport { VariableWidthBuilder, BuilderOptions } from '../builder';\n\n/** @ignore */\nexport class Utf8Builder<TNull = any> extends VariableWidthBuilder<Utf8, TNull> {\n    constructor(opts: BuilderOptions<Utf8, TNull>) {\n        super(opts);\n        this._values = new BufferBuilder(new Uint8Array(0));\n    }\n    public get byteLength(): number {\n        let size = this._pendingLength + (this.length * 4);\n        this._offsets && (size += this._offsets.byteLength);\n        this._values && (size += this._values.byteLength);\n        this._nulls && (size += this._nulls.byteLength);\n        return size;\n    }\n    public setValue(index: number, value: string) {\n        return super.setValue(index, encodeUtf8(value) as any);\n    }\n    // @ts-ignore\n    protected _flushPending(pending: Map<number, Uint8Array | undefined>, pendingLength: number): void {}\n}\n\n(Utf8Builder.prototype as any)._flushPending = (BinaryBuilder.prototype as any)._flushPending;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\n\n/** @ignore */\nexport class Run<T extends DataType = any, TNull = any> {\n    // @ts-ignore\n    protected _values: ArrayLike<T['TValue'] | TNull>;\n    public get length() { return this._values.length; }\n    public get(index: number) { return this._values[index]; }\n    public clear() { this._values = <any> null; return this; }\n    public bind(values: Vector<T> | ArrayLike<T['TValue'] | TNull>) {\n        if (values instanceof Vector) {\n            return values;\n        }\n        this._values = values;\n        return this as any;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { StructVector } from './struct';\nimport { valueToString } from '../util/pretty';\nimport { DataType, Struct, RowLike } from '../type';\n\n/** @ignore */ const kParent = Symbol.for('parent');\n/** @ignore */ const kRowIndex = Symbol.for('rowIndex');\n/** @ignore */ const kKeyToIdx = Symbol.for('keyToIdx');\n/** @ignore */ const kIdxToVal = Symbol.for('idxToVal');\n/** @ignore */ const kCustomInspect = Symbol.for('nodejs.util.inspect.custom');\n\nabstract class Row<K extends PropertyKey = any, V = any> implements Map<K, V> {\n\n    public readonly size: number;\n    public readonly [Symbol.toStringTag]: string;\n\n    protected [kRowIndex]: number;\n    protected [kParent]: Vector<Struct>;\n    protected [kKeyToIdx]: Map<K, number>;\n    protected [kIdxToVal]: V[];\n\n    constructor(parent: Vector<Struct>, numKeys: number) {\n        this[kParent] = parent;\n        this.size = numKeys;\n    }\n\n    public abstract keys(): IterableIterator<K>;\n    public abstract values(): IterableIterator<V>;\n    public abstract getKey(idx: number): K;\n    public abstract getIndex(key: K): number;\n    public abstract getValue(idx: number): V;\n    public abstract setValue(idx: number, val: V): void;\n\n    public entries() { return this[Symbol.iterator](); }\n\n    public has(key: K) { return this.get(key) !== undefined; }\n\n    public get(key: K) {\n        let val = undefined;\n        if (key !== null && key !== undefined) {\n            const ktoi = this[kKeyToIdx] || (this[kKeyToIdx] = new Map());\n            let idx = ktoi.get(key);\n            if (idx !== undefined) {\n                const itov = this[kIdxToVal] || (this[kIdxToVal] = new Array(this.size));\n                ((val = itov[idx]) !== undefined) || (itov[idx] = val = this.getValue(idx));\n            } else if ((idx = this.getIndex(key)) > -1) {\n                ktoi.set(key, idx);\n                const itov = this[kIdxToVal] || (this[kIdxToVal] = new Array(this.size));\n                ((val = itov[idx]) !== undefined) || (itov[idx] = val = this.getValue(idx));\n            }\n        }\n        return val;\n    }\n\n    public set(key: K, val: V) {\n        if (key !== null && key !== undefined) {\n            const ktoi = this[kKeyToIdx] || (this[kKeyToIdx] = new Map());\n            let idx = ktoi.get(key);\n            if (idx === undefined) {\n                ktoi.set(key, idx = this.getIndex(key));\n            }\n            if (idx > -1) {\n                const itov = this[kIdxToVal] || (this[kIdxToVal] = new Array(this.size));\n                itov[idx] = <any> this.setValue(idx, val);\n            }\n        }\n        return this;\n    }\n\n    public clear(): void { throw new Error(`Clearing ${this[Symbol.toStringTag]} not supported.`); }\n\n    public delete(_: K): boolean { throw new Error(`Deleting ${this[Symbol.toStringTag]} values not supported.`); }\n\n    public *[Symbol.iterator](): IterableIterator<[K, V]> {\n\n        const ki = this.keys();\n        const vi = this.values();\n        const ktoi = this[kKeyToIdx] || (this[kKeyToIdx] = new Map());\n        const itov = this[kIdxToVal] || (this[kIdxToVal] = new Array(this.size));\n\n        for (let k: K, v: V, i = 0, kr: IteratorResult<K>, vr: IteratorResult<V>;\n            !((kr = ki.next()).done || (vr = vi.next()).done);\n            ++i\n        ) {\n            k = kr.value;\n            v = vr.value;\n            itov[i] = v;\n            ktoi.has(k) || ktoi.set(k, i);\n            yield [k, v];\n        }\n    }\n\n    public forEach(callbackfn: (value: V, key: K, map: Map<K, V>) => void, thisArg?: any): void {\n\n        const ki = this.keys();\n        const vi = this.values();\n        const callback = thisArg === undefined ? callbackfn :\n            (v: V, k: K, m: Map<K, V>) => callbackfn.call(thisArg, v, k, m);\n        const ktoi = this[kKeyToIdx] || (this[kKeyToIdx] = new Map());\n        const itov = this[kIdxToVal] || (this[kIdxToVal] = new Array(this.size));\n\n        for (let k: K, v: V, i = 0, kr: IteratorResult<K>, vr: IteratorResult<V>;\n            !((kr = ki.next()).done || (vr = vi.next()).done);\n            ++i\n        ) {\n            k = kr.value;\n            v = vr.value;\n            itov[i] = v;\n            ktoi.has(k) || ktoi.set(k, i);\n            callback(v, k, this);\n        }\n    }\n\n    public toArray() { return [...this.values()]; }\n    public toJSON() {\n        const obj = {} as any;\n        this.forEach((val, key) => obj[key] = val);\n        return obj;\n    }\n\n    public inspect() { return this.toString(); }\n    public [kCustomInspect]() { return this.toString(); }\n    public toString() {\n        const str: string[] = [];\n        this.forEach((val, key) => {\n            key = valueToString(key);\n            val = valueToString(val);\n            str.push(`${key}: ${val}`);\n        });\n        return `{ ${str.join(', ')} }`;\n    }\n\n    protected static [Symbol.toStringTag] = ((proto: Row) => {\n        Object.defineProperties(proto, {\n            'size': { writable: true, enumerable: false, configurable: false, value: 0 },\n            [kParent]: { writable: true, enumerable: false, configurable: false, value: null },\n            [kRowIndex]: { writable: true, enumerable: false, configurable: false, value: -1 },\n        });\n        return (proto as any)[Symbol.toStringTag] = 'Row';\n    })(Row.prototype);\n}\n\nexport class MapRow<K extends DataType = any, V extends DataType = any> extends Row<K['TValue'], V['TValue'] | null> {\n    constructor(slice: Vector<Struct<{ key: K, value: V }>>) {\n        super(slice, slice.length);\n        return createRowProxy(this);\n    }\n    public keys() {\n        return this[kParent].getChildAt(0)![Symbol.iterator]();\n    }\n    public values() {\n        return this[kParent].getChildAt(1)![Symbol.iterator]();\n    }\n    public getKey(idx: number): K['TValue'] {\n        return this[kParent].getChildAt(0)!.get(idx);\n    }\n    public getIndex(key: K['TValue']): number {\n        return this[kParent].getChildAt(0)!.indexOf(key);\n    }\n    public getValue(index: number): V['TValue'] | null {\n        return this[kParent].getChildAt(1)!.get(index);\n    }\n    public setValue(index: number, value: V['TValue'] | null): void {\n        this[kParent].getChildAt(1)!.set(index, value);\n    }\n}\n\nexport class StructRow<T extends { [key: string]: DataType } = any> extends Row<keyof T, T[keyof T]['TValue'] | null> {\n    constructor(parent: StructVector<T>) {\n        super(parent, parent.type.children.length);\n        return defineRowProxyProperties(this);\n    }\n    public *keys() {\n        for (const field of this[kParent].type.children) {\n            yield field.name as keyof T;\n        }\n    }\n    public *values() {\n        for (const field of this[kParent].type.children) {\n            yield (this as RowLike<T>)[field.name];\n        }\n    }\n    public getKey(idx: number): keyof T {\n        return this[kParent].type.children[idx].name as keyof T;\n    }\n    public getIndex(key: keyof T): number {\n        return this[kParent].type.children.findIndex((f) => f.name === key);\n    }\n    public getValue(index: number): T[keyof T]['TValue'] | null {\n        return this[kParent].getChildAt(index)!.get(this[kRowIndex]);\n    }\n    public setValue(index: number, value: T[keyof T]['TValue'] | null): void {\n        return this[kParent].getChildAt(index)!.set(this[kRowIndex], value);\n    }\n}\n\nObject.setPrototypeOf(Row.prototype, Map.prototype);\n\n/** @ignore */\nconst defineRowProxyProperties = (() => {\n    const desc = { enumerable: true, configurable: false, get: null as any, set: null as any };\n    return <T extends Row>(row: T) => {\n        let idx = -1, ktoi = row[kKeyToIdx] || (row[kKeyToIdx] = new Map());\n        const getter = (key: any) => function(this: T) { return this.get(key); };\n        const setter = (key: any) => function(this: T, val: any) { return this.set(key, val); };\n        for (const key of row.keys()) {\n            ktoi.set(key, ++idx);\n            desc.get = getter(key);\n            desc.set = setter(key);\n            row.hasOwnProperty(key) || (desc.enumerable = true, Object.defineProperty(row, key, desc));\n            row.hasOwnProperty(idx) || (desc.enumerable = false, Object.defineProperty(row, idx, desc));\n        }\n        desc.get = desc.set = null;\n        return row;\n    };\n})();\n\n/** @ignore */\nconst createRowProxy = (() => {\n    if (typeof Proxy === 'undefined') {\n        return defineRowProxyProperties;\n    }\n    const has = Row.prototype.has;\n    const get = Row.prototype.get;\n    const set = Row.prototype.set;\n    const getKey = Row.prototype.getKey;\n    const RowProxyHandler: ProxyHandler<Row> = {\n        isExtensible() { return false; },\n        deleteProperty() { return false; },\n        preventExtensions() { return true; },\n        ownKeys(row: Row) { return [...row.keys()].map((x) => `${x}`); },\n        has(row: Row, key: PropertyKey) {\n            switch (key) {\n                case 'getKey': case 'getIndex': case 'getValue': case 'setValue': case 'toArray': case 'toJSON': case 'inspect':\n                case 'constructor': case 'isPrototypeOf': case 'propertyIsEnumerable': case 'toString': case 'toLocaleString': case 'valueOf':\n                case 'size': case 'has': case 'get': case 'set': case 'clear': case 'delete': case 'keys': case 'values': case 'entries': case 'forEach':\n                case '__proto__': case '__defineGetter__': case '__defineSetter__': case 'hasOwnProperty': case '__lookupGetter__': case '__lookupSetter__':\n                case Symbol.iterator: case Symbol.toStringTag: case kParent: case kRowIndex: case kIdxToVal: case kKeyToIdx: case kCustomInspect:\n                    return true;\n            }\n            if (typeof key === 'number' && !row.has(key)) {\n                key = row.getKey(key);\n            }\n            return row.has(key);\n        },\n        get(row: Row, key: PropertyKey, receiver: any) {\n            switch (key) {\n                case 'getKey': case 'getIndex': case 'getValue': case 'setValue': case 'toArray': case 'toJSON': case 'inspect':\n                case 'constructor': case 'isPrototypeOf': case 'propertyIsEnumerable': case 'toString': case 'toLocaleString': case 'valueOf':\n                case 'size': case 'has': case 'get': case 'set': case 'clear': case 'delete': case 'keys': case 'values': case 'entries': case 'forEach':\n                case '__proto__': case '__defineGetter__': case '__defineSetter__': case 'hasOwnProperty': case '__lookupGetter__': case '__lookupSetter__':\n                case Symbol.iterator: case Symbol.toStringTag: case kParent: case kRowIndex: case kIdxToVal: case kKeyToIdx: case kCustomInspect:\n                    return Reflect.get(row, key, receiver);\n            }\n            if (typeof key === 'number' && !has.call(receiver, key)) {\n                key = getKey.call(receiver, key);\n            }\n            return get.call(receiver, key);\n        },\n        set(row: Row, key: PropertyKey, val: any, receiver: any) {\n            switch (key) {\n                case kParent: case kRowIndex: case kIdxToVal: case kKeyToIdx:\n                    return Reflect.set(row, key, val, receiver);\n                case 'getKey': case 'getIndex': case 'getValue': case 'setValue': case 'toArray': case 'toJSON': case 'inspect':\n                case 'constructor': case 'isPrototypeOf': case 'propertyIsEnumerable': case 'toString': case 'toLocaleString': case 'valueOf':\n                case 'size': case 'has': case 'get': case 'set': case 'clear': case 'delete': case 'keys': case 'values': case 'entries': case 'forEach':\n                case '__proto__': case '__defineGetter__': case '__defineSetter__': case 'hasOwnProperty': case '__lookupGetter__': case '__lookupSetter__':\n                case Symbol.iterator: case Symbol.toStringTag:\n                    return false;\n            }\n            if (typeof key === 'number' && !has.call(receiver, key)) {\n                key = getKey.call(receiver, key);\n            }\n            return has.call(receiver, key) ? !!set.call(receiver, key, val) : false;\n        },\n    };\n    return <T extends Row>(row: T) => new Proxy(row, RowProxyHandler) as T;\n})();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { MapRow, StructRow } from '../vector/row';\nimport { compareArrayLike } from '../util/buffer';\nimport { BigInt, BigIntAvailable } from './compat';\n\n/** @ignore */\ntype RangeLike = { length: number; stride?: number };\n/** @ignore */\ntype ClampThen<T extends RangeLike> = (source: T, index: number) => any;\n/** @ignore */\ntype ClampRangeThen<T extends RangeLike> = (source: T, offset: number, length: number) => any;\n\nexport function clampIndex<T extends RangeLike>(source: T, index: number): number;\nexport function clampIndex<T extends RangeLike, N extends ClampThen<T> = ClampThen<T>>(source: T, index: number, then: N): ReturnType<N>;\n/** @ignore */\nexport function clampIndex<T extends RangeLike, N extends ClampThen<T> = ClampThen<T>>(source: T, index: number, then?: N) {\n    const length = source.length;\n    const adjust = index > -1 ? index : (length + (index % length));\n    return then ? then(source, adjust) : adjust;\n}\n\n/** @ignore */\nlet tmp: number;\nexport function clampRange<T extends RangeLike>(source: T, begin: number | undefined, end: number | undefined): [number, number];\nexport function clampRange<T extends RangeLike, N extends ClampRangeThen<T> = ClampRangeThen<T>>(source: T, begin: number | undefined, end: number | undefined, then: N): ReturnType<N>;\n/** @ignore */\nexport function clampRange<T extends RangeLike, N extends ClampRangeThen<T> = ClampRangeThen<T>>(source: T, begin: number | undefined, end: number | undefined, then?: N) {\n\n    // Adjust args similar to Array.prototype.slice. Normalize begin/end to\n    // clamp between 0 and length, and wrap around on negative indices, e.g.\n    // slice(-1, 5) or slice(5, -1)\n    let { length: len = 0 } = source;\n    let lhs = typeof begin !== 'number' ? 0 : begin;\n    let rhs = typeof end !== 'number' ? len : end;\n    // wrap around on negative start/end positions\n    (lhs < 0) && (lhs = ((lhs % len) + len) % len);\n    (rhs < 0) && (rhs = ((rhs % len) + len) % len);\n    // ensure lhs <= rhs\n    (rhs < lhs) && (tmp = lhs, lhs = rhs, rhs = tmp);\n     // ensure rhs <= length\n    (rhs > len) && (rhs = len);\n\n    return then ? then(source, lhs, rhs) : [lhs, rhs];\n}\n\nconst big0 = BigIntAvailable ? BigInt(0) : 0;\nconst isNaNFast = (value: any) => value !== value;\n\n/** @ignore */\nexport function createElementComparator(search: any) {\n    let typeofSearch = typeof search;\n    // Compare primitives\n    if (typeofSearch !== 'object' || search === null) {\n        // Compare NaN\n        if (isNaNFast(search)) {\n            return isNaNFast;\n        }\n        return typeofSearch !== 'bigint'\n            ? (value: any) => value === search\n            : (value: any) => (big0 + value) === search;\n    }\n    // Compare Dates\n    if (search instanceof Date) {\n        const valueOfSearch = search.valueOf();\n        return (value: any) => value instanceof Date ? (value.valueOf() === valueOfSearch) : false;\n    }\n    // Compare TypedArrays\n    if (ArrayBuffer.isView(search)) {\n        return (value: any) => value ? compareArrayLike(search, value) : false;\n    }\n    // Compare Maps and Rows\n    if (search instanceof Map) { return creatMapComparator(search); }\n    // Compare Array-likes\n    if (Array.isArray(search)) { return createArrayLikeComparator(search); }\n    // Compare Vectors\n    if (search instanceof Vector) { return createVectorComparator(search); }\n    // Compare non-empty Objects\n    return createObjectComparator(search);\n}\n\n/** @ignore */\nfunction createArrayLikeComparator(lhs: ArrayLike<any>) {\n    const comparators = [] as ((x: any) => boolean)[];\n    for (let i = -1, n = lhs.length; ++i < n;) {\n        comparators[i] = createElementComparator(lhs[i]);\n    }\n    return createSubElementsComparator(comparators);\n}\n\n/** @ignore */\nfunction creatMapComparator(lhs: Map<any, any>) {\n    let i = -1;\n    const comparators = [] as ((x: any) => boolean)[];\n    lhs.forEach((v) => comparators[++i] = createElementComparator(v));\n    return createSubElementsComparator(comparators);\n}\n\n/** @ignore */\nfunction createVectorComparator(lhs: Vector<any>) {\n    const comparators = [] as ((x: any) => boolean)[];\n    for (let i = -1, n = lhs.length; ++i < n;) {\n        comparators[i] = createElementComparator(lhs.get(i));\n    }\n    return createSubElementsComparator(comparators);\n}\n\n/** @ignore */\nfunction createObjectComparator(lhs: any) {\n    const keys = Object.keys(lhs);\n    // Only compare non-empty Objects\n    if (keys.length === 0) { return () => false; }\n    const comparators = [] as ((x: any) => boolean)[];\n    for (let i = -1, n = keys.length; ++i < n;) {\n        comparators[i] = createElementComparator(lhs[keys[i]]);\n    }\n    return createSubElementsComparator(comparators, keys);\n}\n\nfunction createSubElementsComparator(comparators: ((x: any) => boolean)[], keys?: Iterable<string>) {\n    return (rhs: any) => {\n        if (!rhs || typeof rhs !== 'object') {\n            return false;\n        }\n        switch (rhs.constructor) {\n            case Array: return compareArray(comparators, rhs);\n            case Map:\n            case MapRow:\n            case StructRow:\n                return compareObject(comparators, rhs, rhs.keys());\n            case Object:\n            case undefined: // support `Object.create(null)` objects\n                return compareObject(comparators, rhs, keys || Object.keys(rhs));\n        }\n        return rhs instanceof Vector ? compareVector(comparators, rhs) : false;\n    };\n}\n\nfunction compareArray(comparators: ((x: any) => boolean)[], arr: any[]) {\n    const n = comparators.length;\n    if (arr.length !== n) { return false; }\n    for (let i = -1; ++i < n;) {\n        if (!(comparators[i](arr[i]))) { return false; }\n    }\n    return true;\n}\n\nfunction compareVector(comparators: ((x: any) => boolean)[], vec: Vector) {\n    const n = comparators.length;\n    if (vec.length !== n) { return false; }\n    for (let i = -1; ++i < n;) {\n        if (!(comparators[i](vec.get(i)))) { return false; }\n    }\n    return true;\n}\n\nfunction compareObject(comparators: ((x: any) => boolean)[], obj: Map<any, any>, keys: Iterable<string>) {\n\n    const lKeyItr = keys[Symbol.iterator]();\n    const rKeyItr = obj instanceof Map ? obj.keys() : Object.keys(obj)[Symbol.iterator]();\n    const rValItr = obj instanceof Map ? obj.values() : Object.values(obj)[Symbol.iterator]();\n\n    let i = 0;\n    let n = comparators.length;\n    let rVal = rValItr.next();\n    let lKey = lKeyItr.next();\n    let rKey = rKeyItr.next();\n\n    for (; i < n && !lKey.done && !rKey.done && !rVal.done;\n         ++i, lKey = lKeyItr.next(), rKey = rKeyItr.next(), rVal = rValItr.next()) {\n        if (lKey.value !== rKey.value || !comparators[i](rVal.value)) {\n            break;\n        }\n    }\n    if (i === n && lKey.done && rKey.done && rVal.done) {\n        return true;\n    }\n    lKeyItr.return && lKeyItr.return();\n    rKeyItr.return && rKeyItr.return();\n    rValItr.return && rValItr.return();\n    return false;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Field } from '../schema';\nimport { clampRange } from '../util/vector';\nimport { DataType, Dictionary } from '../type';\nimport { selectChunkArgs } from '../util/args';\nimport { DictionaryVector } from './dictionary';\nimport { AbstractVector, Vector } from '../vector';\nimport { Clonable, Sliceable, Applicative } from '../vector';\n\n/** @ignore */\ntype ChunkedDict<T extends DataType> = T extends Dictionary ? Vector<T['dictionary']> : null | never;\n/** @ignore */\ntype ChunkedKeys<T extends DataType> = T extends Dictionary ? Vector<T['indices']> | Chunked<T['indices']> : null | never;\n\n/** @ignore */\nexport type SearchContinuation<T extends Chunked> = (column: T, chunkIndex: number, valueIndex: number) => any;\n\n/** @ignore */\nexport class Chunked<T extends DataType = any>\n    extends AbstractVector<T>\n    implements Clonable<Chunked<T>>,\n               Sliceable<Chunked<T>>,\n               Applicative<T, Chunked<T>> {\n\n    /** @nocollapse */\n    public static flatten<T extends DataType>(...vectors: (Vector<T> | Vector<T>[])[]) {\n        return selectChunkArgs<Vector<T>>(Vector, vectors);\n    }\n\n    /** @nocollapse */\n    public static concat<T extends DataType>(...vectors: (Vector<T> | Vector<T>[])[]) {\n        const chunks = Chunked.flatten<T>(...vectors);\n        return new Chunked<T>(chunks[0].type, chunks);\n    }\n\n    protected _type: T;\n    protected _length: number;\n    protected _chunks: Vector<T>[];\n    protected _numChildren: number;\n    protected _children?: Chunked[];\n    protected _nullCount: number = -1;\n    protected _chunkOffsets: Uint32Array;\n\n    constructor(type: T, chunks: Vector<T>[] = [], offsets = calculateOffsets(chunks)) {\n        super();\n        this._type = type;\n        this._chunks = chunks;\n        this._chunkOffsets = offsets;\n        this._length = offsets[offsets.length - 1];\n        this._numChildren = (this._type.children || []).length;\n    }\n\n    public get type() { return this._type; }\n    public get length() { return this._length; }\n    public get chunks() { return this._chunks; }\n    public get typeId(): T['TType'] { return this._type.typeId; }\n    public get VectorName() { return `Chunked<${this._type}>`; }\n    public get data(): Data<T> {\n        return this._chunks[0] ? this._chunks[0].data : <any> null;\n    }\n\n    public get ArrayType() { return this._type.ArrayType; }\n    public get numChildren() { return this._numChildren; }\n    public get stride() { return this._chunks[0] ? this._chunks[0].stride : 1; }\n    public get byteLength(): number {\n        return this._chunks.reduce((byteLength, chunk) => byteLength + chunk.byteLength, 0);\n    }\n    public get nullCount() {\n        let nullCount = this._nullCount;\n        if (nullCount < 0) {\n            this._nullCount = nullCount = this._chunks.reduce((x, { nullCount }) => x + nullCount, 0);\n        }\n        return nullCount;\n    }\n\n    protected _indices?: ChunkedKeys<T>;\n    public get indices(): ChunkedKeys<T> | null {\n        if (DataType.isDictionary(this._type)) {\n            if (!this._indices) {\n                const chunks = (<any> this._chunks) as DictionaryVector<T, any>[];\n                this._indices = (chunks.length === 1\n                    ? chunks[0].indices\n                    : Chunked.concat(...chunks.map((x) => x.indices))) as ChunkedKeys<T>;\n            }\n            return this._indices;\n        }\n        return null;\n    }\n    public get dictionary(): ChunkedDict<T> | null {\n        if (DataType.isDictionary(this._type)) {\n            return this._chunks[this._chunks.length - 1].data.dictionary as ChunkedDict<T>;\n        }\n        return null;\n    }\n\n    public *[Symbol.iterator](): IterableIterator<T['TValue'] | null> {\n        for (const chunk of this._chunks) {\n            yield* chunk;\n        }\n    }\n\n    public clone(chunks = this._chunks): Chunked<T> {\n        return new Chunked(this._type, chunks);\n    }\n\n    public concat(...others: Vector<T>[]): Chunked<T> {\n        return this.clone(Chunked.flatten(this, ...others));\n    }\n\n    public slice(begin?: number, end?: number): Chunked<T> {\n        return clampRange(this, begin, end, this._sliceInternal);\n    }\n\n    public getChildAt<R extends DataType = any>(index: number): Chunked<R> | null {\n\n        if (index < 0 || index >= this._numChildren) { return null; }\n\n        let columns = this._children || (this._children = []);\n        let child: Chunked<R>, field: Field<R>, chunks: Vector<R>[];\n\n        if (child = columns[index]) { return child; }\n        if (field = ((this._type.children || [])[index] as Field<R>)) {\n            chunks = this._chunks\n                .map((vector) => vector.getChildAt<R>(index))\n                .filter((vec): vec is Vector<R> => vec != null);\n            if (chunks.length > 0) {\n                return (columns[index] = new Chunked<R>(field.type, chunks));\n            }\n        }\n\n        return null;\n    }\n\n    public search(index: number): [number, number] | null;\n    public search<N extends SearchContinuation<Chunked<T>>>(index: number, then?: N): ReturnType<N>;\n    public search<N extends SearchContinuation<Chunked<T>>>(index: number, then?: N) {\n        let idx = index;\n        // binary search to find the child vector and value indices\n        let offsets = this._chunkOffsets, rhs = offsets.length - 1;\n        // return early if out of bounds, or if there's just one child\n        if (idx < 0            ) { return null; }\n        if (idx >= offsets[rhs]) { return null; }\n        if (rhs <= 1           ) { return then ? then(this, 0, idx) : [0, idx]; }\n        let lhs = 0, pos = 0, mid = 0;\n        do {\n            if (lhs + 1 === rhs) {\n                return then ? then(this, lhs, idx - pos) : [lhs, idx - pos];\n            }\n            mid = lhs + ((rhs - lhs) / 2) | 0;\n            idx >= offsets[mid] ? (lhs = mid) : (rhs = mid);\n        } while (idx < offsets[rhs] && idx >= (pos = offsets[lhs]));\n        return null;\n    }\n\n    public isValid(index: number): boolean {\n        return !!this.search(index, this.isValidInternal);\n    }\n\n    public get(index: number): T['TValue'] | null {\n        return this.search(index, this.getInternal);\n    }\n\n    public set(index: number, value: T['TValue'] | null): void {\n        this.search(index, ({ chunks }, i, j) => chunks[i].set(j, value));\n    }\n\n    public indexOf(element: T['TValue'], offset?: number): number {\n        if (offset && typeof offset === 'number') {\n            return this.search(offset, (self, i, j) => this.indexOfInternal(self, i, j, element))!;\n        }\n        return this.indexOfInternal(this, 0, Math.max(0, offset || 0), element);\n    }\n\n    public toArray(): T['TArray'] {\n        const { chunks } = this;\n        const n = chunks.length;\n        let ArrayType: any = this._type.ArrayType;\n        if (n <= 0) { return new ArrayType(0); }\n        if (n <= 1) { return chunks[0].toArray(); }\n        let len = 0, src = new Array(n);\n        for (let i = -1; ++i < n;) {\n            len += (src[i] = chunks[i].toArray()).length;\n        }\n        if (ArrayType !== src[0].constructor) {\n            ArrayType = src[0].constructor;\n        }\n        let dst = new ArrayType(len);\n        let set: any = ArrayType === Array ? arraySet : typedSet;\n        for (let i = -1, idx = 0; ++i < n;) {\n            idx = set(src[i], dst, idx);\n        }\n        return dst;\n    }\n\n    protected getInternal({ _chunks }: Chunked<T>, i: number, j: number) { return _chunks[i].get(j); }\n    protected isValidInternal({ _chunks }: Chunked<T>, i: number, j: number) { return _chunks[i].isValid(j); }\n    protected indexOfInternal({ _chunks }: Chunked<T>, chunkIndex: number, fromIndex: number, element: T['TValue']) {\n        let i = chunkIndex - 1, n = _chunks.length;\n        let start = fromIndex, offset = 0, found = -1;\n        while (++i < n) {\n            if (~(found = _chunks[i].indexOf(element, start))) {\n                return offset + found;\n            }\n            start = 0;\n            offset += _chunks[i].length;\n        }\n        return -1;\n    }\n\n    protected _sliceInternal(self: Chunked<T>, begin: number, end: number) {\n        const slices: Vector<T>[] = [];\n        const { chunks, _chunkOffsets: chunkOffsets } = self;\n        for (let i = -1, n = chunks.length; ++i < n;) {\n            const chunk = chunks[i];\n            const chunkLength = chunk.length;\n            const chunkOffset = chunkOffsets[i];\n            // If the child is to the right of the slice boundary, we can stop\n            if (chunkOffset >= end) { break; }\n            // If the child is to the left of of the slice boundary, exclude\n            if (begin >= chunkOffset + chunkLength) { continue; }\n            // If the child is between both left and right boundaries, include w/o slicing\n            if (chunkOffset >= begin && (chunkOffset + chunkLength) <= end) {\n                slices.push(chunk);\n                continue;\n            }\n            // If the child overlaps one of the slice boundaries, include that slice\n            const from = Math.max(0, begin - chunkOffset);\n            const to = Math.min(end - chunkOffset, chunkLength);\n            slices.push(chunk.slice(from, to) as Vector<T>);\n        }\n        return self.clone(slices);\n    }\n}\n\n/** @ignore */\nfunction calculateOffsets<T extends DataType>(vectors: Vector<T>[]) {\n    let offsets = new Uint32Array((vectors || []).length + 1);\n    let offset = offsets[0] = 0, length = offsets.length;\n    for (let index = 0; ++index < length;) {\n        offsets[index] = (offset += vectors[index - 1].length);\n    }\n    return offsets;\n}\n\n/** @ignore */\nconst typedSet = (src: TypedArray, dst: TypedArray, offset: number) => {\n    dst.set(src, offset);\n    return (offset + src.length);\n};\n\n/** @ignore */\nconst arraySet = (src: any[], dst: any[], offset: number) => {\n    let idx = offset;\n    for (let i = -1, n = src.length; ++i < n;) {\n        dst[idx++] = src[i];\n    }\n    return idx;\n};\n\n/** @ignore */\ninterface TypedArray extends ArrayBufferView {\n    readonly length: number;\n    readonly [n: number]: number;\n    set(array: ArrayLike<number>, offset?: number): void;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Field } from './schema';\nimport { DataType } from './type';\nimport { Vector } from './vector';\nimport { Clonable, Sliceable, Applicative } from './vector';\nimport { VectorCtorArgs, VectorType as V } from './interfaces';\nimport { Chunked, SearchContinuation } from './vector/chunked';\n\nexport interface Column<T extends DataType = any> {\n    typeId: T['TType'];\n    concat(...others: Vector<T>[]): Column<T>;\n    slice(begin?: number, end?: number): Column<T>;\n    clone(chunks?: Vector<T>[], offsets?: Uint32Array): Column<T>;\n}\n\nexport class Column<T extends DataType = any>\n    extends Chunked<T>\n    implements Clonable<Column<T>>,\n               Sliceable<Column<T>>,\n               Applicative<T, Column<T>> {\n\n    public static new<T extends DataType>(field: string | Field<T>, ...chunks: (Vector<T> | Vector<T>[])[]): Column<T>;\n    public static new<T extends DataType>(field: string | Field<T>, data: Data<T>, ...args: VectorCtorArgs<V<T>>): Column<T>;\n    /** @nocollapse */\n    public static new<T extends DataType = any>(field: string | Field<T>, data: Data<T> | Vector<T> | (Data<T> | Vector<T>)[], ...rest: any[]) {\n\n        const chunks = Chunked.flatten<T>(\n            Array.isArray(data) ? [...data, ...rest] :\n            data instanceof Vector ? [data, ...rest] :\n            [Vector.new(data, ...rest)]\n        );\n\n        if (typeof field === 'string') {\n            const type = chunks[0].data.type;\n            field = new Field(field, type, true);\n        } else if (!field.nullable && chunks.some(({ nullCount }) => nullCount > 0)) {\n            field = field.clone({ nullable: true });\n        }\n        return new Column(field, chunks);\n    }\n\n    constructor(field: Field<T>, vectors: Vector<T>[] = [], offsets?: Uint32Array) {\n        vectors = Chunked.flatten<T>(...vectors);\n        super(field.type, vectors, offsets);\n        this._field = field;\n        if (vectors.length === 1 && !(this instanceof SingleChunkColumn)) {\n            return new SingleChunkColumn(field, vectors[0], this._chunkOffsets);\n        }\n    }\n\n    protected _field: Field<T>;\n    protected _children?: Column[];\n\n    public get field() { return this._field; }\n    public get name() { return this._field.name; }\n    public get nullable() { return this._field.nullable; }\n    public get metadata() { return this._field.metadata; }\n\n    public clone(chunks = this._chunks) {\n        return new Column(this._field, chunks);\n    }\n\n    public getChildAt<R extends DataType = any>(index: number): Column<R> | null {\n\n        if (index < 0 || index >= this.numChildren) { return null; }\n\n        let columns = this._children || (this._children = []);\n        let column: Column<R>, field: Field<R>, chunks: Vector<R>[];\n\n        if (column = columns[index]) { return column; }\n        if (field = ((this.type.children || [])[index] as Field<R>)) {\n            chunks = this._chunks\n                .map((vector) => vector.getChildAt<R>(index))\n                .filter((vec): vec is Vector<R> => vec != null);\n            if (chunks.length > 0) {\n                return (columns[index] = new Column<R>(field, chunks));\n            }\n        }\n\n        return null;\n    }\n}\n\n/** @ignore */\nclass SingleChunkColumn<T extends DataType = any> extends Column<T> {\n    protected _chunk: Vector<T>;\n    constructor(field: Field<T>, vector: Vector<T>, offsets?: Uint32Array) {\n        super(field, [vector], offsets);\n        this._chunk = vector;\n    }\n    public search(index: number): [number, number] | null;\n    public search<N extends SearchContinuation<Chunked<T>>>(index: number, then?: N): ReturnType<N>;\n    public search<N extends SearchContinuation<Chunked<T>>>(index: number, then?: N) {\n        return then ? then(this, 0, index) : [0, index];\n    }\n    public isValid(index: number): boolean {\n        return this._chunk.isValid(index);\n    }\n    public get(index: number): T['TValue'] | null {\n        return this._chunk.get(index);\n    }\n    public set(index: number, value: T['TValue'] | null): void {\n        this._chunk.set(index, value);\n    }\n    public indexOf(element: T['TValue'], offset?: number): number {\n        return this._chunk.indexOf(element, offset);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Field } from '../schema';\nimport { Column } from '../column';\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { Chunked } from '../vector/chunked';\n\ntype RecordBatchCtor = typeof import('../recordbatch').RecordBatch;\n\nconst isArray = Array.isArray;\n\n/** @ignore */\nexport const selectArgs = <T>(Ctor: any, vals: any[]) => _selectArgs(Ctor, vals, [], 0) as T[];\n/** @ignore */\nexport const selectColumnArgs = <T extends { [key: string]: DataType }>(args: any[]) => {\n    const [fields, values] = _selectFieldArgs<T>(args, [[], []]);\n    return values.map((x, i) =>\n        x instanceof Column ? Column.new(x.field.clone(fields[i]), x) :\n        x instanceof Vector ? Column.new(fields[i], x) as Column<T[keyof T]> :\n                              Column.new(fields[i], [] as Vector<T[keyof T]>[]));\n};\n\n/** @ignore */\nexport const selectFieldArgs = <T extends { [key: string]: DataType }>(args: any[]) => _selectFieldArgs<T>(args, [[], []]);\n/** @ignore */\nexport const selectChunkArgs = <T>(Ctor: any, vals: any[]) => _selectChunkArgs(Ctor, vals, [], 0) as T[];\n/** @ignore */\nexport const selectVectorChildrenArgs = <T extends Vector>(Ctor: RecordBatchCtor, vals: any[]) => _selectVectorChildrenArgs(Ctor, vals, [], 0) as T[];\n/** @ignore */\nexport const selectColumnChildrenArgs = <T extends Column>(Ctor: RecordBatchCtor, vals: any[]) => _selectColumnChildrenArgs(Ctor, vals, [], 0) as T[];\n\n/** @ignore */\nfunction _selectArgs<T>(Ctor: any, vals: any[], res: T[], idx: number) {\n    let value: any, j = idx;\n    let i = -1, n = vals.length;\n    while (++i < n) {\n        if (isArray(value = vals[i])) {\n            j = _selectArgs(Ctor, value, res, j).length;\n        } else if (value instanceof Ctor) { res[j++] = value; }\n    }\n    return res;\n}\n\n/** @ignore */\nfunction _selectChunkArgs<T>(Ctor: any, vals: any[], res: T[], idx: number) {\n    let value: any, j = idx;\n    let i = -1, n = vals.length;\n    while (++i < n) {\n        if (isArray(value = vals[i])) {\n            j = _selectChunkArgs(Ctor, value, res, j).length;\n        } else if (value instanceof Chunked) {\n            j = _selectChunkArgs(Ctor, value.chunks, res, j).length;\n        } else if (value instanceof Ctor) { res[j++] = value; }\n    }\n    return res;\n}\n\n/** @ignore */\nfunction _selectVectorChildrenArgs<T extends Vector>(Ctor: RecordBatchCtor, vals: any[], res: T[], idx: number) {\n    let value: any, j = idx;\n    let i = -1, n = vals.length;\n    while (++i < n) {\n        if (isArray(value = vals[i])) {\n            j = _selectVectorChildrenArgs(Ctor, value, res, j).length;\n        } else if (value instanceof Ctor) {\n            j = _selectArgs(Vector, value.schema.fields.map((_, i) => value.getChildAt(i)!), res, j).length;\n        } else if (value instanceof Vector) { res[j++] = value as T; }\n    }\n    return res;\n}\n\n/** @ignore */\nfunction _selectColumnChildrenArgs<T extends Column>(Ctor: RecordBatchCtor, vals: any[], res: T[], idx: number) {\n    let value: any, j = idx;\n    let i = -1, n = vals.length;\n    while (++i < n) {\n        if (isArray(value = vals[i])) {\n            j = _selectColumnChildrenArgs(Ctor, value, res, j).length;\n        } else if (value instanceof Ctor) {\n            j = _selectArgs(Column, value.schema.fields.map((f, i) => Column.new(f, value.getChildAt(i)!)), res, j).length;\n        } else if (value instanceof Column) { res[j++] = value as T; }\n    }\n    return res;\n}\n\n/** @ignore */\nconst toKeysAndValues = (xs: [any[], any[]], [k, v]: [any, any], i: number) => (xs[0][i] = k, xs[1][i] = v, xs);\n\n/** @ignore */\nfunction _selectFieldArgs<T extends { [key: string]: DataType }>(vals: any[], ret: [Field<T[keyof T]>[], Vector<T[keyof T]>[]]): [Field<T[keyof T]>[], (T[keyof T] | Vector<T[keyof T]>)[]] {\n    let keys: any[], n: number;\n    switch (n = vals.length) {\n        case 0: return ret;\n        case 1:\n            keys = ret[0];\n            if (!(vals[0])) { return ret; }\n            if (isArray(vals[0])) { return _selectFieldArgs(vals[0], ret); }\n            if (!(vals[0] instanceof Data || vals[0] instanceof Vector || vals[0] instanceof DataType)) {\n                [keys, vals] = Object.entries(vals[0]).reduce(toKeysAndValues, ret);\n            }\n            break;\n        default:\n            !isArray(keys = vals[n - 1])\n                ? (vals = isArray(vals[0]) ? vals[0] : vals, keys = [])\n                : (vals = isArray(vals[0]) ? vals[0] : vals.slice(0, n - 1));\n    }\n\n    let fieldIndex = -1;\n    let valueIndex = -1;\n    let idx = -1, len = vals.length;\n    let field: number | string | Field<T[keyof T]>;\n    let val: Vector<T[keyof T]> | Data<T[keyof T]>;\n    let [fields, values] = ret as [Field<T[keyof T]>[], any[]];\n\n    while (++idx < len) {\n        val = vals[idx];\n        if (val instanceof Column && (values[++valueIndex] = val)) {\n            fields[++fieldIndex] = val.field.clone(keys[idx], val.type, true);\n        } else {\n            ({ [idx]: field = idx } = keys);\n            if (val instanceof DataType && (values[++valueIndex] = val)) {\n                fields[++fieldIndex] = Field.new(field, val as DataType, true) as Field<T[keyof T]>;\n            } else if (val && val.type && (values[++valueIndex] = val)) {\n                val instanceof Data && (values[valueIndex] = val = Vector.new(val) as Vector);\n                fields[++fieldIndex] = Field.new(field, val.type, true) as Field<T[keyof T]>;\n            }\n        }\n    }\n    return ret;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Vector } from './vector';\nimport { DataType } from './type';\nimport { selectArgs } from './util/args';\nimport { selectFieldArgs } from './util/args';\nimport { instance as comparer } from './visitor/typecomparator';\n\ntype VectorMap = { [key: string]: Vector };\ntype Fields<T extends { [key: string]: DataType }> = (keyof T)[] | Field<T[keyof T]>[];\ntype ChildData<T extends { [key: string]: DataType }> = T[keyof T][] | Data<T[keyof T]>[] | Vector<T[keyof T]>[];\n\nexport class Schema<T extends { [key: string]: DataType } = any> {\n\n    public static from<T extends { [key: string]: DataType } = any>(children: T): Schema<T>;\n    public static from<T extends VectorMap = any>(children: T): Schema<{ [P in keyof T]: T[P]['type'] }>;\n    public static from<T extends { [key: string]: DataType } = any>(children: ChildData<T>, fields?: Fields<T>): Schema<T>;\n    /** @nocollapse */\n    public static from(...args: any[]) {\n        return Schema.new(args[0], args[1]);\n    }\n\n    public static new<T extends { [key: string]: DataType } = any>(children: T): Schema<T>;\n    public static new<T extends VectorMap = any>(children: T): Schema<{ [P in keyof T]: T[P]['type'] }>;\n    public static new<T extends { [key: string]: DataType } = any>(children: ChildData<T>, fields?: Fields<T>): Schema<T>;\n    /** @nocollapse */\n    public static new(...args: any[]) {\n        return new Schema(selectFieldArgs(args)[0]);\n    }\n\n    public readonly fields: Field<T[keyof T]>[];\n    public readonly metadata: Map<string, string>;\n    public readonly dictionaries: Map<number, DataType>;\n\n    constructor(fields: Field[] = [],\n                metadata?: Map<string, string> | null,\n                dictionaries?: Map<number, DataType> | null) {\n        this.fields = (fields || []) as Field<T[keyof T]>[];\n        this.metadata = metadata || new Map();\n        if (!dictionaries) {\n            dictionaries = generateDictionaryMap(fields);\n        }\n        this.dictionaries = dictionaries;\n    }\n    public get [Symbol.toStringTag]() { return 'Schema'; }\n    public toString() {\n        return `Schema<{ ${this.fields.map((f, i) => `${i}: ${f}`).join(', ')} }>`;\n    }\n\n    public compareTo(other?: Schema | null): other is Schema<T> {\n        return comparer.compareSchemas(this, other);\n    }\n\n    public select<K extends keyof T = any>(...columnNames: K[]) {\n        const names = columnNames.reduce((xs, x) => (xs[x] = true) && xs, Object.create(null));\n        return new Schema<{ [P in K]: T[P] }>(this.fields.filter((f) => names[f.name]), this.metadata);\n    }\n    public selectAt<K extends T[keyof T] = any>(...columnIndices: number[]) {\n        return new Schema<{ [key: string]: K }>(columnIndices.map((i) => this.fields[i]).filter(Boolean), this.metadata);\n    }\n\n    public assign<R extends { [key: string]: DataType } = any>(schema: Schema<R>): Schema<T & R>;\n    public assign<R extends { [key: string]: DataType } = any>(...fields: (Field<R[keyof R]> | Field<R[keyof R]>[])[]): Schema<T & R>;\n    public assign<R extends { [key: string]: DataType } = any>(...args: (Schema<R> | Field<R[keyof R]> | Field<R[keyof R]>[])[]) {\n\n        const other = args[0] instanceof Schema ? args[0] as Schema<R>\n            : new Schema<R>(selectArgs<Field<R[keyof R]>>(Field, args));\n\n        const curFields = [...this.fields] as Field[];\n        const metadata = mergeMaps(mergeMaps(new Map(), this.metadata), other.metadata);\n        const newFields = other.fields.filter((f2) => {\n            const i = curFields.findIndex((f) => f.name === f2.name);\n            return ~i ? (curFields[i] = f2.clone({\n                metadata: mergeMaps(mergeMaps(new Map(), curFields[i].metadata), f2.metadata)\n            })) && false : true;\n        }) as Field[];\n\n        const newDictionaries = generateDictionaryMap(newFields, new Map());\n\n        return new Schema<T & R>(\n            [...curFields, ...newFields], metadata,\n            new Map([...this.dictionaries, ...newDictionaries])\n        );\n    }\n}\n\nexport class Field<T extends DataType = any> {\n\n    public static new<T extends DataType = any>(props: { name: string | number, type: T, nullable?: boolean, metadata?: Map<string, string> | null }): Field<T>;\n    public static new<T extends DataType = any>(name: string | number | Field<T>, type: T, nullable?: boolean, metadata?: Map<string, string> | null): Field<T>;\n    /** @nocollapse */\n    public static new<T extends DataType = any>(...args: any[]) {\n        let [name, type, nullable, metadata] = args;\n        if (args[0] && typeof args[0] === 'object') {\n            ({ name } = args[0]);\n            (type === undefined) && (type = args[0].type);\n            (nullable === undefined) && (nullable = args[0].nullable);\n            (metadata === undefined) && (metadata = args[0].metadata);\n        }\n        return new Field<T>(`${name}`, type, nullable, metadata);\n    }\n\n    public readonly type: T;\n    public readonly name: string;\n    public readonly nullable: boolean;\n    public readonly metadata: Map<string, string>;\n\n    constructor(name: string, type: T, nullable = false, metadata?: Map<string, string> | null) {\n        this.name = name;\n        this.type = type;\n        this.nullable = nullable;\n        this.metadata = metadata || new Map();\n    }\n\n    public get typeId() { return this.type.typeId; }\n    public get [Symbol.toStringTag]() { return 'Field'; }\n    public toString() { return `${this.name}: ${this.type}`; }\n    public compareTo(other?: Field | null): other is Field<T> {\n        return comparer.compareField(this, other);\n    }\n    public clone<R extends DataType = T>(props: { name?: string | number, type?: R, nullable?: boolean, metadata?: Map<string, string> | null }): Field<R>;\n    public clone<R extends DataType = T>(name?: string | number | Field<T>, type?: R, nullable?: boolean, metadata?: Map<string, string> | null): Field<R>;\n    public clone<R extends DataType = T>(...args: any[]) {\n        let [name, type, nullable, metadata] = args;\n        (!args[0] || typeof args[0] !== 'object')\n            ? ([name = this.name, type = this.type, nullable = this.nullable, metadata = this.metadata] = args)\n            : ({name = this.name, type = this.type, nullable = this.nullable, metadata = this.metadata} = args[0]);\n        return Field.new<R>(name, type, nullable, metadata);\n    }\n}\n\n/** @ignore */\nfunction mergeMaps<TKey, TVal>(m1?: Map<TKey, TVal> | null, m2?: Map<TKey, TVal> | null): Map<TKey, TVal> {\n    return new Map([...(m1 || new Map()), ...(m2 || new Map())]);\n}\n\n/** @ignore */\nfunction generateDictionaryMap(fields: Field[], dictionaries = new Map<number, DataType>()): Map<number, DataType> {\n\n    for (let i = -1, n = fields.length; ++i < n;) {\n        const field = fields[i];\n        const type = field.type;\n        if (DataType.isDictionary(type)) {\n            if (!dictionaries.has(type.id)) {\n                dictionaries.set(type.id, type.dictionary);\n            } else if (dictionaries.get(type.id) !== type.dictionary) {\n                throw new Error(`Cannot create Schema containing two different dictionaries with the same Id`);\n            }\n        }\n        if (type.children && type.children.length > 0) {\n            generateDictionaryMap(type.children, dictionaries);\n        }\n    }\n\n    return dictionaries;\n}\n\n// Add these here so they're picked up by the externs creator\n// in the build, and closure-compiler doesn't minify them away\n(Schema.prototype as any).fields = null;\n(Schema.prototype as any).metadata = null;\n(Schema.prototype as any).dictionaries = null;\n\n(Field.prototype as any).type = null;\n(Field.prototype as any).name = null;\n(Field.prototype as any).nullable = null;\n(Field.prototype as any).metadata = null;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Run } from './run';\nimport { Field } from '../schema';\nimport { DataType, List } from '../type';\nimport { OffsetsBufferBuilder } from './buffer';\nimport { Builder, BuilderOptions, VariableWidthBuilder } from '../builder';\n\n/** @ignore */\nexport class ListBuilder<T extends DataType = any, TNull = any> extends VariableWidthBuilder<List<T>, TNull> {\n    protected _run = new Run<T, TNull>();\n    protected _offsets: OffsetsBufferBuilder;\n    constructor(opts: BuilderOptions<List<T>, TNull>) {\n        super(opts);\n        this._offsets = new OffsetsBufferBuilder();\n    }\n    public addChild(child: Builder<T>, name = '0') {\n        if (this.numChildren > 0) {\n            throw new Error('ListBuilder can only have one child.');\n        }\n        this.children[this.numChildren] = child;\n        this.type = new List(new Field(name, child.type, true));\n        return this.numChildren - 1;\n    }\n    public clear() {\n        this._run.clear();\n        return super.clear();\n    }\n    protected _flushPending(pending: Map<number, T['TValue'] | undefined>) {\n        const run = this._run;\n        const offsets = this._offsets;\n        const setValue = this._setValue;\n        let index = 0, value: Uint8Array | undefined;\n        for ([index, value] of pending) {\n            if (value === undefined) {\n                offsets.set(index, 0);\n            } else {\n                offsets.set(index, value.length);\n                setValue(this, index, run.bind(value));\n            }\n        }\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Run } from './run';\nimport { Field } from '../schema';\nimport { Builder } from '../builder';\nimport { DataType, FixedSizeList } from '../type';\n\n/** @ignore */\nexport class FixedSizeListBuilder<T extends DataType = any, TNull = any> extends Builder<FixedSizeList<T>, TNull> {\n    protected _run = new Run<T, TNull>();\n    public setValue(index: number, value: T['TValue']) {\n        super.setValue(index, this._run.bind(value));\n    }\n    public addChild(child: Builder<T>, name = '0') {\n        if (this.numChildren > 0) {\n            throw new Error('FixedSizeListBuilder can only have one child.');\n        }\n        const childIndex = this.children.push(child);\n        this.type = new FixedSizeList(this.type.listSize, new Field(name, child.type, true));\n        return childIndex;\n    }\n    public clear() {\n        this._run.clear();\n        return super.clear();\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Field } from '../schema';\nimport { DataType, Map_, Struct } from '../type';\nimport { Builder, VariableWidthBuilder } from '../builder';\n\n/** @ignore */ type MapValue<K extends DataType = any, V extends DataType = any> = Map_<K, V>['TValue'];\n/** @ignore */ type MapValues<K extends DataType = any, V extends DataType = any> = Map<number, MapValue<K, V> | undefined>;\n/** @ignore */ type MapValueExt<K extends DataType = any, V extends DataType = any> = MapValue<K, V> | { [key: string]: V } | { [key: number]: V } ;\n\n/** @ignore */\nexport class MapBuilder<K extends DataType = any, V extends DataType = any, TNull = any> extends VariableWidthBuilder<Map_<K, V>, TNull> {\n\n    protected _pending: MapValues<K, V> | undefined;\n    public set(index: number, value: MapValueExt<K, V> | TNull) {\n        return super.set(index, value as MapValue<K, V> | TNull);\n    }\n\n    public setValue(index: number, value: MapValueExt<K, V>) {\n        value = value instanceof Map ? value : new Map(Object.entries(value));\n        const pending = this._pending || (this._pending = new Map() as MapValues<K, V>);\n        const current = pending.get(index);\n        current && (this._pendingLength -= current.size);\n        this._pendingLength += value.size;\n        pending.set(index, value);\n    }\n\n    public addChild(child: Builder<Struct<{ key: K, value: V }>>, name = `${this.numChildren}`) {\n        if (this.numChildren > 0) {\n            throw new Error('ListBuilder can only have one child.');\n        }\n        this.children[this.numChildren] = child;\n        this.type = new Map_<K, V>(new Field(name, child.type, true), this.type.keysSorted);\n        return this.numChildren - 1;\n    }\n\n    protected _flushPending(pending: MapValues<K, V>) {\n        const offsets = this._offsets;\n        const setValue = this._setValue;\n        pending.forEach((value, index) => {\n            if (value === undefined) {\n                offsets.set(index, 0);\n            } else {\n                offsets.set(index, value.size);\n                setValue(this, index, value);\n            }\n        });\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Field } from '../schema';\nimport { Builder } from '../builder';\nimport { DataType, Struct } from '../type';\n\n/** @ignore */\nexport class StructBuilder<T extends { [key: string]: DataType } = any, TNull = any> extends Builder<Struct<T>, TNull> {\n    public addChild(child: Builder, name = `${this.numChildren}`) {\n        const childIndex = this.children.push(child);\n        this.type = new Struct([...this.type.children, new Field(name, child.type, true)]);\n        return childIndex;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Field } from '../schema';\nimport { DataBufferBuilder } from './buffer';\nimport { Builder, BuilderOptions } from '../builder';\nimport { Union, SparseUnion, DenseUnion } from '../type';\n\nexport interface UnionBuilderOptions<T extends Union = any, TNull = any> extends BuilderOptions<T, TNull> {\n    valueToChildTypeId?: (builder: UnionBuilder<T, TNull>, value: any, offset: number) => number;\n}\n\n/** @ignore */\nexport abstract class UnionBuilder<T extends Union, TNull = any> extends Builder<T, TNull> {\n\n    protected _typeIds: DataBufferBuilder<Int8Array>;\n\n    constructor(options: UnionBuilderOptions<T, TNull>) {\n        super(options);\n        this._typeIds = new DataBufferBuilder(new Int8Array(0), 1);\n        if (typeof options['valueToChildTypeId'] === 'function') {\n            this._valueToChildTypeId = options['valueToChildTypeId'];\n        }\n    }\n\n    public get typeIdToChildIndex() { return this.type.typeIdToChildIndex; }\n\n    public append(value: T['TValue'] | TNull, childTypeId?: number) {\n        return this.set(this.length, value, childTypeId);\n    }\n\n    public set(index: number, value: T['TValue'] | TNull, childTypeId?: number) {\n        if (childTypeId === undefined) {\n            childTypeId = this._valueToChildTypeId(this, value, index);\n        }\n        if (this.setValid(index, this.isValid(value))) {\n            this.setValue(index, value, childTypeId);\n        }\n        return this;\n    }\n\n    // @ts-ignore\n    public setValue(index: number, value: T['TValue'], childTypeId?: number) {\n        this._typeIds.set(index, childTypeId!);\n        super.setValue(index, value);\n    }\n\n    // @ts-ignore\n    public addChild(child: Builder, name = `${this.children.length}`) {\n        const childTypeId = this.children.push(child);\n        const { type: { children, mode, typeIds } } = this;\n        const fields = [...children, new Field(name, child.type)];\n        this.type = <T> new Union(mode, [...typeIds, childTypeId], fields);\n        return childTypeId;\n    }\n\n    /** @ignore */\n    // @ts-ignore\n    protected _valueToChildTypeId(builder: UnionBuilder<T, TNull>, value: any, offset: number): number {\n        throw new Error(`Cannot map UnionBuilder value to child typeId. \\\nPass the \\`childTypeId\\` as the second argument to unionBuilder.append(), \\\nor supply a \\`valueToChildTypeId\\` function as part of the UnionBuilder constructor options.`);\n    }\n}\n\n/** @ignore */\nexport class SparseUnionBuilder<T extends SparseUnion, TNull = any> extends UnionBuilder<T, TNull> {}\n/** @ignore */\nexport class DenseUnionBuilder<T extends DenseUnion, TNull = any> extends UnionBuilder<T, TNull> {\n\n    protected _offsets: DataBufferBuilder<Int32Array>;\n\n    constructor(options: UnionBuilderOptions<T, TNull>) {\n        super(options);\n        this._offsets = new DataBufferBuilder(new Int32Array(0));\n    }\n\n    /** @ignore */\n    public setValue(index: number, value: T['TValue'], childTypeId?: number) {\n        const childIndex = this.type.typeIdToChildIndex[childTypeId!];\n        this._offsets.set(index, this.getChildAt(childIndex)!.length);\n        return super.setValue(index, value, childTypeId);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Field } from '../schema';\nimport { Vector } from '../vector';\nimport { Visitor } from '../visitor';\nimport { encodeUtf8 } from '../util/utf8';\nimport { VectorType } from '../interfaces';\nimport { float64ToUint16 } from '../util/math';\nimport { toArrayBufferView } from '../util/buffer';\nimport { Type, UnionMode, Precision, DateUnit, TimeUnit, IntervalUnit } from '../enum';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\n/** @ignore */\nexport interface SetVisitor extends Visitor {\n    visit<T extends VectorType>(node: T, index: number, value: T['TValue']): void;\n    visitMany<T extends VectorType>(nodes: T[], indices: number[], values: T['TValue'][]): void[];\n    getVisitFn<T extends Type>(node: T): (vector: VectorType<T>, index: number, value: VectorType<T>['TValue']) => void;\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): (vector: VectorType<T>, index: number, value: VectorType<T>['TValue']) => void;\n    visitNull                 <T extends Null>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitBool                 <T extends Bool>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInt                  <T extends Int>                 (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInt8                 <T extends Int8>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInt16                <T extends Int16>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInt32                <T extends Int32>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInt64                <T extends Int64>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUint8                <T extends Uint8>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUint16               <T extends Uint16>              (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUint32               <T extends Uint32>              (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUint64               <T extends Uint64>              (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFloat                <T extends Float>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFloat16              <T extends Float16>             (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFloat32              <T extends Float32>             (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFloat64              <T extends Float64>             (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUtf8                 <T extends Utf8>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitBinary               <T extends Binary>              (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFixedSizeBinary      <T extends FixedSizeBinary>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDate                 <T extends Date_>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDateDay              <T extends DateDay>             (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDateMillisecond      <T extends DateMillisecond>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimestamp            <T extends Timestamp>           (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimestampSecond      <T extends TimestampSecond>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimestampMillisecond <T extends TimestampMillisecond>(vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimestampMicrosecond <T extends TimestampMicrosecond>(vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimestampNanosecond  <T extends TimestampNanosecond> (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTime                 <T extends Time>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimeSecond           <T extends TimeSecond>          (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimeMillisecond      <T extends TimeMillisecond>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimeMicrosecond      <T extends TimeMicrosecond>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimeNanosecond       <T extends TimeNanosecond>      (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDecimal              <T extends Decimal>             (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitList                 <T extends List>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitStruct               <T extends Struct>              (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUnion                <T extends Union>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDenseUnion           <T extends DenseUnion>          (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitSparseUnion          <T extends SparseUnion>         (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDictionary           <T extends Dictionary>          (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInterval             <T extends Interval>            (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitIntervalDayTime      <T extends IntervalDayTime>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitIntervalYearMonth    <T extends IntervalYearMonth>   (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFixedSizeList        <T extends FixedSizeList>       (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitMap                  <T extends Map_>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n}\n\n/** @ignore */\nexport class SetVisitor extends Visitor {}\n\n/** @ignore */\nconst setEpochMsToDays = (data: Int32Array, index: number, epochMs: number) => { data[index] = (epochMs / 86400000) | 0; };\n/** @ignore */\nconst setEpochMsToMillisecondsLong = (data: Int32Array, index: number, epochMs: number) => {\n    data[index] = (epochMs % 4294967296) | 0;\n    data[index + 1] = (epochMs / 4294967296) | 0;\n};\n/** @ignore */\nconst setEpochMsToMicrosecondsLong = (data: Int32Array, index: number, epochMs: number) => {\n    data[index] = ((epochMs * 1000) % 4294967296) | 0;\n    data[index + 1] = ((epochMs * 1000) / 4294967296) | 0;\n};\n/** @ignore */\nconst setEpochMsToNanosecondsLong = (data: Int32Array, index: number, epochMs: number) => {\n    data[index] = ((epochMs * 1000000) % 4294967296) | 0;\n    data[index + 1] = ((epochMs * 1000000) / 4294967296) | 0;\n};\n\n/** @ignore */\nconst setVariableWidthBytes = (values: Uint8Array, valueOffsets: Int32Array, index: number, value: Uint8Array) => {\n    const { [index]: x, [index + 1]: y } = valueOffsets;\n    if (x != null && y != null) {\n        values.set(value.subarray(0, y - x), x);\n    }\n};\n\n/** @ignore */\nconst setBool = <T extends Bool>({ offset, values }: VectorType<T>, index: number, val: boolean) => {\n    const idx = offset + index;\n    val ? (values[idx >> 3] |=  (1 << (idx % 8)))  // true\n        : (values[idx >> 3] &= ~(1 << (idx % 8))); // false\n\n};\n\n/** @ignore */ type Numeric1X = Int8 | Int16 | Int32 | Uint8 | Uint16 | Uint32 | Float32 | Float64;\n/** @ignore */ type Numeric2X = Int64 | Uint64;\n\n/** @ignore */\nconst setDateDay         = <T extends DateDay>        ({ values         }: VectorType<T>, index: number, value: T['TValue']): void => { setEpochMsToDays(values, index, value.valueOf()); };\n/** @ignore */\nconst setDateMillisecond = <T extends DateMillisecond>({ values         }: VectorType<T>, index: number, value: T['TValue']): void => { setEpochMsToMillisecondsLong(values, index * 2, value.valueOf()); };\n/** @ignore */\nconst setNumeric         = <T extends Numeric1X>      ({ stride, values }: VectorType<T>, index: number, value: T['TValue']): void => { values[stride * index] = value; };\n/** @ignore */\nconst setFloat16         = <T extends Float16>        ({ stride, values }: VectorType<T>, index: number, value: T['TValue']): void => { values[stride * index] = float64ToUint16(value); };\n/** @ignore */\nconst setNumericX2       = <T extends Numeric2X>      (vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    switch (typeof value) {\n        case 'bigint': vector.values64[index] = value; break;\n        case 'number': vector.values[index * vector.stride] = value; break;\n        default:\n            const val = value as T['TArray'];\n            const { stride, ArrayType } = vector;\n            const long = toArrayBufferView<T['TArray']>(ArrayType, val);\n            vector.values.set(long.subarray(0, stride), stride * index);\n    }\n};\n/** @ignore */\nconst setFixedSizeBinary = <T extends FixedSizeBinary>({ stride, values }: VectorType<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, stride), stride * index); };\n\n/** @ignore */\nconst setBinary = <T extends Binary>({ values, valueOffsets }: VectorType<T>, index: number, value: T['TValue']) => setVariableWidthBytes(values, valueOffsets, index, value);\n/** @ignore */\nconst setUtf8 = <T extends Utf8>({ values, valueOffsets }: VectorType<T>, index: number, value: T['TValue']) => {\n    setVariableWidthBytes(values, valueOffsets, index, encodeUtf8(value));\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst setInt = <T extends Int>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    vector.type.bitWidth < 64\n        ? setNumeric(vector as VectorType<Numeric1X>, index, value as Numeric1X['TValue'])\n        : setNumericX2(vector as VectorType<Numeric2X>, index, value as Numeric2X['TValue']);\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst setFloat = <T extends Float>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    vector.type.precision !== Precision.HALF\n        ? setNumeric(vector as VectorType<Numeric1X>, index, value)\n        : setFloat16(vector as VectorType<Float16>, index, value);\n};\n\n/* istanbul ignore next */\nconst setDate = <T extends Date_> (vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    vector.type.unit === DateUnit.DAY\n        ? setDateDay(vector as VectorType<DateDay>, index, value)\n        : setDateMillisecond(vector as VectorType<DateMillisecond>, index, value);\n};\n\n/** @ignore */\nconst setTimestampSecond      = <T extends TimestampSecond>     ({ values }: VectorType<T>, index: number, value: T['TValue']): void => setEpochMsToMillisecondsLong(values, index * 2, value / 1000);\n/** @ignore */\nconst setTimestampMillisecond = <T extends TimestampMillisecond>({ values }: VectorType<T>, index: number, value: T['TValue']): void => setEpochMsToMillisecondsLong(values, index * 2, value);\n/** @ignore */\nconst setTimestampMicrosecond = <T extends TimestampMicrosecond>({ values }: VectorType<T>, index: number, value: T['TValue']): void => setEpochMsToMicrosecondsLong(values, index * 2, value);\n/** @ignore */\nconst setTimestampNanosecond  = <T extends TimestampNanosecond> ({ values }: VectorType<T>, index: number, value: T['TValue']): void => setEpochMsToNanosecondsLong(values, index * 2, value);\n/* istanbul ignore next */\n/** @ignore */\nconst setTimestamp            = <T extends Timestamp>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      setTimestampSecond(vector as VectorType<TimestampSecond>, index, value);\n        case TimeUnit.MILLISECOND: return setTimestampMillisecond(vector as VectorType<TimestampMillisecond>, index, value);\n        case TimeUnit.MICROSECOND: return setTimestampMicrosecond(vector as VectorType<TimestampMicrosecond>, index, value);\n        case TimeUnit.NANOSECOND:  return  setTimestampNanosecond(vector as VectorType<TimestampNanosecond>, index, value);\n    }\n};\n\n/** @ignore */\nconst setTimeSecond      = <T extends TimeSecond>     ({ values, stride }: VectorType<T>, index: number, value: T['TValue']): void => { values[stride * index] = value; };\n/** @ignore */\nconst setTimeMillisecond = <T extends TimeMillisecond>({ values, stride }: VectorType<T>, index: number, value: T['TValue']): void => { values[stride * index] = value; };\n/** @ignore */\nconst setTimeMicrosecond = <T extends TimeMicrosecond>({ values         }: VectorType<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 2), 2 * index); };\n/** @ignore */\nconst setTimeNanosecond  = <T extends TimeNanosecond> ({ values         }: VectorType<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 2), 2 * index); };\n/* istanbul ignore next */\n/** @ignore */\nconst setTime            = <T extends Time>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      setTimeSecond(vector as VectorType<TimeSecond>, index, value as TimeSecond['TValue']);\n        case TimeUnit.MILLISECOND: return setTimeMillisecond(vector as VectorType<TimeMillisecond>, index, value as TimeMillisecond['TValue']);\n        case TimeUnit.MICROSECOND: return setTimeMicrosecond(vector as VectorType<TimeMicrosecond>, index, value as TimeMicrosecond['TValue']);\n        case TimeUnit.NANOSECOND:  return  setTimeNanosecond(vector as VectorType<TimeNanosecond>, index, value as TimeNanosecond['TValue']);\n    }\n};\n\n/** @ignore */\nconst setDecimal = <T extends Decimal>({ values }: VectorType<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 4), 4 * index); };\n\n/** @ignore */\nconst setList = <T extends List>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    const values = vector.getChildAt(0)!, valueOffsets = vector.valueOffsets;\n    for (let idx = -1, itr = valueOffsets[index], end = valueOffsets[index + 1]; itr < end;) {\n        values.set(itr++, value.get(++idx));\n    }\n};\n\n/** @ignore */\nconst setMap = <T extends Map_>(vector: VectorType<T>, index: number, value: T['TValue']) => {\n    const values = vector.getChildAt(0)!, valueOffsets = vector.valueOffsets;\n    const entries = value instanceof Map ? [...value] : Object.entries(value);\n    for (let idx = -1, itr = valueOffsets[index], end = valueOffsets[index + 1]; itr < end;) {\n        values.set(itr++, entries[++idx]);\n    }\n};\n\n/** @ignore */ const _setStructArrayValue = (o: number, v: any[]) => (c: Vector | null, _: Field, i: number) => c && c.set(o, v[i]);\n/** @ignore */ const _setStructVectorValue = (o: number, v: Vector) => (c: Vector | null, _: Field, i: number) => c && c.set(o, v.get(i));\n/** @ignore */ const _setStructMapValue = (o: number, v: Map<string, any>) => (c: Vector | null, f: Field, _: number) => c && c.set(o, v.get(f.name));\n/** @ignore */ const _setStructObjectValue = (o: number, v: { [key: string]: any }) => (c: Vector | null, f: Field, _: number) => c && c.set(o, v[f.name]);\n/** @ignore */\nconst setStruct = <T extends Struct>(vector: VectorType<T>, index: number, value: T['TValue']) => {\n\n    const setValue = value instanceof Map    ? _setStructMapValue(index, value)    :\n                     value instanceof Vector ? _setStructVectorValue(index, value) :\n                     Array.isArray(value)    ? _setStructArrayValue(index, value)  :\n                                               _setStructObjectValue(index, value) ;\n\n    vector.type.children.forEach((f: Field, i: number) => setValue(vector.getChildAt(i), f, i));\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst setUnion = <\n    V extends VectorType<Union> | VectorType<DenseUnion> | VectorType<SparseUnion>\n>(vector: V, index: number, value: V['TValue']) => {\n    vector.type.mode === UnionMode.Dense ?\n        setDenseUnion(vector as VectorType<DenseUnion>, index, value) :\n        setSparseUnion(vector as VectorType<SparseUnion>, index, value);\n};\n\n/** @ignore */\nconst setDenseUnion = <T extends DenseUnion>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    const childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];\n    const child = vector.getChildAt(childIndex);\n    child && child.set(vector.valueOffsets[index], value);\n};\n\n/** @ignore */\nconst setSparseUnion = <T extends SparseUnion>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    const childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];\n    const child = vector.getChildAt(childIndex);\n    child && child.set(index, value);\n};\n\n/** @ignore */\nconst setDictionary = <T extends Dictionary>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    const key = vector.getKey(index);\n    if (key !== null) {\n        vector.setValue(key, value);\n    }\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst setIntervalValue = <T extends Interval>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    (vector.type.unit === IntervalUnit.DAY_TIME)\n        ? setIntervalDayTime(vector as VectorType<IntervalDayTime>, index, value)\n        : setIntervalYearMonth(vector as VectorType<IntervalYearMonth>, index, value);\n};\n\n/** @ignore */\nconst setIntervalDayTime = <T extends IntervalDayTime>({ values }: VectorType<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 2), 2 * index); };\n/** @ignore */\nconst setIntervalYearMonth = <T extends IntervalYearMonth>({ values }: VectorType<T>, index: number, value: T['TValue']): void => { values[index] = (value[0] * 12) + (value[1] % 12); };\n\n/** @ignore */\nconst setFixedSizeList = <T extends FixedSizeList>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    const child = vector.getChildAt(0)!, { stride } = vector;\n    for (let idx = -1, offset = index * stride; ++idx < stride;) {\n        child.set(offset + idx, value.get(idx));\n    }\n};\n\nSetVisitor.prototype.visitBool                 =                 setBool;\nSetVisitor.prototype.visitInt                  =                  setInt;\nSetVisitor.prototype.visitInt8                 =              setNumeric;\nSetVisitor.prototype.visitInt16                =              setNumeric;\nSetVisitor.prototype.visitInt32                =              setNumeric;\nSetVisitor.prototype.visitInt64                =            setNumericX2;\nSetVisitor.prototype.visitUint8                =              setNumeric;\nSetVisitor.prototype.visitUint16               =              setNumeric;\nSetVisitor.prototype.visitUint32               =              setNumeric;\nSetVisitor.prototype.visitUint64               =            setNumericX2;\nSetVisitor.prototype.visitFloat                =                setFloat;\nSetVisitor.prototype.visitFloat16              =              setFloat16;\nSetVisitor.prototype.visitFloat32              =              setNumeric;\nSetVisitor.prototype.visitFloat64              =              setNumeric;\nSetVisitor.prototype.visitUtf8                 =                 setUtf8;\nSetVisitor.prototype.visitBinary               =               setBinary;\nSetVisitor.prototype.visitFixedSizeBinary      =      setFixedSizeBinary;\nSetVisitor.prototype.visitDate                 =                 setDate;\nSetVisitor.prototype.visitDateDay              =              setDateDay;\nSetVisitor.prototype.visitDateMillisecond      =      setDateMillisecond;\nSetVisitor.prototype.visitTimestamp            =            setTimestamp;\nSetVisitor.prototype.visitTimestampSecond      =      setTimestampSecond;\nSetVisitor.prototype.visitTimestampMillisecond = setTimestampMillisecond;\nSetVisitor.prototype.visitTimestampMicrosecond = setTimestampMicrosecond;\nSetVisitor.prototype.visitTimestampNanosecond  =  setTimestampNanosecond;\nSetVisitor.prototype.visitTime                 =                 setTime;\nSetVisitor.prototype.visitTimeSecond           =           setTimeSecond;\nSetVisitor.prototype.visitTimeMillisecond      =      setTimeMillisecond;\nSetVisitor.prototype.visitTimeMicrosecond      =      setTimeMicrosecond;\nSetVisitor.prototype.visitTimeNanosecond       =       setTimeNanosecond;\nSetVisitor.prototype.visitDecimal              =              setDecimal;\nSetVisitor.prototype.visitList                 =                 setList;\nSetVisitor.prototype.visitStruct               =               setStruct;\nSetVisitor.prototype.visitUnion                =                setUnion;\nSetVisitor.prototype.visitDenseUnion           =           setDenseUnion;\nSetVisitor.prototype.visitSparseUnion          =          setSparseUnion;\nSetVisitor.prototype.visitDictionary           =           setDictionary;\nSetVisitor.prototype.visitInterval             =        setIntervalValue;\nSetVisitor.prototype.visitIntervalDayTime      =      setIntervalDayTime;\nSetVisitor.prototype.visitIntervalYearMonth    =    setIntervalYearMonth;\nSetVisitor.prototype.visitFixedSizeList        =        setFixedSizeList;\nSetVisitor.prototype.visitMap                  =                  setMap;\n\n/** @ignore */\nexport const instance = new SetVisitor();\n","// automatically generated by the FlatBuffers compiler, do not modify\n\nimport { flatbuffers } from 'flatbuffers';\nimport * as NS7624605610262437867 from './Schema';\n/**\n * ----------------------------------------------------------------------\n * Arrow File metadata\n *\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Footer {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Footer\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Footer {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Footer= obj\n         * @returns Footer\n         */\n        static getRootAsFooter(bb: flatbuffers.ByteBuffer, obj?: Footer): Footer {\n            return (obj || new Footer).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.MetadataVersion\n         */\n        version(): NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion.V1;\n        }\n\n        /**\n         * @param org.apache.arrow.flatbuf.Schema= obj\n         * @returns org.apache.arrow.flatbuf.Schema|null\n         */\n        schema(obj?: NS7624605610262437867.org.apache.arrow.flatbuf.Schema): NS7624605610262437867.org.apache.arrow.flatbuf.Schema | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? (obj || new NS7624605610262437867.org.apache.arrow.flatbuf.Schema).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;\n        }\n\n        /**\n         * @param number index\n         * @param org.apache.arrow.flatbuf.Block= obj\n         * @returns org.apache.arrow.flatbuf.Block\n         */\n        dictionaries(index: number, obj?: org.apache.arrow.flatbuf.Block): org.apache.arrow.flatbuf.Block | null {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? (obj || new org.apache.arrow.flatbuf.Block).__init(this.bb!.__vector(this.bb_pos + offset) + index * 24, this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        dictionariesLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param number index\n         * @param org.apache.arrow.flatbuf.Block= obj\n         * @returns org.apache.arrow.flatbuf.Block\n         */\n        recordBatches(index: number, obj?: org.apache.arrow.flatbuf.Block): org.apache.arrow.flatbuf.Block | null {\n            let offset = this.bb!.__offset(this.bb_pos, 10);\n            return offset ? (obj || new org.apache.arrow.flatbuf.Block).__init(this.bb!.__vector(this.bb_pos + offset) + index * 24, this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        recordBatchesLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 10);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startFooter(builder: flatbuffers.Builder) {\n            builder.startObject(4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.MetadataVersion version\n         */\n        static addVersion(builder: flatbuffers.Builder, version: NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion) {\n            builder.addFieldInt16(0, version, NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion.V1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset schemaOffset\n         */\n        static addSchema(builder: flatbuffers.Builder, schemaOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, schemaOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset dictionariesOffset\n         */\n        static addDictionaries(builder: flatbuffers.Builder, dictionariesOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(2, dictionariesOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startDictionariesVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(24, numElems, 8);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset recordBatchesOffset\n         */\n        static addRecordBatches(builder: flatbuffers.Builder, recordBatchesOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(3, recordBatchesOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startRecordBatchesVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(24, numElems, 8);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endFooter(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset offset\n         */\n        static finishFooterBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n            builder.finish(offset);\n        }\n\n        static createFooter(builder: flatbuffers.Builder, version: NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion, schemaOffset: flatbuffers.Offset, dictionariesOffset: flatbuffers.Offset, recordBatchesOffset: flatbuffers.Offset): flatbuffers.Offset {\n            Footer.startFooter(builder);\n            Footer.addVersion(builder, version);\n            Footer.addSchema(builder, schemaOffset);\n            Footer.addDictionaries(builder, dictionariesOffset);\n            Footer.addRecordBatches(builder, recordBatchesOffset);\n            return Footer.endFooter(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Block {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Block\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Block {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * Index to the start of the RecordBlock (note this is past the Message header)\n         *\n         * @returns flatbuffers.Long\n         */\n        offset(): flatbuffers.Long {\n            return this.bb!.readInt64(this.bb_pos);\n        }\n\n        /**\n         * Length of the metadata\n         *\n         * @returns number\n         */\n        metaDataLength(): number {\n            return this.bb!.readInt32(this.bb_pos + 8);\n        }\n\n        /**\n         * Length of the data (this is aligned so there can be a gap between this and\n         * the metatdata).\n         *\n         * @returns flatbuffers.Long\n         */\n        bodyLength(): flatbuffers.Long {\n            return this.bb!.readInt64(this.bb_pos + 16);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long offset\n         * @param number metaDataLength\n         * @param flatbuffers.Long bodyLength\n         * @returns flatbuffers.Offset\n         */\n        static createBlock(builder: flatbuffers.Builder, offset: flatbuffers.Long, metaDataLength: number, bodyLength: flatbuffers.Long): flatbuffers.Offset {\n            builder.prep(8, 24);\n            builder.writeInt64(bodyLength);\n            builder.pad(4);\n            builder.writeInt32(metaDataLength);\n            builder.writeInt64(offset);\n            return builder.offset();\n        }\n\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { DataType } from '../type';\nimport { Visitor } from '../visitor';\nimport { VectorType, BuilderCtor } from '../interfaces';\nimport { BinaryBuilder } from '../builder/binary';\nimport { BoolBuilder } from '../builder/bool';\nimport { DateBuilder, DateDayBuilder, DateMillisecondBuilder } from '../builder/date';\nimport { DecimalBuilder } from '../builder/decimal';\nimport { DictionaryBuilder } from '../builder/dictionary';\nimport { FixedSizeBinaryBuilder } from '../builder/fixedsizebinary';\nimport { FixedSizeListBuilder } from '../builder/fixedsizelist';\nimport { FloatBuilder, Float16Builder, Float32Builder, Float64Builder } from '../builder/float';\nimport { IntervalBuilder, IntervalDayTimeBuilder, IntervalYearMonthBuilder } from '../builder/interval';\nimport { IntBuilder, Int8Builder, Int16Builder, Int32Builder, Int64Builder, Uint8Builder, Uint16Builder, Uint32Builder, Uint64Builder } from '../builder/int';\nimport { ListBuilder } from '../builder/list';\nimport { MapBuilder } from '../builder/map';\nimport { NullBuilder } from '../builder/null';\nimport { StructBuilder } from '../builder/struct';\nimport { TimestampBuilder, TimestampSecondBuilder, TimestampMillisecondBuilder, TimestampMicrosecondBuilder, TimestampNanosecondBuilder } from '../builder/timestamp';\nimport { TimeBuilder, TimeSecondBuilder, TimeMillisecondBuilder, TimeMicrosecondBuilder, TimeNanosecondBuilder } from '../builder/time';\nimport { UnionBuilder, DenseUnionBuilder, SparseUnionBuilder } from '../builder/union';\nimport { Utf8Builder } from '../builder/utf8';\n\n/** @ignore */\nexport interface GetBuilderCtor extends Visitor {\n    visit<T extends Type>(type: T): BuilderCtor<T>;\n    visitMany<T extends Type>(types: T[]): BuilderCtor<T>[];\n    getVisitFn<T extends Type>(type: T): () => BuilderCtor<T>;\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): () => BuilderCtor<T>;\n}\n\n/** @ignore */\nexport class GetBuilderCtor extends Visitor {\n    public visitNull                 () { return NullBuilder;                 }\n    public visitBool                 () { return BoolBuilder;                 }\n    public visitInt                  () { return IntBuilder;                  }\n    public visitInt8                 () { return Int8Builder;                 }\n    public visitInt16                () { return Int16Builder;                }\n    public visitInt32                () { return Int32Builder;                }\n    public visitInt64                () { return Int64Builder;                }\n    public visitUint8                () { return Uint8Builder;                }\n    public visitUint16               () { return Uint16Builder;               }\n    public visitUint32               () { return Uint32Builder;               }\n    public visitUint64               () { return Uint64Builder;               }\n    public visitFloat                () { return FloatBuilder;                }\n    public visitFloat16              () { return Float16Builder;              }\n    public visitFloat32              () { return Float32Builder;              }\n    public visitFloat64              () { return Float64Builder;              }\n    public visitUtf8                 () { return Utf8Builder;                 }\n    public visitBinary               () { return BinaryBuilder;               }\n    public visitFixedSizeBinary      () { return FixedSizeBinaryBuilder;      }\n    public visitDate                 () { return DateBuilder;                 }\n    public visitDateDay              () { return DateDayBuilder;              }\n    public visitDateMillisecond      () { return DateMillisecondBuilder;      }\n    public visitTimestamp            () { return TimestampBuilder;            }\n    public visitTimestampSecond      () { return TimestampSecondBuilder;      }\n    public visitTimestampMillisecond () { return TimestampMillisecondBuilder; }\n    public visitTimestampMicrosecond () { return TimestampMicrosecondBuilder; }\n    public visitTimestampNanosecond  () { return TimestampNanosecondBuilder;  }\n    public visitTime                 () { return TimeBuilder;                 }\n    public visitTimeSecond           () { return TimeSecondBuilder;           }\n    public visitTimeMillisecond      () { return TimeMillisecondBuilder;      }\n    public visitTimeMicrosecond      () { return TimeMicrosecondBuilder;      }\n    public visitTimeNanosecond       () { return TimeNanosecondBuilder;       }\n    public visitDecimal              () { return DecimalBuilder;              }\n    public visitList                 () { return ListBuilder;                 }\n    public visitStruct               () { return StructBuilder;               }\n    public visitUnion                () { return UnionBuilder;                }\n    public visitDenseUnion           () { return DenseUnionBuilder;           }\n    public visitSparseUnion          () { return SparseUnionBuilder;          }\n    public visitDictionary           () { return DictionaryBuilder;           }\n    public visitInterval             () { return IntervalBuilder;             }\n    public visitIntervalDayTime      () { return IntervalDayTimeBuilder;      }\n    public visitIntervalYearMonth    () { return IntervalYearMonthBuilder;    }\n    public visitFixedSizeList        () { return FixedSizeListBuilder;        }\n    public visitMap                  () { return MapBuilder;                  }\n}\n\n/** @ignore */\nexport const instance = new GetBuilderCtor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/* tslint:disable:class-name */\n\nimport * as File_ from '../../fb/File';\nimport { flatbuffers } from 'flatbuffers';\n\nimport Long = flatbuffers.Long;\nimport Builder = flatbuffers.Builder;\nimport ByteBuffer = flatbuffers.ByteBuffer;\nimport _Block = File_.org.apache.arrow.flatbuf.Block;\nimport _Footer = File_.org.apache.arrow.flatbuf.Footer;\n\nimport { Schema } from '../../schema';\nimport { MetadataVersion } from '../../enum';\nimport { toUint8Array } from '../../util/buffer';\nimport { ArrayBufferViewInput } from '../../util/buffer';\n\n/** @ignore */\nclass Footer_ {\n\n    /** @nocollapse */\n    public static decode(buf: ArrayBufferViewInput) {\n        buf = new ByteBuffer(toUint8Array(buf));\n        const footer = _Footer.getRootAsFooter(buf);\n        const schema = Schema.decode(footer.schema()!);\n        return new OffHeapFooter(schema, footer) as Footer_;\n    }\n\n    /** @nocollapse */\n    public static encode(footer: Footer_) {\n\n        const b: Builder = new Builder();\n        const schemaOffset = Schema.encode(b, footer.schema);\n\n        _Footer.startRecordBatchesVector(b, footer.numRecordBatches);\n        [...footer.recordBatches()].slice().reverse().forEach((rb) => FileBlock.encode(b, rb));\n        const recordBatchesOffset = b.endVector();\n\n        _Footer.startDictionariesVector(b, footer.numDictionaries);\n        [...footer.dictionaryBatches()].slice().reverse().forEach((db) => FileBlock.encode(b, db));\n\n        const dictionaryBatchesOffset = b.endVector();\n\n        _Footer.startFooter(b);\n        _Footer.addSchema(b, schemaOffset);\n        _Footer.addVersion(b, MetadataVersion.V4);\n        _Footer.addRecordBatches(b, recordBatchesOffset);\n        _Footer.addDictionaries(b, dictionaryBatchesOffset);\n        _Footer.finishFooterBuffer(b, _Footer.endFooter(b));\n\n        return b.asUint8Array();\n    }\n\n    // @ts-ignore\n    protected _recordBatches: FileBlock[];\n    // @ts-ignore\n    protected _dictionaryBatches: FileBlock[];\n    public get numRecordBatches() { return this._recordBatches.length; }\n    public get numDictionaries() { return this._dictionaryBatches.length; }\n\n    constructor(public schema: Schema,\n                public version: MetadataVersion = MetadataVersion.V4,\n                recordBatches?: FileBlock[], dictionaryBatches?: FileBlock[]) {\n        recordBatches && (this._recordBatches = recordBatches);\n        dictionaryBatches && (this._dictionaryBatches = dictionaryBatches);\n    }\n\n    public *recordBatches(): Iterable<FileBlock> {\n        for (let block, i = -1, n = this.numRecordBatches; ++i < n;) {\n            if (block = this.getRecordBatch(i)) { yield block; }\n        }\n    }\n\n    public *dictionaryBatches(): Iterable<FileBlock> {\n        for (let block, i = -1, n = this.numDictionaries; ++i < n;) {\n            if (block = this.getDictionaryBatch(i)) { yield block; }\n        }\n    }\n\n    public getRecordBatch(index: number) {\n        return index >= 0\n            && index < this.numRecordBatches\n            && this._recordBatches[index] || null;\n    }\n\n    public getDictionaryBatch(index: number) {\n        return index >= 0\n            && index < this.numDictionaries\n            && this._dictionaryBatches[index] || null;\n    }\n}\n\nexport { Footer_ as Footer };\n\n/** @ignore */\nclass OffHeapFooter extends Footer_ {\n\n    public get numRecordBatches() { return this._footer.recordBatchesLength(); }\n    public get numDictionaries() { return this._footer.dictionariesLength(); }\n\n    constructor(schema: Schema, protected _footer: _Footer) {\n        super(schema, _footer.version());\n    }\n\n    public getRecordBatch(index: number) {\n        if (index >= 0 && index < this.numRecordBatches) {\n            const fileBlock = this._footer.recordBatches(index);\n            if (fileBlock) { return FileBlock.decode(fileBlock); }\n        }\n        return null;\n    }\n\n    public getDictionaryBatch(index: number) {\n        if (index >= 0 && index < this.numDictionaries) {\n            const fileBlock = this._footer.dictionaries(index);\n            if (fileBlock) { return FileBlock.decode(fileBlock); }\n        }\n        return null;\n    }\n}\n\n/** @ignore */\nexport class FileBlock {\n\n    /** @nocollapse */\n    public static decode(block: _Block) {\n        return new FileBlock(block.metaDataLength(), block.bodyLength(), block.offset());\n    }\n\n    /** @nocollapse */\n    public static encode(b: Builder, fileBlock: FileBlock) {\n        const { metaDataLength } = fileBlock;\n        const offset = new Long(fileBlock.offset, 0);\n        const bodyLength = new Long(fileBlock.bodyLength, 0);\n        return _Block.createBlock(b, offset, metaDataLength, bodyLength);\n    }\n\n    public offset: number;\n    public bodyLength: number;\n    public metaDataLength: number;\n\n    constructor(metaDataLength: number, bodyLength: Long | number, offset: Long | number) {\n        this.metaDataLength = metaDataLength;\n        this.offset = typeof offset === 'number' ? offset : offset.low;\n        this.bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/** @ignore */\nexport { Builder, BuilderOptions } from '../builder';\nexport { BoolBuilder } from './bool';\nexport { NullBuilder } from './null';\nexport { DateBuilder, DateDayBuilder, DateMillisecondBuilder } from './date';\nexport { DecimalBuilder } from './decimal';\nexport { DictionaryBuilder } from './dictionary';\nexport { FixedSizeBinaryBuilder } from './fixedsizebinary';\nexport { FloatBuilder, Float16Builder, Float32Builder, Float64Builder } from './float';\nexport { IntBuilder, Int8Builder, Int16Builder, Int32Builder, Int64Builder, Uint8Builder, Uint16Builder, Uint32Builder, Uint64Builder } from './int';\nexport { TimeBuilder, TimeSecondBuilder, TimeMillisecondBuilder, TimeMicrosecondBuilder, TimeNanosecondBuilder } from './time';\nexport { TimestampBuilder, TimestampSecondBuilder, TimestampMillisecondBuilder, TimestampMicrosecondBuilder, TimestampNanosecondBuilder } from './timestamp';\nexport { IntervalBuilder, IntervalDayTimeBuilder, IntervalYearMonthBuilder } from './interval';\nexport { Utf8Builder } from './utf8';\nexport { BinaryBuilder } from './binary';\nexport { ListBuilder } from './list';\nexport { FixedSizeListBuilder } from './fixedsizelist';\nexport { MapBuilder } from './map';\nexport { StructBuilder } from './struct';\nexport { UnionBuilder, SparseUnionBuilder, DenseUnionBuilder } from './union';\n\nimport { Type } from '../enum';\nimport { Field } from '../schema';\nimport { DataType } from '../type';\nimport { Utf8Builder } from './utf8';\nimport { BuilderType as B } from '../interfaces';\nimport { Builder, BuilderOptions } from '../builder';\nimport { instance as setVisitor } from '../visitor/set';\nimport { instance as getBuilderConstructor } from '../visitor/builderctor';\n\n/** @nocollapse */\nBuilder.new = newBuilder;\n\nfunction newBuilder<T extends DataType = any, TNull = any>(options: BuilderOptions<T, TNull>): B<T, TNull> {\n\n    const type = options.type;\n    const builder = new (getBuilderConstructor.getVisitFn<T>(type)())(options) as Builder<T, TNull>;\n\n    if (type.children && type.children.length > 0) {\n\n        const children = options['children'] || [] as BuilderOptions[];\n        const defaultOptions = { 'nullValues': options['nullValues'] };\n        const getChildOptions = Array.isArray(children)\n            ? ((_: Field, i: number) => children[i] || defaultOptions)\n            : (({ name }: Field) => children[name] || defaultOptions);\n\n        type.children.forEach((field, index) => {\n            const { type } = field;\n            const opts = getChildOptions(field, index);\n            builder.children.push(newBuilder({ ...opts, type }));\n        });\n    }\n\n    return builder as B<T, TNull>;\n}\n\n(Object.keys(Type) as any[])\n    .map((T: any) => Type[T] as any)\n    .filter((T: any): T is Type => typeof T === 'number' && T !== Type.NONE)\n    .forEach((typeId) => {\n        const BuilderCtor = getBuilderConstructor.visit(typeId);\n        BuilderCtor.prototype._setValue = setVisitor.getVisitFn(typeId);\n    });\n\n(Utf8Builder.prototype as any)._setValue = setVisitor.visitBinary;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport streamAdapters from './adapters';\nimport { decodeUtf8 } from '../util/utf8';\nimport { ITERATOR_DONE, Readable, Writable, AsyncQueue } from './interfaces';\nimport { toUint8Array, joinUint8Arrays, ArrayBufferViewInput } from '../util/buffer';\n\nimport {\n    isPromise, isFetchResponse,\n    isIterable, isAsyncIterable,\n    isReadableDOMStream, isReadableNodeStream\n} from '../util/compat';\n\n/** @ignore */\nexport type WritableSink<T> = Writable<T> | WritableStream<T> | NodeJS.WritableStream | null;\n/** @ignore */\nexport type ReadableSource<T> = Readable<T> | PromiseLike<T> | AsyncIterable<T> | ReadableStream<T> | NodeJS.ReadableStream | null;\n\n/** @ignore */\nexport class AsyncByteQueue<T extends ArrayBufferViewInput = Uint8Array> extends AsyncQueue<Uint8Array, T> {\n    public write(value: ArrayBufferViewInput | Uint8Array) {\n        if ((value = toUint8Array(value)).byteLength > 0) {\n            return super.write(value as T);\n        }\n    }\n    public toString(sync: true): string;\n    public toString(sync?: false): Promise<string>;\n    public toString(sync = false) {\n        return sync\n            ? decodeUtf8(this.toUint8Array(true))\n            : this.toUint8Array(false).then(decodeUtf8);\n    }\n    public toUint8Array(sync: true): Uint8Array;\n    public toUint8Array(sync?: false): Promise<Uint8Array>;\n    public toUint8Array(sync = false) {\n        return sync ? joinUint8Arrays(this._values as any[])[0] : (async () => {\n            let buffers = [], byteLength = 0;\n            for await (const chunk of this) {\n                buffers.push(chunk);\n                byteLength += chunk.byteLength;\n            }\n            return joinUint8Arrays(buffers, byteLength)[0];\n        })();\n    }\n}\n\n/** @ignore */\nexport class ByteStream implements IterableIterator<Uint8Array> {\n    // @ts-ignore\n    private source: ByteStreamSource<Uint8Array>;\n    constructor(source?: Iterable<ArrayBufferViewInput> | ArrayBufferViewInput) {\n        if (source) {\n            this.source = new ByteStreamSource(streamAdapters.fromIterable(source));\n        }\n    }\n    [Symbol.iterator]() { return this; }\n    public next(value?: any) { return this.source.next(value); }\n    public throw(value?: any) { return this.source.throw(value); }\n    public return(value?: any) { return this.source.return(value); }\n    public peek(size?: number | null) { return this.source.peek(size); }\n    public read(size?: number | null) { return this.source.read(size); }\n}\n\n/** @ignore */\nexport class AsyncByteStream implements Readable<Uint8Array>, AsyncIterableIterator<Uint8Array> {\n    // @ts-ignore\n    private source: AsyncByteStreamSource<Uint8Array>;\n    constructor(source?: PromiseLike<ArrayBufferViewInput> | Response | ReadableStream<ArrayBufferViewInput> | NodeJS.ReadableStream | AsyncIterable<ArrayBufferViewInput> | Iterable<ArrayBufferViewInput>) {\n        if (source instanceof AsyncByteStream) {\n            this.source = (source as AsyncByteStream).source;\n        } else if (source instanceof AsyncByteQueue) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\n        } else if (isReadableNodeStream(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromNodeStream(source));\n        } else if (isReadableDOMStream<ArrayBufferViewInput>(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromDOMStream(source));\n        } else if (isFetchResponse(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromDOMStream(source.body!));\n        } else if (isIterable<ArrayBufferViewInput>(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromIterable(source));\n        } else if (isPromise<ArrayBufferViewInput>(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\n        } else if (isAsyncIterable<ArrayBufferViewInput>(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\n        }\n    }\n    [Symbol.asyncIterator]() { return this; }\n    public next(value?: any) { return this.source.next(value); }\n    public throw(value?: any) { return this.source.throw(value); }\n    public return(value?: any) { return this.source.return(value); }\n    public get closed(): Promise<void> { return this.source.closed; }\n    public cancel(reason?: any) { return this.source.cancel(reason); }\n    public peek(size?: number | null) { return this.source.peek(size); }\n    public read(size?: number | null) { return this.source.read(size); }\n}\n\n/** @ignore */\ninterface ByteStreamSourceIterator<T> extends IterableIterator<T> {\n    next(value?: { cmd: 'peek' | 'read', size?: number | null }): IteratorResult<T>;\n}\n\n/** @ignore */\ninterface AsyncByteStreamSourceIterator<T> extends AsyncIterableIterator<T> {\n    next(value?: { cmd: 'peek' | 'read', size?: number | null }): Promise<IteratorResult<T>>;\n}\n\n/** @ignore */\nclass ByteStreamSource<T> {\n    constructor(protected source: ByteStreamSourceIterator<T>) {}\n    public cancel(reason?: any) { this.return(reason); }\n    public peek(size?: number | null): T | null { return this.next(size, 'peek').value; }\n    public read(size?: number | null): T | null { return this.next(size, 'read').value; }\n    public next(size?: number | null, cmd: 'peek' | 'read' = 'read') { return this.source.next({ cmd, size }); }\n    public throw(value?: any) { return Object.create((this.source.throw && this.source.throw(value)) || ITERATOR_DONE); }\n    public return(value?: any) { return Object.create((this.source.return && this.source.return(value)) || ITERATOR_DONE); }\n}\n\n/** @ignore */\nclass AsyncByteStreamSource<T> implements Readable<T> {\n\n    private _closedPromise: Promise<void>;\n    private _closedPromiseResolve?: (value?: any) => void;\n    constructor (protected source: ByteStreamSourceIterator<T> | AsyncByteStreamSourceIterator<T>) {\n        this._closedPromise = new Promise((r) => this._closedPromiseResolve = r);\n    }\n    public async cancel(reason?: any) { await this.return(reason); }\n    public get closed(): Promise<void> { return this._closedPromise; }\n    public async read(size?: number | null): Promise<T | null> { return (await this.next(size, 'read')).value; }\n    public async peek(size?: number | null): Promise<T | null> { return (await this.next(size, 'peek')).value; }\n    public async next(size?: number | null, cmd: 'peek' | 'read' = 'read') { return (await this.source.next({ cmd, size })); }\n    public async throw(value?: any) {\n        const result = (this.source.throw && await this.source.throw(value)) || ITERATOR_DONE;\n        this._closedPromiseResolve && this._closedPromiseResolve();\n        this._closedPromiseResolve = undefined;\n        return Object.create(result);\n    }\n    public async return(value?: any) {\n        const result = (this.source.return && await this.source.return(value)) || ITERATOR_DONE;\n        this._closedPromiseResolve && this._closedPromiseResolve();\n        this._closedPromiseResolve = undefined;\n        return Object.create(result);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { FileHandle } from './interfaces';\nimport { ByteStream, AsyncByteStream } from './stream';\nimport { ArrayBufferViewInput, toUint8Array } from '../util/buffer';\n\n/** @ignore */\nexport class RandomAccessFile extends ByteStream {\n    public size: number;\n    public position: number = 0;\n    protected buffer: Uint8Array | null;\n    constructor(buffer: ArrayBufferViewInput, byteLength?: number) {\n        super();\n        this.buffer = toUint8Array(buffer);\n        this.size = typeof byteLength === 'undefined' ? this.buffer.byteLength : byteLength;\n    }\n    public readInt32(position: number) {\n        const { buffer, byteOffset } = this.readAt(position, 4);\n        return new DataView(buffer, byteOffset).getInt32(0, true);\n    }\n    public seek(position: number) {\n        this.position = Math.min(position, this.size);\n        return position < this.size;\n    }\n    public read(nBytes?: number | null) {\n        const { buffer, size, position } = this;\n        if (buffer && position < size) {\n            if (typeof nBytes !== 'number') { nBytes = Infinity; }\n            this.position = Math.min(size,\n                 position + Math.min(size - position, nBytes));\n            return buffer.subarray(position, this.position);\n        }\n        return null;\n    }\n    public readAt(position: number, nBytes: number) {\n        const buf = this.buffer;\n        const end = Math.min(this.size, position + nBytes);\n        return buf ? buf.subarray(position, end) : new Uint8Array(nBytes);\n    }\n    public close() { this.buffer && (this.buffer = null); }\n    public throw(value?: any) { this.close(); return { done: true, value }; }\n    public return(value?: any) { this.close(); return { done: true, value }; }\n}\n\n/** @ignore */\nexport class AsyncRandomAccessFile extends AsyncByteStream {\n    // @ts-ignore\n    public size: number;\n    public position: number = 0;\n    public _pending?: Promise<void>;\n    protected _handle: FileHandle | null;\n    constructor(file: FileHandle, byteLength?: number) {\n        super();\n        this._handle = file;\n        if (typeof byteLength === 'number') {\n            this.size = byteLength;\n        } else {\n            this._pending = (async () => {\n                this.size = (await file.stat()).size;\n                delete this._pending;\n            })();\n        }\n    }\n    public async readInt32(position: number) {\n        const { buffer, byteOffset } = await this.readAt(position, 4);\n        return new DataView(buffer, byteOffset).getInt32(0, true);\n    }\n    public async seek(position: number) {\n        this._pending && await this._pending;\n        this.position = Math.min(position, this.size);\n        return position < this.size;\n    }\n    public async read(nBytes?: number | null) {\n        this._pending && await this._pending;\n        const { _handle: file, size, position } = this;\n        if (file && position < size) {\n            if (typeof nBytes !== 'number') { nBytes = Infinity; }\n            let pos = position, offset = 0, bytesRead = 0;\n            let end = Math.min(size, pos + Math.min(size - pos, nBytes));\n            let buffer = new Uint8Array(Math.max(0, (this.position = end) - pos));\n            while ((pos += bytesRead) < end && (offset += bytesRead) < buffer.byteLength) {\n                ({ bytesRead } = await file.read(buffer, offset, buffer.byteLength - offset, pos));\n            }\n            return buffer;\n        }\n        return null;\n    }\n    public async readAt(position: number, nBytes: number) {\n        this._pending && await this._pending;\n        const { _handle: file, size } = this;\n        if (file && (position + nBytes) < size) {\n            const end = Math.min(size, position + nBytes);\n            const buffer = new Uint8Array(end - position);\n            return (await file.read(buffer, 0, nBytes, position)).buffer;\n        }\n        return new Uint8Array(nBytes);\n    }\n    public async close() { const f = this._handle; this._handle = null; f && await f.close(); }\n    public async throw(value?: any) { await this.close(); return { done: true, value }; }\n    public async return(value?: any) { await this.close(); return { done: true, value }; }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/** @ignore */\nconst carryBit16 = 1 << 16;\n\n/** @ignore */\nfunction intAsHex(value: number): string {\n    if (value < 0) {\n        value = 0xFFFFFFFF + value + 1;\n    }\n    return `0x${value.toString(16)}`;\n}\n\n/** @ignore */\nconst kInt32DecimalDigits = 8;\n/** @ignore */\nconst kPowersOfTen = [1,\n                      10,\n                      100,\n                      1000,\n                      10000,\n                      100000,\n                      1000000,\n                      10000000,\n                      100000000];\n\n/** @ignore */\nexport class BaseInt64 {\n    constructor (protected buffer: Uint32Array) {}\n\n    public high(): number { return this.buffer[1]; }\n    public low (): number { return this.buffer[0]; }\n\n    protected _times(other: BaseInt64) {\n        // Break the left and right numbers into 16 bit chunks\n        // so that we can multiply them without overflow.\n        const L = new Uint32Array([\n            this.buffer[1] >>> 16,\n            this.buffer[1] & 0xFFFF,\n            this.buffer[0] >>> 16,\n            this.buffer[0] & 0xFFFF\n        ]);\n\n        const R = new Uint32Array([\n            other.buffer[1] >>> 16,\n            other.buffer[1] & 0xFFFF,\n            other.buffer[0] >>> 16,\n            other.buffer[0] & 0xFFFF\n        ]);\n\n        let product = L[3] * R[3];\n        this.buffer[0] = product & 0xFFFF;\n\n        let sum = product >>> 16;\n\n        product = L[2] * R[3];\n        sum += product;\n\n        product = (L[3] * R[2]) >>> 0;\n        sum += product;\n\n        this.buffer[0] += sum << 16;\n\n        this.buffer[1] = (sum >>> 0 < product ? carryBit16 : 0);\n\n        this.buffer[1] += sum >>> 16;\n        this.buffer[1] += L[1] * R[3] + L[2] * R[2] + L[3] * R[1];\n        this.buffer[1] += (L[0] * R[3] + L[1] * R[2] + L[2] * R[1] + L[3] * R[0]) << 16;\n\n        return this;\n      }\n\n    protected _plus(other: BaseInt64) {\n        const sum = (this.buffer[0] + other.buffer[0]) >>> 0;\n        this.buffer[1] += other.buffer[1];\n        if (sum < (this.buffer[0] >>> 0)) {\n          ++this.buffer[1];\n        }\n        this.buffer[0] = sum;\n    }\n\n    public lessThan(other: BaseInt64): boolean {\n        return this.buffer[1] < other.buffer[1] ||\n            (this.buffer[1] === other.buffer[1] && this.buffer[0] < other.buffer[0]);\n    }\n\n    public equals(other: BaseInt64): boolean {\n        return this.buffer[1] === other.buffer[1] && this.buffer[0] == other.buffer[0];\n    }\n\n    public greaterThan(other: BaseInt64): boolean {\n        return other.lessThan(this);\n    }\n\n    public hex(): string {\n        return `${intAsHex(this.buffer[1])} ${intAsHex(this.buffer[0])}`;\n    }\n}\n\n/** @ignore */\nexport class Uint64 extends BaseInt64 {\n    public times(other: Uint64): Uint64 {\n        this._times(other);\n        return this;\n    }\n\n    public plus(other: Uint64): Uint64 {\n        this._plus(other);\n        return this;\n    }\n\n    /** @nocollapse */\n    public static from(val: any, out_buffer = new Uint32Array(2)): Uint64 {\n        return Uint64.fromString(\n            typeof(val) === 'string' ? val : val.toString(),\n            out_buffer\n        );\n    }\n\n    /** @nocollapse */\n    public static fromNumber(num: number, out_buffer = new Uint32Array(2)): Uint64 {\n        // Always parse numbers as strings - pulling out high and low bits\n        // directly seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        return Uint64.fromString(num.toString(), out_buffer);\n    }\n\n    /** @nocollapse */\n    public static fromString(str: string, out_buffer = new Uint32Array(2)): Uint64 {\n        const length = str.length;\n\n        let out = new Uint64(out_buffer);\n        for (let posn = 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                          kInt32DecimalDigits : length - posn;\n            const chunk = new Uint64(new Uint32Array([parseInt(str.substr(posn, group), 10), 0]));\n            const multiple = new Uint64(new Uint32Array([kPowersOfTen[group], 0]));\n\n            out.times(multiple);\n            out.plus(chunk);\n\n            posn += group;\n        }\n\n        return out;\n    }\n\n    /** @nocollapse */\n    public static convertArray(values: (string|number)[]): Uint32Array {\n        const data = new Uint32Array(values.length * 2);\n        for (let i = -1, n = values.length; ++i < n;) {\n            Uint64.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));\n        }\n        return data;\n    }\n\n    /** @nocollapse */\n    public static multiply(left: Uint64, right: Uint64): Uint64 {\n        let rtrn = new Uint64(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n\n    /** @nocollapse */\n    public static add(left: Uint64, right: Uint64): Uint64 {\n        let rtrn = new Uint64(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n}\n\n/** @ignore */\nexport class Int64 extends BaseInt64 {\n    public negate(): Int64 {\n        this.buffer[0] = ~this.buffer[0] + 1;\n        this.buffer[1] = ~this.buffer[1];\n\n        if (this.buffer[0] == 0) { ++this.buffer[1]; }\n        return this;\n    }\n\n    public times(other: Int64): Int64 {\n        this._times(other);\n        return this;\n    }\n\n    public plus(other: Int64): Int64 {\n        this._plus(other);\n        return this;\n    }\n\n    public lessThan(other: Int64): boolean {\n        // force high bytes to be signed\n        const this_high = this.buffer[1] << 0;\n        const other_high = other.buffer[1] << 0;\n        return this_high < other_high ||\n            (this_high === other_high && this.buffer[0] < other.buffer[0]);\n    }\n\n    /** @nocollapse */\n    public static from(val: any, out_buffer = new Uint32Array(2)): Int64 {\n        return Int64.fromString(\n            typeof(val) === 'string' ? val : val.toString(),\n            out_buffer\n        );\n    }\n\n    /** @nocollapse */\n    public static fromNumber(num: number, out_buffer = new Uint32Array(2)): Int64 {\n        // Always parse numbers as strings - pulling out high and low bits\n        // directly seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        return Int64.fromString(num.toString(), out_buffer);\n    }\n\n    /** @nocollapse */\n    public static fromString(str: string, out_buffer = new Uint32Array(2)): Int64 {\n        // TODO: Assert that out_buffer is 0 and length = 2\n        const negate = str.startsWith('-');\n        const length = str.length;\n\n        let out = new Int64(out_buffer);\n        for (let posn = negate ? 1 : 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                          kInt32DecimalDigits : length - posn;\n            const chunk = new Int64(new Uint32Array([parseInt(str.substr(posn, group), 10), 0]));\n            const multiple = new Int64(new Uint32Array([kPowersOfTen[group], 0]));\n\n            out.times(multiple);\n            out.plus(chunk);\n\n            posn += group;\n        }\n        return negate ? out.negate() : out;\n    }\n\n    /** @nocollapse */\n    public static convertArray(values: (string|number)[]): Uint32Array {\n        const data = new Uint32Array(values.length * 2);\n        for (let i = -1, n = values.length; ++i < n;) {\n            Int64.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));\n        }\n        return data;\n    }\n\n    /** @nocollapse */\n    public static multiply(left: Int64, right: Int64): Int64 {\n        let rtrn = new Int64(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n\n    /** @nocollapse */\n    public static add(left: Int64, right: Int64): Int64 {\n        let rtrn = new Int64(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n}\n\n/** @ignore */\nexport class Int128 {\n    constructor (private buffer: Uint32Array) {\n        // buffer[3] MSB (high)\n        // buffer[2]\n        // buffer[1]\n        // buffer[0] LSB (low)\n    }\n\n    public high(): Int64 {\n        return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));\n    }\n\n    public low(): Int64 {\n        return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset, 2));\n    }\n\n    public negate(): Int128 {\n        this.buffer[0] = ~this.buffer[0] + 1;\n        this.buffer[1] = ~this.buffer[1];\n        this.buffer[2] = ~this.buffer[2];\n        this.buffer[3] = ~this.buffer[3];\n\n        if (this.buffer[0] == 0) { ++this.buffer[1]; }\n        if (this.buffer[1] == 0) { ++this.buffer[2]; }\n        if (this.buffer[2] == 0) { ++this.buffer[3]; }\n        return this;\n    }\n\n    public times(other: Int128): Int128 {\n        // Break the left and right numbers into 32 bit chunks\n        // so that we can multiply them without overflow.\n        const L0 = new Uint64(new Uint32Array([this.buffer[3],  0]));\n        const L1 = new Uint64(new Uint32Array([this.buffer[2],  0]));\n        const L2 = new Uint64(new Uint32Array([this.buffer[1],  0]));\n        const L3 = new Uint64(new Uint32Array([this.buffer[0],  0]));\n\n        const R0 = new Uint64(new Uint32Array([other.buffer[3], 0]));\n        const R1 = new Uint64(new Uint32Array([other.buffer[2], 0]));\n        const R2 = new Uint64(new Uint32Array([other.buffer[1], 0]));\n        const R3 = new Uint64(new Uint32Array([other.buffer[0], 0]));\n\n        let product = Uint64.multiply(L3, R3);\n        this.buffer[0] = product.low();\n\n        let sum = new Uint64(new Uint32Array([product.high(), 0]));\n\n        product = Uint64.multiply(L2, R3);\n        sum.plus(product);\n\n        product = Uint64.multiply(L3, R2);\n        sum.plus(product);\n\n        this.buffer[1] = sum.low();\n\n        this.buffer[3] = (sum.lessThan(product) ? 1 : 0);\n\n        this.buffer[2] = sum.high();\n        let high = new Uint64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));\n\n        high.plus(Uint64.multiply(L1, R3))\n            .plus(Uint64.multiply(L2, R2))\n            .plus(Uint64.multiply(L3, R1));\n        this.buffer[3] += Uint64.multiply(L0, R3)\n                        .plus(Uint64.multiply(L1, R2))\n                        .plus(Uint64.multiply(L2, R1))\n                        .plus(Uint64.multiply(L3, R0)).low();\n\n        return this;\n    }\n\n    public plus(other: Int128): Int128 {\n        let sums = new Uint32Array(4);\n        sums[3] = (this.buffer[3] + other.buffer[3]) >>> 0;\n        sums[2] = (this.buffer[2] + other.buffer[2]) >>> 0;\n        sums[1] = (this.buffer[1] + other.buffer[1]) >>> 0;\n        sums[0] = (this.buffer[0] + other.buffer[0]) >>> 0;\n\n        if (sums[0] < (this.buffer[0] >>> 0)) {\n            ++sums[1];\n        }\n        if (sums[1] < (this.buffer[1] >>> 0)) {\n            ++sums[2];\n        }\n        if (sums[2] < (this.buffer[2] >>> 0)) {\n            ++sums[3];\n        }\n\n        this.buffer[3] = sums[3];\n        this.buffer[2] = sums[2];\n        this.buffer[1] = sums[1];\n        this.buffer[0] = sums[0];\n\n        return this;\n    }\n\n    public hex(): string {\n        return `${intAsHex(this.buffer[3])} ${intAsHex(this.buffer[2])} ${intAsHex(this.buffer[1])} ${intAsHex(this.buffer[0])}`;\n    }\n\n    /** @nocollapse */\n    public static multiply(left: Int128, right: Int128): Int128 {\n        let rtrn = new Int128(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n\n    /** @nocollapse */\n    public static add(left: Int128, right: Int128): Int128 {\n        let rtrn = new Int128(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n\n    /** @nocollapse */\n    public static from(val: any, out_buffer = new Uint32Array(4)): Int128 {\n        return Int128.fromString(\n            typeof(val) === 'string' ? val : val.toString(),\n            out_buffer\n        );\n    }\n\n    /** @nocollapse */\n    public static fromNumber(num: number, out_buffer = new Uint32Array(4)): Int128 {\n        // Always parse numbers as strings - pulling out high and low bits\n        // directly seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        return Int128.fromString(num.toString(), out_buffer);\n    }\n\n    /** @nocollapse */\n    public static fromString(str: string, out_buffer = new Uint32Array(4)): Int128 {\n        // TODO: Assert that out_buffer is 0 and length = 4\n        const negate = str.startsWith('-');\n        const length = str.length;\n\n        let out = new Int128(out_buffer);\n        for (let posn = negate ? 1 : 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                          kInt32DecimalDigits : length - posn;\n            const chunk = new Int128(new Uint32Array([parseInt(str.substr(posn, group), 10), 0, 0, 0]));\n            const multiple = new Int128(new Uint32Array([kPowersOfTen[group], 0, 0, 0]));\n\n            out.times(multiple);\n            out.plus(chunk);\n\n            posn += group;\n        }\n\n        return negate ? out.negate() : out;\n    }\n\n    /** @nocollapse */\n    public static convertArray(values: (string|number)[]): Uint32Array {\n        // TODO: Distinguish between string and number at compile-time\n        const data = new Uint32Array(values.length * 4);\n        for (let i = -1, n = values.length; ++i < n;) {\n            Int128.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 4 * 4 * i, 4));\n        }\n        return data;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport * as type from '../type';\nimport { Field } from '../schema';\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { Visitor } from '../visitor';\nimport { packBools } from '../util/bit';\nimport { encodeUtf8 } from '../util/utf8';\nimport { Int64, Int128 } from '../util/int';\nimport { UnionMode, DateUnit } from '../enum';\nimport { toArrayBufferView } from '../util/buffer';\nimport { BufferRegion, FieldNode } from '../ipc/metadata/message';\n\n/** @ignore */\nexport interface VectorLoader extends Visitor {\n    visit<T extends DataType>(node: Field<T> | T): Data<T>;\n    visitMany<T extends DataType>(nodes: (Field<T> | T)[]): Data<T>[];\n}\n\n/** @ignore */\nexport class VectorLoader extends Visitor {\n    private bytes: Uint8Array;\n    private nodes: FieldNode[];\n    private nodesIndex: number = -1;\n    private buffers: BufferRegion[];\n    private buffersIndex: number = -1;\n    private dictionaries: Map<number, Vector<any>>;\n    constructor(bytes: Uint8Array, nodes: FieldNode[], buffers: BufferRegion[], dictionaries: Map<number, Vector<any>>) {\n        super();\n        this.bytes = bytes;\n        this.nodes = nodes;\n        this.buffers = buffers;\n        this.dictionaries = dictionaries;\n    }\n\n    public visit<T extends DataType>(node: Field<T> | T): Data<T> {\n        return super.visit(node instanceof Field ? node.type : node);\n    }\n\n    public visitNull            <T extends type.Null>            (type: T, { length,           } = this.nextFieldNode()) { return            Data.Null(type, 0, length);                                                                                                                                 }\n    public visitBool            <T extends type.Bool>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Bool(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitInt             <T extends type.Int>             (type: T, { length, nullCount } = this.nextFieldNode()) { return             Data.Int(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitFloat           <T extends type.Float>           (type: T, { length, nullCount } = this.nextFieldNode()) { return           Data.Float(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitUtf8            <T extends type.Utf8>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Utf8(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.readData(type));                                   }\n    public visitBinary          <T extends type.Binary>          (type: T, { length, nullCount } = this.nextFieldNode()) { return          Data.Binary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.readData(type));                                   }\n    public visitFixedSizeBinary <T extends type.FixedSizeBinary> (type: T, { length, nullCount } = this.nextFieldNode()) { return Data.FixedSizeBinary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitDate            <T extends type.Date_>           (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Date(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitTimestamp       <T extends type.Timestamp>       (type: T, { length, nullCount } = this.nextFieldNode()) { return       Data.Timestamp(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitTime            <T extends type.Time>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Time(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitDecimal         <T extends type.Decimal>         (type: T, { length, nullCount } = this.nextFieldNode()) { return         Data.Decimal(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitList            <T extends type.List>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.List(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.visit(type.children[0]));                          }\n    public visitStruct          <T extends type.Struct>          (type: T, { length, nullCount } = this.nextFieldNode()) { return          Data.Struct(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.visitMany(type.children));                                                 }\n    public visitUnion           <T extends type.Union>           (type: T                                              ) { return type.mode === UnionMode.Sparse ? this.visitSparseUnion(type as type.SparseUnion) : this.visitDenseUnion(type as type.DenseUnion);                                      }\n    public visitDenseUnion      <T extends type.DenseUnion>      (type: T, { length, nullCount } = this.nextFieldNode()) { return           Data.Union(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.readOffsets(type), this.visitMany(type.children)); }\n    public visitSparseUnion     <T extends type.SparseUnion>     (type: T, { length, nullCount } = this.nextFieldNode()) { return           Data.Union(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.visitMany(type.children));                         }\n    public visitDictionary      <T extends type.Dictionary>      (type: T, { length, nullCount } = this.nextFieldNode()) { return      Data.Dictionary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type.indices), this.readDictionary(type));                        }\n    public visitInterval        <T extends type.Interval>        (type: T, { length, nullCount } = this.nextFieldNode()) { return        Data.Interval(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitFixedSizeList   <T extends type.FixedSizeList>   (type: T, { length, nullCount } = this.nextFieldNode()) { return   Data.FixedSizeList(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.visit(type.children[0]));                                                  }\n    public visitMap             <T extends type.Map_>            (type: T, { length, nullCount } = this.nextFieldNode()) { return             Data.Map(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.visit(type.children[0]));                          }\n\n    protected nextFieldNode() { return this.nodes[++this.nodesIndex]; }\n    protected nextBufferRange() { return this.buffers[++this.buffersIndex]; }\n    protected readNullBitmap<T extends DataType>(type: T, nullCount: number, buffer = this.nextBufferRange()) {\n        return nullCount > 0 && this.readData(type, buffer) || new Uint8Array(0);\n    }\n    protected readOffsets<T extends DataType>(type: T, buffer?: BufferRegion) { return this.readData(type, buffer); }\n    protected readTypeIds<T extends DataType>(type: T, buffer?: BufferRegion) { return this.readData(type, buffer); }\n    protected readData<T extends DataType>(_type: T, { length, offset } = this.nextBufferRange()) {\n        return this.bytes.subarray(offset, offset + length);\n    }\n    protected readDictionary<T extends type.Dictionary>(type: T): Vector<T['dictionary']> {\n        return this.dictionaries.get(type.id)!;\n    }\n}\n\n/** @ignore */\nexport class JSONVectorLoader extends VectorLoader {\n    private sources: any[][];\n    constructor(sources: any[][], nodes: FieldNode[], buffers: BufferRegion[], dictionaries: Map<number, Vector<any>>) {\n        super(new Uint8Array(0), nodes, buffers, dictionaries);\n        this.sources = sources;\n    }\n    protected readNullBitmap<T extends DataType>(_type: T, nullCount: number, { offset } = this.nextBufferRange()) {\n        return nullCount <= 0 ? new Uint8Array(0) : packBools(this.sources[offset]);\n    }\n    protected readOffsets<T extends DataType>(_type: T, { offset } = this.nextBufferRange()) {\n        return toArrayBufferView(Uint8Array, toArrayBufferView(Int32Array, this.sources[offset]));\n    }\n    protected readTypeIds<T extends DataType>(type: T, { offset } = this.nextBufferRange()) {\n        return toArrayBufferView(Uint8Array, toArrayBufferView(type.ArrayType, this.sources[offset]));\n    }\n    protected readData<T extends DataType>(type: T, { offset } = this.nextBufferRange()) {\n        const { sources } = this;\n        if (DataType.isTimestamp(type)) {\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset] as string[]));\n        } else if ((DataType.isInt(type) || DataType.isTime(type)) && type.bitWidth === 64) {\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset] as string[]));\n        } else if (DataType.isDate(type) && type.unit === DateUnit.MILLISECOND) {\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset] as string[]));\n        } else if (DataType.isDecimal(type)) {\n            return toArrayBufferView(Uint8Array, Int128.convertArray(sources[offset] as string[]));\n        } else if (DataType.isBinary(type) || DataType.isFixedSizeBinary(type)) {\n            return binaryDataFromJSON(sources[offset] as string[]);\n        } else if (DataType.isBool(type)) {\n            return packBools(sources[offset] as number[]);\n        } else if (DataType.isUtf8(type)) {\n            return encodeUtf8((sources[offset] as string[]).join(''));\n        }\n        return toArrayBufferView(Uint8Array, toArrayBufferView(type.ArrayType, sources[offset].map((x) => +x)));\n    }\n}\n\n/** @ignore */\nfunction binaryDataFromJSON(values: string[]) {\n    // \"DATA\": [\"49BC7D5B6C47D2\",\"3F5FB6D9322026\"]\n    // There are definitely more efficient ways to do this... but it gets the\n    // job done.\n    const joined = values.join('');\n    const data = new Uint8Array(joined.length / 2);\n    for (let i = 0; i < joined.length; i += 2) {\n        data[i >> 1] = parseInt(joined.substr(i, 2), 16);\n    }\n    return data;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { flatbuffers } from 'flatbuffers';\nimport Long = flatbuffers.Long;\nimport Builder = flatbuffers.Builder;\nimport * as Schema_ from '../fb/Schema';\n\nimport * as type from '../type';\nimport { Visitor } from '../visitor';\n\nimport Null = Schema_.org.apache.arrow.flatbuf.Null;\nimport Int = Schema_.org.apache.arrow.flatbuf.Int;\nimport FloatingPoint = Schema_.org.apache.arrow.flatbuf.FloatingPoint;\nimport Binary = Schema_.org.apache.arrow.flatbuf.Binary;\nimport Bool = Schema_.org.apache.arrow.flatbuf.Bool;\nimport Utf8 = Schema_.org.apache.arrow.flatbuf.Utf8;\nimport Decimal = Schema_.org.apache.arrow.flatbuf.Decimal;\nimport Date = Schema_.org.apache.arrow.flatbuf.Date;\nimport Time = Schema_.org.apache.arrow.flatbuf.Time;\nimport Timestamp = Schema_.org.apache.arrow.flatbuf.Timestamp;\nimport Interval = Schema_.org.apache.arrow.flatbuf.Interval;\nimport List = Schema_.org.apache.arrow.flatbuf.List;\nimport Struct = Schema_.org.apache.arrow.flatbuf.Struct_;\nimport Union = Schema_.org.apache.arrow.flatbuf.Union;\nimport DictionaryEncoding = Schema_.org.apache.arrow.flatbuf.DictionaryEncoding;\nimport FixedSizeBinary = Schema_.org.apache.arrow.flatbuf.FixedSizeBinary;\nimport FixedSizeList = Schema_.org.apache.arrow.flatbuf.FixedSizeList;\nimport Map_ = Schema_.org.apache.arrow.flatbuf.Map;\n\n/** @ignore */\nexport interface TypeAssembler extends Visitor {\n    visit<T extends type.DataType>(node: T, builder: Builder): number | undefined;\n}\n\n/** @ignore */\nexport class TypeAssembler extends Visitor {\n    public visit<T extends type.DataType>(node: T, builder: Builder): number | undefined {\n        return (node == null || builder == null) ? undefined : super.visit(node, builder);\n    }\n    public visitNull<T extends type.Null>(_node: T, b: Builder) {\n        Null.startNull(b);\n        return Null.endNull(b);\n    }\n    public visitInt<T extends type.Int>(node: T, b: Builder) {\n        Int.startInt(b);\n        Int.addBitWidth(b, node.bitWidth);\n        Int.addIsSigned(b, node.isSigned);\n        return Int.endInt(b);\n    }\n    public visitFloat<T extends type.Float>(node: T, b: Builder) {\n        FloatingPoint.startFloatingPoint(b);\n        FloatingPoint.addPrecision(b, node.precision);\n        return FloatingPoint.endFloatingPoint(b);\n    }\n    public visitBinary<T extends type.Binary>(_node: T, b: Builder) {\n        Binary.startBinary(b);\n        return Binary.endBinary(b);\n    }\n    public visitBool<T extends type.Bool>(_node: T, b: Builder) {\n        Bool.startBool(b);\n        return Bool.endBool(b);\n    }\n    public visitUtf8<T extends type.Utf8>(_node: T, b: Builder) {\n        Utf8.startUtf8(b);\n        return Utf8.endUtf8(b);\n    }\n    public visitDecimal<T extends type.Decimal>(node: T, b: Builder) {\n        Decimal.startDecimal(b);\n        Decimal.addScale(b, node.scale);\n        Decimal.addPrecision(b, node.precision);\n        return Decimal.endDecimal(b);\n    }\n    public visitDate<T extends type.Date_>(node: T, b: Builder) {\n        Date.startDate(b);\n        Date.addUnit(b, node.unit);\n        return Date.endDate(b);\n    }\n    public visitTime<T extends type.Time>(node: T, b: Builder) {\n        Time.startTime(b);\n        Time.addUnit(b, node.unit);\n        Time.addBitWidth(b, node.bitWidth);\n        return Time.endTime(b);\n    }\n    public visitTimestamp<T extends type.Timestamp>(node: T, b: Builder) {\n        const timezone = (node.timezone && b.createString(node.timezone)) || undefined;\n        Timestamp.startTimestamp(b);\n        Timestamp.addUnit(b, node.unit);\n        if (timezone !== undefined) {\n            Timestamp.addTimezone(b, timezone);\n        }\n        return Timestamp.endTimestamp(b);\n    }\n    public visitInterval<T extends type.Interval>(node: T, b: Builder) {\n        Interval.startInterval(b);\n        Interval.addUnit(b, node.unit);\n        return Interval.endInterval(b);\n    }\n    public visitList<T extends type.List>(_node: T, b: Builder) {\n        List.startList(b);\n        return List.endList(b);\n    }\n    public visitStruct<T extends type.Struct>(_node: T, b: Builder) {\n        Struct.startStruct_(b);\n        return Struct.endStruct_(b);\n    }\n    public visitUnion<T extends type.Union>(node: T, b: Builder) {\n        Union.startTypeIdsVector(b, node.typeIds.length);\n        const typeIds = Union.createTypeIdsVector(b, node.typeIds);\n        Union.startUnion(b);\n        Union.addMode(b, node.mode);\n        Union.addTypeIds(b, typeIds);\n        return Union.endUnion(b);\n    }\n    public visitDictionary<T extends type.Dictionary>(node: T, b: Builder) {\n        const indexType = this.visit(node.indices, b);\n        DictionaryEncoding.startDictionaryEncoding(b);\n        DictionaryEncoding.addId(b, new Long(node.id, 0));\n        DictionaryEncoding.addIsOrdered(b, node.isOrdered);\n        if (indexType !== undefined) {\n            DictionaryEncoding.addIndexType(b, indexType);\n        }\n        return DictionaryEncoding.endDictionaryEncoding(b);\n    }\n    public visitFixedSizeBinary<T extends type.FixedSizeBinary>(node: T, b: Builder) {\n        FixedSizeBinary.startFixedSizeBinary(b);\n        FixedSizeBinary.addByteWidth(b, node.byteWidth);\n        return FixedSizeBinary.endFixedSizeBinary(b);\n    }\n    public visitFixedSizeList<T extends type.FixedSizeList>(node: T, b: Builder) {\n        FixedSizeList.startFixedSizeList(b);\n        FixedSizeList.addListSize(b, node.listSize);\n        return FixedSizeList.endFixedSizeList(b);\n    }\n    public visitMap<T extends type.Map_>(node: T, b: Builder) {\n        Map_.startMap(b);\n        Map_.addKeysSorted(b, node.keysSorted);\n        return Map_.endMap(b);\n    }\n}\n\n/** @ignore */\nexport const instance = new TypeAssembler();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Schema, Field } from '../../schema';\nimport {\n    DataType, Dictionary, TimeBitWidth,\n    Utf8, Binary, Decimal, FixedSizeBinary,\n    List, FixedSizeList, Map_, Struct, Union,\n    Bool, Null, Int, Float, Date_, Time, Interval, Timestamp, IntBitWidth, Int32, TKeys,\n} from '../../type';\n\nimport { DictionaryBatch, RecordBatch, FieldNode, BufferRegion } from './message';\nimport { TimeUnit, Precision, IntervalUnit, UnionMode, DateUnit } from '../../enum';\n\n/** @ignore */\nexport function schemaFromJSON(_schema: any, dictionaries: Map<number, DataType> = new Map()) {\n    return new Schema(\n        schemaFieldsFromJSON(_schema, dictionaries),\n        customMetadataFromJSON(_schema['customMetadata']),\n        dictionaries\n    );\n}\n\n/** @ignore */\nexport function recordBatchFromJSON(b: any) {\n    return new RecordBatch(\n        b['count'],\n        fieldNodesFromJSON(b['columns']),\n        buffersFromJSON(b['columns'])\n    );\n}\n\n/** @ignore */\nexport function dictionaryBatchFromJSON(b: any) {\n    return new DictionaryBatch(\n        recordBatchFromJSON(b['data']),\n        b['id'], b['isDelta']\n    );\n}\n\n/** @ignore */\nfunction schemaFieldsFromJSON(_schema: any, dictionaries?: Map<number, DataType>) {\n    return (_schema['fields'] || []).filter(Boolean).map((f: any) => Field.fromJSON(f, dictionaries));\n}\n\n/** @ignore */\nfunction fieldChildrenFromJSON(_field: any, dictionaries?: Map<number, DataType>): Field[] {\n    return (_field['children'] || []).filter(Boolean).map((f: any) => Field.fromJSON(f, dictionaries));\n}\n\n/** @ignore */\nfunction fieldNodesFromJSON(xs: any[]): FieldNode[] {\n    return (xs || []).reduce<FieldNode[]>((fieldNodes, column: any) => [\n        ...fieldNodes,\n        new FieldNode(\n            column['count'],\n            nullCountFromJSON(column['VALIDITY'])\n        ),\n        ...fieldNodesFromJSON(column['children'])\n    ], [] as FieldNode[]);\n}\n\n/** @ignore */\nfunction buffersFromJSON(xs: any[], buffers: BufferRegion[] = []): BufferRegion[] {\n    for (let i = -1, n = (xs || []).length; ++i < n;) {\n        const column = xs[i];\n        column['VALIDITY'] && buffers.push(new BufferRegion(buffers.length, column['VALIDITY'].length));\n        column['TYPE'] && buffers.push(new BufferRegion(buffers.length, column['TYPE'].length));\n        column['OFFSET'] && buffers.push(new BufferRegion(buffers.length, column['OFFSET'].length));\n        column['DATA'] && buffers.push(new BufferRegion(buffers.length, column['DATA'].length));\n        buffers = buffersFromJSON(column['children'], buffers);\n    }\n    return buffers;\n}\n\n/** @ignore */\nfunction nullCountFromJSON(validity: number[]) {\n    return (validity || []).reduce((sum, val) => sum + +(val === 0), 0);\n}\n\n/** @ignore */\nexport function fieldFromJSON(_field: any, dictionaries?: Map<number, DataType>) {\n\n    let id: number;\n    let keys: TKeys | null;\n    let field: Field | void;\n    let dictMeta: any;\n    let type: DataType<any>;\n    let dictType: Dictionary;\n\n    // If no dictionary encoding\n    if (!dictionaries || !(dictMeta = _field['dictionary'])) {\n        type = typeFromJSON(_field, fieldChildrenFromJSON(_field, dictionaries));\n        field = new Field(_field['name'], type, _field['nullable'], customMetadataFromJSON(_field['customMetadata']));\n    }\n    // tslint:disable\n    // If dictionary encoded and the first time we've seen this dictionary id, decode\n    // the data type and child fields, then wrap in a Dictionary type and insert the\n    // data type into the dictionary types map.\n    else if (!dictionaries.has(id = dictMeta['id'])) {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta['indexType']) ? indexTypeFromJSON(keys) as TKeys : new Int32();\n        dictionaries.set(id, type = typeFromJSON(_field, fieldChildrenFromJSON(_field, dictionaries)));\n        dictType = new Dictionary(type, keys, id, dictMeta['isOrdered']);\n        field = new Field(_field['name'], dictType, _field['nullable'], customMetadataFromJSON(_field['customMetadata']));\n    }\n    // If dictionary encoded, and have already seen this dictionary Id in the schema, then reuse the\n    // data type and wrap in a new Dictionary type and field.\n    else {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta['indexType']) ? indexTypeFromJSON(keys) as TKeys : new Int32();\n        dictType = new Dictionary(dictionaries.get(id)!, keys, id, dictMeta['isOrdered']);\n        field = new Field(_field['name'], dictType, _field['nullable'], customMetadataFromJSON(_field['customMetadata']));\n    }\n    return field || null;\n}\n\n/** @ignore */\nfunction customMetadataFromJSON(_metadata?: object) {\n    return new Map<string, string>(Object.entries(_metadata || {}));\n}\n\n/** @ignore */\nfunction indexTypeFromJSON(_type: any) {\n    return new Int(_type['isSigned'], _type['bitWidth']);\n}\n\n/** @ignore */\nfunction typeFromJSON(f: any, children?: Field[]): DataType<any> {\n\n    const typeId = f['type']['name'];\n\n    switch (typeId) {\n        case 'NONE':   return new Null();\n        case 'null':   return new Null();\n        case 'binary': return new Binary();\n        case 'utf8':   return new Utf8();\n        case 'bool':   return new Bool();\n        case 'list':   return new List((children || [])[0]);\n        case 'struct': return new Struct(children || []);\n        case 'struct_': return new Struct(children || []);\n    }\n\n    switch (typeId) {\n        case 'int': {\n            const t = f['type'];\n            return new Int(t['isSigned'], t['bitWidth'] as IntBitWidth);\n        }\n        case 'floatingpoint': {\n            const t = f['type'];\n            return new Float(Precision[t['precision']] as any);\n        }\n        case 'decimal': {\n            const t = f['type'];\n            return new Decimal(t['scale'], t['precision']);\n        }\n        case 'date': {\n            const t = f['type'];\n            return new Date_(DateUnit[t['unit']] as any);\n        }\n        case 'time': {\n            const t = f['type'];\n            return new Time(TimeUnit[t['unit']] as any, t['bitWidth'] as TimeBitWidth);\n        }\n        case 'timestamp': {\n            const t = f['type'];\n            return new Timestamp(TimeUnit[t['unit']] as any, t['timezone']);\n        }\n        case 'interval': {\n            const t = f['type'];\n            return new Interval(IntervalUnit[t['unit']] as any);\n        }\n        case 'union': {\n            const t = f['type'];\n            return new Union(UnionMode[t['mode']] as any, (t['typeIds'] || []), children || []);\n        }\n        case 'fixedsizebinary': {\n            const t = f['type'];\n            return new FixedSizeBinary(t['byteWidth']);\n        }\n        case 'fixedsizelist': {\n            const t = f['type'];\n            return new FixedSizeList(t['listSize'], (children || [])[0]);\n        }\n        case 'map': {\n            const t = f['type'];\n            return new Map_((children || [])[0], t['keysSorted']);\n        }\n    }\n    throw new Error(`Unrecognized type: \"${typeId}\"`);\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { flatbuffers } from 'flatbuffers';\nimport * as Schema_ from '../../fb/Schema';\nimport * as Message_ from '../../fb/Message';\n\nimport { Schema, Field } from '../../schema';\nimport { toUint8Array } from '../../util/buffer';\nimport { ArrayBufferViewInput } from '../../util/buffer';\nimport { MessageHeader, MetadataVersion } from '../../enum';\nimport { instance as typeAssembler } from '../../visitor/typeassembler';\nimport { fieldFromJSON, schemaFromJSON, recordBatchFromJSON, dictionaryBatchFromJSON } from './json';\n\nimport Long = flatbuffers.Long;\nimport Builder = flatbuffers.Builder;\nimport ByteBuffer = flatbuffers.ByteBuffer;\nimport _Int = Schema_.org.apache.arrow.flatbuf.Int;\nimport Type = Schema_.org.apache.arrow.flatbuf.Type;\nimport _Field = Schema_.org.apache.arrow.flatbuf.Field;\nimport _Schema = Schema_.org.apache.arrow.flatbuf.Schema;\nimport _Buffer = Schema_.org.apache.arrow.flatbuf.Buffer;\nimport _Message = Message_.org.apache.arrow.flatbuf.Message;\nimport _KeyValue = Schema_.org.apache.arrow.flatbuf.KeyValue;\nimport _FieldNode = Message_.org.apache.arrow.flatbuf.FieldNode;\nimport _Endianness = Schema_.org.apache.arrow.flatbuf.Endianness;\nimport _RecordBatch = Message_.org.apache.arrow.flatbuf.RecordBatch;\nimport _DictionaryBatch = Message_.org.apache.arrow.flatbuf.DictionaryBatch;\nimport _DictionaryEncoding = Schema_.org.apache.arrow.flatbuf.DictionaryEncoding;\n\nimport {\n    DataType, Dictionary, TimeBitWidth,\n    Utf8, Binary, Decimal, FixedSizeBinary,\n    List, FixedSizeList, Map_, Struct, Union,\n    Bool, Null, Int, Float, Date_, Time, Interval, Timestamp, IntBitWidth, Int32, TKeys,\n} from '../../type';\n\n/**\n * @ignore\n * @private\n **/\nexport class Message<T extends MessageHeader = any> {\n\n    /** @nocollapse */\n    public static fromJSON<T extends MessageHeader>(msg: any, headerType: T): Message<T> {\n        const message = new Message(0, MetadataVersion.V4, headerType);\n        message._createHeader = messageHeaderFromJSON(msg, headerType);\n        return message;\n    }\n\n    /** @nocollapse */\n    public static decode(buf: ArrayBufferViewInput) {\n        buf = new ByteBuffer(toUint8Array(buf));\n        const _message = _Message.getRootAsMessage(buf);\n        const bodyLength: Long = _message.bodyLength()!;\n        const version: MetadataVersion = _message.version();\n        const headerType: MessageHeader = _message.headerType();\n        const message = new Message(bodyLength, version, headerType);\n        message._createHeader = decodeMessageHeader(_message, headerType);\n        return message;\n    }\n\n    /** @nocollapse */\n    public static encode<T extends MessageHeader>(message: Message<T>) {\n        let b = new Builder(), headerOffset = -1;\n        if (message.isSchema()) {\n            headerOffset = Schema.encode(b, message.header() as Schema);\n        } else if (message.isRecordBatch()) {\n            headerOffset = RecordBatch.encode(b, message.header() as RecordBatch);\n        } else if (message.isDictionaryBatch()) {\n            headerOffset = DictionaryBatch.encode(b, message.header() as DictionaryBatch);\n        }\n        _Message.startMessage(b);\n        _Message.addVersion(b, MetadataVersion.V4);\n        _Message.addHeader(b, headerOffset);\n        _Message.addHeaderType(b, message.headerType);\n        _Message.addBodyLength(b, new Long(message.bodyLength, 0));\n        _Message.finishMessageBuffer(b, _Message.endMessage(b));\n        return b.asUint8Array();\n    }\n\n    /** @nocollapse */\n    public static from(header: Schema | RecordBatch | DictionaryBatch, bodyLength = 0) {\n        if (header instanceof Schema) {\n            return new Message(0, MetadataVersion.V4, MessageHeader.Schema, header);\n        }\n        if (header instanceof RecordBatch) {\n            return new Message(bodyLength, MetadataVersion.V4, MessageHeader.RecordBatch, header);\n        }\n        if (header instanceof DictionaryBatch) {\n            return new Message(bodyLength, MetadataVersion.V4, MessageHeader.DictionaryBatch, header);\n        }\n        throw new Error(`Unrecognized Message header: ${header}`);\n    }\n\n    // @ts-ignore\n    public body: Uint8Array;\n    protected _headerType: T;\n    protected _bodyLength: number;\n    protected _version: MetadataVersion;\n    public get type() { return this.headerType; }\n    public get version() { return this._version; }\n    public get headerType() { return this._headerType; }\n    public get bodyLength() { return this._bodyLength; }\n    // @ts-ignore\n    protected _createHeader: MessageHeaderDecoder;\n    public header() { return this._createHeader<T>(); }\n    public isSchema(): this is Message<MessageHeader.Schema> { return this.headerType === MessageHeader.Schema; }\n    public isRecordBatch(): this is Message<MessageHeader.RecordBatch> { return this.headerType === MessageHeader.RecordBatch; }\n    public isDictionaryBatch(): this is Message<MessageHeader.DictionaryBatch> { return this.headerType === MessageHeader.DictionaryBatch; }\n\n    constructor(bodyLength: Long | number, version: MetadataVersion, headerType: T, header?: any) {\n        this._version = version;\n        this._headerType = headerType;\n        this.body = new Uint8Array(0);\n        header && (this._createHeader = () => header);\n        this._bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;\n    }\n}\n\n/**\n * @ignore\n * @private\n **/\nexport class RecordBatch {\n    protected _length: number;\n    protected _nodes: FieldNode[];\n    protected _buffers: BufferRegion[];\n    public get nodes() { return this._nodes; }\n    public get length() { return this._length; }\n    public get buffers() { return this._buffers; }\n    constructor(length: Long | number, nodes: FieldNode[], buffers: BufferRegion[]) {\n        this._nodes = nodes;\n        this._buffers = buffers;\n        this._length = typeof length === 'number' ? length : length.low;\n    }\n}\n\n/**\n * @ignore\n * @private\n **/\nexport class DictionaryBatch {\n\n    protected _id: number;\n    protected _isDelta: boolean;\n    protected _data: RecordBatch;\n    public get id() { return this._id; }\n    public get data() { return this._data; }\n    public get isDelta() { return this._isDelta; }\n    public get length(): number { return this.data.length; }\n    public get nodes(): FieldNode[] { return this.data.nodes; }\n    public get buffers(): BufferRegion[] { return this.data.buffers; }\n\n    constructor(data: RecordBatch, id: Long | number, isDelta: boolean = false) {\n        this._data = data;\n        this._isDelta = isDelta;\n        this._id = typeof id === 'number' ? id : id.low;\n    }\n}\n\n/**\n * @ignore\n * @private\n **/\nexport class BufferRegion {\n    public offset: number;\n    public length: number;\n    constructor(offset: Long | number, length: Long | number) {\n        this.offset = typeof offset === 'number' ? offset : offset.low;\n        this.length = typeof length === 'number' ? length : length.low;\n    }\n}\n\n/**\n * @ignore\n * @private\n **/\nexport class FieldNode {\n    public length: number;\n    public nullCount: number;\n    constructor(length: Long | number, nullCount: Long | number) {\n        this.length = typeof length === 'number' ? length : length.low;\n        this.nullCount = typeof nullCount === 'number' ? nullCount : nullCount.low;\n    }\n}\n\n/** @ignore */\nfunction messageHeaderFromJSON(message: any, type: MessageHeader) {\n    return (() => {\n        switch (type) {\n            case MessageHeader.Schema: return Schema.fromJSON(message);\n            case MessageHeader.RecordBatch: return RecordBatch.fromJSON(message);\n            case MessageHeader.DictionaryBatch: return DictionaryBatch.fromJSON(message);\n        }\n        throw new Error(`Unrecognized Message type: { name: ${MessageHeader[type]}, type: ${type} }`);\n    }) as MessageHeaderDecoder;\n}\n\n/** @ignore */\nfunction decodeMessageHeader(message: _Message, type: MessageHeader) {\n    return (() => {\n        switch (type) {\n            case MessageHeader.Schema: return Schema.decode(message.header(new _Schema())!);\n            case MessageHeader.RecordBatch: return RecordBatch.decode(message.header(new _RecordBatch())!, message.version());\n            case MessageHeader.DictionaryBatch: return DictionaryBatch.decode(message.header(new _DictionaryBatch())!, message.version());\n        }\n        throw new Error(`Unrecognized Message type: { name: ${MessageHeader[type]}, type: ${type} }`);\n    }) as MessageHeaderDecoder;\n}\n\nField['encode'] = encodeField;\nField['decode'] = decodeField;\nField['fromJSON'] = fieldFromJSON;\n\nSchema['encode'] = encodeSchema;\nSchema['decode'] = decodeSchema;\nSchema['fromJSON'] = schemaFromJSON;\n\nRecordBatch['encode'] = encodeRecordBatch;\nRecordBatch['decode'] = decodeRecordBatch;\nRecordBatch['fromJSON'] = recordBatchFromJSON;\n\nDictionaryBatch['encode'] = encodeDictionaryBatch;\nDictionaryBatch['decode'] = decodeDictionaryBatch;\nDictionaryBatch['fromJSON'] = dictionaryBatchFromJSON;\n\nFieldNode['encode'] = encodeFieldNode;\nFieldNode['decode'] = decodeFieldNode;\n\nBufferRegion['encode'] = encodeBufferRegion;\nBufferRegion['decode'] = decodeBufferRegion;\n\ndeclare module '../../schema' {\n    namespace Field {\n        export { encodeField as encode };\n        export { decodeField as decode };\n        export { fieldFromJSON as fromJSON };\n    }\n    namespace Schema {\n        export { encodeSchema as encode };\n        export { decodeSchema as decode };\n        export { schemaFromJSON as fromJSON };\n    }\n}\n\ndeclare module './message' {\n    namespace RecordBatch {\n        export { encodeRecordBatch as encode };\n        export { decodeRecordBatch as decode };\n        export { recordBatchFromJSON as fromJSON };\n    }\n    namespace DictionaryBatch {\n        export { encodeDictionaryBatch as encode };\n        export { decodeDictionaryBatch as decode };\n        export { dictionaryBatchFromJSON as fromJSON };\n    }\n    namespace FieldNode {\n        export { encodeFieldNode as encode };\n        export { decodeFieldNode as decode };\n    }\n    namespace BufferRegion {\n        export { encodeBufferRegion as encode };\n        export { decodeBufferRegion as decode };\n    }\n}\n\n/** @ignore */\nfunction decodeSchema(_schema: _Schema, dictionaries: Map<number, DataType> = new Map()) {\n    const fields = decodeSchemaFields(_schema, dictionaries);\n    return new Schema(fields, decodeCustomMetadata(_schema), dictionaries);\n}\n\n/** @ignore */\nfunction decodeRecordBatch(batch: _RecordBatch, version = MetadataVersion.V4) {\n    return new RecordBatch(batch.length(), decodeFieldNodes(batch), decodeBuffers(batch, version));\n}\n\n/** @ignore */\nfunction decodeDictionaryBatch(batch: _DictionaryBatch, version = MetadataVersion.V4) {\n    return new DictionaryBatch(RecordBatch.decode(batch.data()!, version), batch.id(), batch.isDelta());\n}\n\n/** @ignore */\nfunction decodeBufferRegion(b: _Buffer) {\n    return new BufferRegion(b.offset(), b.length());\n}\n\n/** @ignore */\nfunction decodeFieldNode(f: _FieldNode) {\n    return new FieldNode(f.length(), f.nullCount());\n}\n\n/** @ignore */\nfunction decodeFieldNodes(batch: _RecordBatch) {\n    const nodes = [] as FieldNode[];\n    for (let f, i = -1, j = -1, n = batch.nodesLength(); ++i < n;) {\n        if (f = batch.nodes(i)) {\n            nodes[++j] = FieldNode.decode(f);\n        }\n    }\n    return nodes;\n}\n\n/** @ignore */\nfunction decodeBuffers(batch: _RecordBatch, version: MetadataVersion) {\n    const bufferRegions = [] as BufferRegion[];\n    for (let b, i = -1, j = -1, n = batch.buffersLength(); ++i < n;) {\n        if (b = batch.buffers(i)) {\n        // If this Arrow buffer was written before version 4,\n        // advance the buffer's bb_pos 8 bytes to skip past\n        // the now-removed page_id field\n        if (version < MetadataVersion.V4) {\n                b.bb_pos += (8 * (i + 1));\n            }\n            bufferRegions[++j] = BufferRegion.decode(b);\n        }\n    }\n    return bufferRegions;\n}\n\n/** @ignore */\nfunction decodeSchemaFields(schema: _Schema, dictionaries?: Map<number, DataType>) {\n    const fields = [] as Field[];\n    for (let f, i = -1, j = -1, n = schema.fieldsLength(); ++i < n;) {\n        if (f = schema.fields(i)) {\n            fields[++j] = Field.decode(f, dictionaries);\n        }\n    }\n    return fields;\n}\n\n/** @ignore */\nfunction decodeFieldChildren(field: _Field, dictionaries?: Map<number, DataType>): Field[] {\n    const children = [] as Field[];\n    for (let f, i = -1, j = -1, n = field.childrenLength(); ++i < n;) {\n        if (f = field.children(i)) {\n            children[++j] = Field.decode(f, dictionaries);\n        }\n    }\n    return children;\n}\n\n/** @ignore */\nfunction decodeField(f: _Field, dictionaries?: Map<number, DataType>) {\n\n    let id: number;\n    let field: Field | void;\n    let type: DataType<any>;\n    let keys: _Int | TKeys | null;\n    let dictType: Dictionary;\n    let dictMeta: _DictionaryEncoding | null;\n\n    // If no dictionary encoding\n    if (!dictionaries || !(dictMeta = f.dictionary())) {\n        type = decodeFieldType(f, decodeFieldChildren(f, dictionaries));\n        field = new Field(f.name()!, type, f.nullable(), decodeCustomMetadata(f));\n    }\n    // tslint:disable\n    // If dictionary encoded and the first time we've seen this dictionary id, decode\n    // the data type and child fields, then wrap in a Dictionary type and insert the\n    // data type into the dictionary types map.\n    else if (!dictionaries.has(id = dictMeta.id().low)) {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) as TKeys : new Int32();\n        dictionaries.set(id, type = decodeFieldType(f, decodeFieldChildren(f, dictionaries)));\n        dictType = new Dictionary(type, keys, id, dictMeta.isOrdered());\n        field = new Field(f.name()!, dictType, f.nullable(), decodeCustomMetadata(f));\n    }\n    // If dictionary encoded, and have already seen this dictionary Id in the schema, then reuse the\n    // data type and wrap in a new Dictionary type and field.\n    else {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) as TKeys : new Int32();\n        dictType = new Dictionary(dictionaries.get(id)!, keys, id, dictMeta.isOrdered());\n        field = new Field(f.name()!, dictType, f.nullable(), decodeCustomMetadata(f));\n    }\n    return field || null;\n}\n\n/** @ignore */\nfunction decodeCustomMetadata(parent?: _Schema | _Field | null) {\n    const data = new Map<string, string>();\n    if (parent) {\n        for (let entry, key, i = -1, n = parent.customMetadataLength() | 0; ++i < n;) {\n            if ((entry = parent.customMetadata(i)) && (key = entry.key()) != null) {\n                data.set(key, entry.value()!);\n            }\n        }\n    }\n    return data;\n}\n\n/** @ignore */\nfunction decodeIndexType(_type: _Int) {\n    return new Int(_type.isSigned(), _type.bitWidth() as IntBitWidth);\n}\n\n/** @ignore */\nfunction decodeFieldType(f: _Field, children?: Field[]): DataType<any> {\n\n    const typeId = f.typeType();\n\n    switch (typeId) {\n        case Type.NONE:    return new Null();\n        case Type.Null:    return new Null();\n        case Type.Binary:  return new Binary();\n        case Type.Utf8:    return new Utf8();\n        case Type.Bool:    return new Bool();\n        case Type.List:    return new List((children || [])[0]);\n        case Type.Struct_: return new Struct(children || []);\n    }\n\n    switch (typeId) {\n        case Type.Int: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Int())!;\n            return new Int(t.isSigned(), t.bitWidth());\n        }\n        case Type.FloatingPoint: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.FloatingPoint())!;\n            return new Float(t.precision());\n        }\n        case Type.Decimal: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Decimal())!;\n            return new Decimal(t.scale(), t.precision());\n        }\n        case Type.Date: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Date())!;\n            return new Date_(t.unit());\n        }\n        case Type.Time: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Time())!;\n            return new Time(t.unit(), t.bitWidth() as TimeBitWidth);\n        }\n        case Type.Timestamp: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Timestamp())!;\n            return new Timestamp(t.unit(), t.timezone());\n        }\n        case Type.Interval: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Interval())!;\n            return new Interval(t.unit());\n        }\n        case Type.Union: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Union())!;\n            return new Union(t.mode(), t.typeIdsArray() || [], children || []);\n        }\n        case Type.FixedSizeBinary: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.FixedSizeBinary())!;\n            return new FixedSizeBinary(t.byteWidth());\n        }\n        case Type.FixedSizeList: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.FixedSizeList())!;\n            return new FixedSizeList(t.listSize(), (children || [])[0]);\n        }\n        case Type.Map: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Map())!;\n            return new Map_((children || [])[0], t.keysSorted());\n        }\n    }\n    throw new Error(`Unrecognized type: \"${Type[typeId]}\" (${typeId})`);\n}\n\n/** @ignore */\nfunction encodeSchema(b: Builder, schema: Schema) {\n\n    const fieldOffsets = schema.fields.map((f) => Field.encode(b, f));\n\n    _Schema.startFieldsVector(b, fieldOffsets.length);\n\n    const fieldsVectorOffset = _Schema.createFieldsVector(b, fieldOffsets);\n\n    const metadataOffset = !(schema.metadata && schema.metadata.size > 0) ? -1 :\n        _Schema.createCustomMetadataVector(b, [...schema.metadata].map(([k, v]) => {\n            const key = b.createString(`${k}`);\n            const val = b.createString(`${v}`);\n            _KeyValue.startKeyValue(b);\n            _KeyValue.addKey(b, key);\n            _KeyValue.addValue(b, val);\n            return _KeyValue.endKeyValue(b);\n        }));\n\n    _Schema.startSchema(b);\n    _Schema.addFields(b, fieldsVectorOffset);\n    _Schema.addEndianness(b, platformIsLittleEndian ? _Endianness.Little : _Endianness.Big);\n\n    if (metadataOffset !== -1) { _Schema.addCustomMetadata(b, metadataOffset); }\n\n    return _Schema.endSchema(b);\n}\n\n/** @ignore */\nfunction encodeField(b: Builder, field: Field) {\n\n    let nameOffset = -1;\n    let typeOffset = -1;\n    let dictionaryOffset = -1;\n\n    let type = field.type;\n    let typeId: Type = <any> field.typeId;\n\n    if (!DataType.isDictionary(type)) {\n        typeOffset = typeAssembler.visit(type, b)!;\n    } else {\n        typeId = type.dictionary.typeId;\n        dictionaryOffset = typeAssembler.visit(type, b)!;\n        typeOffset = typeAssembler.visit(type.dictionary, b)!;\n    }\n\n    const childOffsets = (type.children || []).map((f: Field) => Field.encode(b, f));\n    const childrenVectorOffset = _Field.createChildrenVector(b, childOffsets);\n\n    const metadataOffset = !(field.metadata && field.metadata.size > 0) ? -1 :\n        _Field.createCustomMetadataVector(b, [...field.metadata].map(([k, v]) => {\n            const key = b.createString(`${k}`);\n            const val = b.createString(`${v}`);\n            _KeyValue.startKeyValue(b);\n            _KeyValue.addKey(b, key);\n            _KeyValue.addValue(b, val);\n            return _KeyValue.endKeyValue(b);\n        }));\n\n    if (field.name) {\n        nameOffset = b.createString(field.name);\n    }\n\n    _Field.startField(b);\n    _Field.addType(b, typeOffset);\n    _Field.addTypeType(b, typeId);\n    _Field.addChildren(b, childrenVectorOffset);\n    _Field.addNullable(b, !!field.nullable);\n\n    if (nameOffset !== -1) { _Field.addName(b, nameOffset); }\n    if (dictionaryOffset !== -1) { _Field.addDictionary(b, dictionaryOffset); }\n    if (metadataOffset !== -1) { _Field.addCustomMetadata(b, metadataOffset); }\n\n    return _Field.endField(b);\n}\n\n/** @ignore */\nfunction encodeRecordBatch(b: Builder, recordBatch: RecordBatch) {\n\n    const nodes = recordBatch.nodes || [];\n    const buffers = recordBatch.buffers || [];\n\n    _RecordBatch.startNodesVector(b, nodes.length);\n    nodes.slice().reverse().forEach((n) => FieldNode.encode(b, n));\n\n    const nodesVectorOffset = b.endVector();\n\n    _RecordBatch.startBuffersVector(b, buffers.length);\n    buffers.slice().reverse().forEach((b_) => BufferRegion.encode(b, b_));\n\n    const buffersVectorOffset = b.endVector();\n\n    _RecordBatch.startRecordBatch(b);\n    _RecordBatch.addLength(b, new Long(recordBatch.length, 0));\n    _RecordBatch.addNodes(b, nodesVectorOffset);\n    _RecordBatch.addBuffers(b, buffersVectorOffset);\n    return _RecordBatch.endRecordBatch(b);\n}\n\n/** @ignore */\nfunction encodeDictionaryBatch(b: Builder, dictionaryBatch: DictionaryBatch) {\n    const dataOffset = RecordBatch.encode(b, dictionaryBatch.data);\n    _DictionaryBatch.startDictionaryBatch(b);\n    _DictionaryBatch.addId(b, new Long(dictionaryBatch.id, 0));\n    _DictionaryBatch.addIsDelta(b, dictionaryBatch.isDelta);\n    _DictionaryBatch.addData(b, dataOffset);\n    return _DictionaryBatch.endDictionaryBatch(b);\n}\n\n/** @ignore */\nfunction encodeFieldNode(b: Builder, node: FieldNode) {\n    return _FieldNode.createFieldNode(b, new Long(node.length, 0), new Long(node.nullCount, 0));\n}\n\n/** @ignore */\nfunction encodeBufferRegion(b: Builder, node: BufferRegion) {\n    return _Buffer.createBuffer(b, new Long(node.offset, 0), new Long(node.length, 0));\n}\n\n/** @ignore */\nconst platformIsLittleEndian = (function() {\n    const buffer = new ArrayBuffer(2);\n    new DataView(buffer).setInt16(0, 256, true /* littleEndian */);\n    // Int16Array uses the platform's endianness.\n    return new Int16Array(buffer)[0] === 256;\n})();\n\n/** @ignore */\ntype MessageHeaderDecoder = <T extends MessageHeader>() => T extends MessageHeader.Schema ? Schema\n                                                         : T extends MessageHeader.RecordBatch ? RecordBatch\n                                                         : T extends MessageHeader.DictionaryBatch ? DictionaryBatch : never;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { MessageHeader } from '../enum';\nimport { flatbuffers } from 'flatbuffers';\nimport ByteBuffer = flatbuffers.ByteBuffer;\nimport { Message } from './metadata/message';\nimport { isFileHandle } from '../util/compat';\nimport { AsyncRandomAccessFile } from '../io/file';\nimport { toUint8Array, ArrayBufferViewInput } from '../util/buffer';\nimport { ByteStream, ReadableSource, AsyncByteStream } from '../io/stream';\nimport { ArrowJSON, ArrowJSONLike, ITERATOR_DONE, FileHandle } from '../io/interfaces';\n\n/** @ignore */ const invalidMessageType       = (type: MessageHeader) => `Expected ${MessageHeader[type]} Message in stream, but was null or length 0.`;\n/** @ignore */ const nullMessage              = (type: MessageHeader) => `Header pointer of flatbuffer-encoded ${MessageHeader[type]} Message is null or length 0.`;\n/** @ignore */ const invalidMessageMetadata   = (expected: number, actual: number) => `Expected to read ${expected} metadata bytes, but only read ${actual}.`;\n/** @ignore */ const invalidMessageBodyLength = (expected: number, actual: number) => `Expected to read ${expected} bytes for message body, but only read ${actual}.`;\n\n/** @ignore */\nexport class MessageReader implements IterableIterator<Message> {\n    protected source: ByteStream;\n    constructor(source: ByteStream | ArrayBufferViewInput | Iterable<ArrayBufferViewInput>) {\n        this.source = source instanceof ByteStream ? source : new ByteStream(source);\n    }\n    public [Symbol.iterator](): IterableIterator<Message> { return this as IterableIterator<Message>; }\n    public next(): IteratorResult<Message> {\n        let r;\n        if ((r = this.readMetadataLength()).done) { return ITERATOR_DONE; }\n        // ARROW-6313: If the first 4 bytes are continuation indicator (-1), read\n        // the next 4 for the 32-bit metadata length. Otherwise, assume this is a\n        // pre-v0.15 message, where the first 4 bytes are the metadata length.\n        if ((r.value === -1) &&\n            (r = this.readMetadataLength()).done) { return ITERATOR_DONE; }\n        if ((r = this.readMetadata(r.value)).done) { return ITERATOR_DONE; }\n        return (<any> r) as IteratorResult<Message>;\n    }\n    public throw(value?: any) { return this.source.throw(value); }\n    public return(value?: any) { return this.source.return(value); }\n    public readMessage<T extends MessageHeader>(type?: T | null) {\n        let r: IteratorResult<Message<T>>;\n        if ((r = this.next()).done) { return null; }\n        if ((type != null) && r.value.headerType !== type) {\n            throw new Error(invalidMessageType(type));\n        }\n        return r.value;\n    }\n    public readMessageBody(bodyLength: number): Uint8Array {\n        if (bodyLength <= 0) { return new Uint8Array(0); }\n        const buf = toUint8Array(this.source.read(bodyLength));\n        if (buf.byteLength < bodyLength) {\n            throw new Error(invalidMessageBodyLength(bodyLength, buf.byteLength));\n        }\n        // 1. Work around bugs in fs.ReadStream's internal Buffer pooling, see: https://github.com/nodejs/node/issues/24817\n        // 2. Work around https://github.com/whatwg/streams/blob/0ebe4b042e467d9876d80ae045de3843092ad797/reference-implementation/lib/helpers.js#L126\n        return /* 1. */ (buf.byteOffset % 8 === 0) &&\n               /* 2. */ (buf.byteOffset + buf.byteLength) <= buf.buffer.byteLength ? buf : buf.slice();\n    }\n    public readSchema(throwIfNull = false) {\n        const type = MessageHeader.Schema;\n        const message = this.readMessage(type);\n        const schema = message && message.header();\n        if (throwIfNull && !schema) {\n            throw new Error(nullMessage(type));\n        }\n        return schema;\n    }\n    protected readMetadataLength(): IteratorResult<number> {\n        const buf = this.source.read(PADDING);\n        const bb = buf && new ByteBuffer(buf);\n        const len = bb && bb.readInt32(0) || 0;\n        return { done: len === 0, value: len };\n    }\n    protected readMetadata(metadataLength: number): IteratorResult<Message> {\n        const buf = this.source.read(metadataLength);\n        if (!buf) { return ITERATOR_DONE; }\n        if (buf.byteLength < metadataLength) {\n            throw new Error(invalidMessageMetadata(metadataLength, buf.byteLength));\n        }\n        return { done: false, value: Message.decode(buf) };\n    }\n}\n\n/** @ignore */\nexport class AsyncMessageReader implements AsyncIterableIterator<Message> {\n    protected source: AsyncByteStream;\n    constructor(source: ReadableSource<Uint8Array>);\n    constructor(source: FileHandle, byteLength?: number);\n    constructor(source: any, byteLength?: number) {\n        this.source = source instanceof AsyncByteStream ? source\n            : isFileHandle(source)\n            ? new AsyncRandomAccessFile(source, byteLength!)\n            : new AsyncByteStream(source);\n    }\n    public [Symbol.asyncIterator](): AsyncIterableIterator<Message> { return this as AsyncIterableIterator<Message>; }\n    public async next(): Promise<IteratorResult<Message>> {\n        let r;\n        if ((r = await this.readMetadataLength()).done) { return ITERATOR_DONE; }\n        // ARROW-6313: If the first 4 bytes are continuation indicator (-1), read\n        // the next 4 for the 32-bit metadata length. Otherwise, assume this is a\n        // pre-v0.15 message, where the first 4 bytes are the metadata length.\n        if ((r.value === -1) &&\n            (r = await this.readMetadataLength()).done) { return ITERATOR_DONE; }\n        if ((r = await this.readMetadata(r.value)).done) { return ITERATOR_DONE; }\n        return (<any> r) as IteratorResult<Message>;\n    }\n    public async throw(value?: any) { return await this.source.throw(value); }\n    public async return(value?: any) { return await this.source.return(value); }\n    public async readMessage<T extends MessageHeader>(type?: T | null) {\n        let r: IteratorResult<Message<T>>;\n        if ((r = await this.next()).done) { return null; }\n        if ((type != null) && r.value.headerType !== type) {\n            throw new Error(invalidMessageType(type));\n        }\n        return r.value;\n    }\n    public async readMessageBody(bodyLength: number): Promise<Uint8Array> {\n        if (bodyLength <= 0) { return new Uint8Array(0); }\n        const buf = toUint8Array(await this.source.read(bodyLength));\n        if (buf.byteLength < bodyLength) {\n            throw new Error(invalidMessageBodyLength(bodyLength, buf.byteLength));\n        }\n        // 1. Work around bugs in fs.ReadStream's internal Buffer pooling, see: https://github.com/nodejs/node/issues/24817\n        // 2. Work around https://github.com/whatwg/streams/blob/0ebe4b042e467d9876d80ae045de3843092ad797/reference-implementation/lib/helpers.js#L126\n        return /* 1. */ (buf.byteOffset % 8 === 0) &&\n               /* 2. */ (buf.byteOffset + buf.byteLength) <= buf.buffer.byteLength ? buf : buf.slice();\n    }\n    public async readSchema(throwIfNull = false) {\n        const type = MessageHeader.Schema;\n        const message = await this.readMessage(type);\n        const schema = message && message.header();\n        if (throwIfNull && !schema) {\n            throw new Error(nullMessage(type));\n        }\n        return schema;\n    }\n    protected async readMetadataLength(): Promise<IteratorResult<number>> {\n        const buf = await this.source.read(PADDING);\n        const bb = buf && new ByteBuffer(buf);\n        const len = bb && bb.readInt32(0) || 0;\n        return { done: len === 0, value: len };\n    }\n    protected async readMetadata(metadataLength: number): Promise<IteratorResult<Message>> {\n        const buf = await this.source.read(metadataLength);\n        if (!buf) { return ITERATOR_DONE; }\n        if (buf.byteLength < metadataLength) {\n            throw new Error(invalidMessageMetadata(metadataLength, buf.byteLength));\n        }\n        return { done: false, value: Message.decode(buf) };\n    }\n}\n\n/** @ignore */\nexport class JSONMessageReader extends MessageReader {\n    private _schema = false;\n    private _json: ArrowJSON;\n    private _body: any[] = [];\n    private _batchIndex = 0;\n    private _dictionaryIndex = 0;\n    constructor(source: ArrowJSON | ArrowJSONLike) {\n        super(new Uint8Array(0));\n        this._json = source instanceof ArrowJSON ? source : new ArrowJSON(source);\n    }\n    public next() {\n        const { _json } = this;\n        if (!this._schema) {\n            this._schema = true;\n            const message = Message.fromJSON(_json.schema, MessageHeader.Schema);\n            return { done: false, value: message };\n        }\n        if (this._dictionaryIndex < _json.dictionaries.length) {\n            const batch = _json.dictionaries[this._dictionaryIndex++];\n            this._body = batch['data']['columns'];\n            const message = Message.fromJSON(batch, MessageHeader.DictionaryBatch);\n            return { done: false, value: message };\n        }\n        if (this._batchIndex < _json.batches.length) {\n            const batch = _json.batches[this._batchIndex++];\n            this._body = batch['columns'];\n            const message = Message.fromJSON(batch, MessageHeader.RecordBatch);\n            return { done: false, value: message };\n        }\n        this._body = [];\n        return ITERATOR_DONE;\n    }\n    public readMessageBody(_bodyLength?: number) {\n        return flattenDataSources(this._body) as any;\n        function flattenDataSources(xs: any[]): any[][] {\n            return (xs || []).reduce<any[][]>((buffers, column: any) => [\n                ...buffers,\n                ...(column['VALIDITY'] && [column['VALIDITY']] || []),\n                ...(column['TYPE'] && [column['TYPE']] || []),\n                ...(column['OFFSET'] && [column['OFFSET']] || []),\n                ...(column['DATA'] && [column['DATA']] || []),\n                ...flattenDataSources(column['children'])\n            ], [] as any[][]);\n        }\n    }\n    public readMessage<T extends MessageHeader>(type?: T | null) {\n        let r: IteratorResult<Message<T>>;\n        if ((r = this.next()).done) { return null; }\n        if ((type != null) && r.value.headerType !== type) {\n            throw new Error(invalidMessageType(type));\n        }\n        return r.value;\n    }\n    public readSchema() {\n        const type = MessageHeader.Schema;\n        const message = this.readMessage(type);\n        const schema = message && message.header();\n        if (!message || !schema) {\n            throw new Error(nullMessage(type));\n        }\n        return schema;\n    }\n}\n\n/** @ignore */\nexport const PADDING = 4;\n/** @ignore */\nexport const MAGIC_STR = 'ARROW1';\n/** @ignore */\nexport const MAGIC = new Uint8Array(MAGIC_STR.length);\n\nfor (let i = 0; i < MAGIC_STR.length; i += 1 | 0) {\n    MAGIC[i] = MAGIC_STR.charCodeAt(i);\n}\n\n/** @ignore */\nexport function checkForMagicArrowString(buffer: Uint8Array, index = 0) {\n    for (let i = -1, n = MAGIC.length; ++i < n;) {\n        if (MAGIC[i] !== buffer[index + i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n/** @ignore */\nexport const magicLength = MAGIC.length;\n/** @ignore */\nexport const magicAndPadding = magicLength + PADDING;\n/** @ignore */\nexport const magicX2AndPadding = magicLength * 2 + PADDING;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { Visitor } from '../visitor';\nimport { Type, UnionMode } from '../enum';\nimport { RecordBatch } from '../recordbatch';\nimport { VectorType as V } from '../interfaces';\nimport { rebaseValueOffsets } from '../util/buffer';\nimport { packBools, truncateBitmap } from '../util/bit';\nimport { selectVectorChildrenArgs } from '../util/args';\nimport { BufferRegion, FieldNode } from '../ipc/metadata/message';\nimport {\n    DataType, Dictionary,\n    Float, Int, Date_, Interval, Time, Timestamp, Union,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n} from '../type';\n\n/** @ignore */\nexport interface VectorAssembler extends Visitor {\n    visit<T extends Vector>(node: T): this;\n    visitMany<T extends Vector>(nodes: T[]): this[];\n    getVisitFn<T extends Type>(node: T): (vector: V<T>) => this;\n    getVisitFn<T extends DataType>(node: V<T> | Data<T> | T): (vector: V<T>) => this;\n\n    visitBool                 <T extends Bool>            (vector: V<T>): this;\n    visitInt                  <T extends Int>             (vector: V<T>): this;\n    visitFloat                <T extends Float>           (vector: V<T>): this;\n    visitUtf8                 <T extends Utf8>            (vector: V<T>): this;\n    visitBinary               <T extends Binary>          (vector: V<T>): this;\n    visitFixedSizeBinary      <T extends FixedSizeBinary> (vector: V<T>): this;\n    visitDate                 <T extends Date_>           (vector: V<T>): this;\n    visitTimestamp            <T extends Timestamp>       (vector: V<T>): this;\n    visitTime                 <T extends Time>            (vector: V<T>): this;\n    visitDecimal              <T extends Decimal>         (vector: V<T>): this;\n    visitList                 <T extends List>            (vector: V<T>): this;\n    visitStruct               <T extends Struct>          (vector: V<T>): this;\n    visitUnion                <T extends Union>           (vector: V<T>): this;\n    visitInterval             <T extends Interval>        (vector: V<T>): this;\n    visitFixedSizeList        <T extends FixedSizeList>   (vector: V<T>): this;\n    visitMap                  <T extends Map_>            (vector: V<T>): this;\n}\n\n/** @ignore */\nexport class VectorAssembler extends Visitor {\n\n    /** @nocollapse */\n    public static assemble<T extends Vector | RecordBatch>(...args: (T | T[])[]) {\n        const assembler = new VectorAssembler();\n        const vectorChildren = selectVectorChildrenArgs(RecordBatch, args);\n        const [assembleResult = assembler] = assembler.visitMany(vectorChildren);\n        return assembleResult;\n    }\n\n    private constructor() { super(); }\n\n    public visit<T extends Vector>(vector: T): this {\n        if (!DataType.isDictionary(vector.type)) {\n            const { data, length, nullCount } = vector;\n            if (length > 2147483647) {\n                /* istanbul ignore next */\n                throw new RangeError('Cannot write arrays larger than 2^31 - 1 in length');\n            }\n            if (!DataType.isNull(vector.type)) {\n                addBuffer.call(this, nullCount <= 0\n                    ? new Uint8Array(0) // placeholder validity buffer\n                    : truncateBitmap(data.offset, length, data.nullBitmap)\n                );\n            }\n            this.nodes.push(new FieldNode(length, nullCount));\n        }\n        return super.visit(vector);\n    }\n\n    public visitNull<T extends Null>(_nullV: V<T>) {\n        return this;\n    }\n    public visitDictionary<T extends Dictionary>(vector: V<T>) {\n        // Assemble the indices here, Dictionary assembled separately.\n        return this.visit(vector.indices);\n    }\n\n    public get nodes() { return this._nodes; }\n    public get buffers() { return this._buffers; }\n    public get byteLength() { return this._byteLength; }\n    public get bufferRegions() { return this._bufferRegions; }\n\n    protected _byteLength = 0;\n    protected _nodes: FieldNode[] = [];\n    protected _buffers: ArrayBufferView[] = [];\n    protected _bufferRegions: BufferRegion[] = [];\n}\n\n/** @ignore */\nfunction addBuffer(this: VectorAssembler, values: ArrayBufferView) {\n    const byteLength = (values.byteLength + 7) & ~7; // Round up to a multiple of 8\n    this.buffers.push(values);\n    this.bufferRegions.push(new BufferRegion(this._byteLength, byteLength));\n    this._byteLength += byteLength;\n    return this;\n}\n\n/** @ignore */\nfunction assembleUnion<T extends Union>(this: VectorAssembler, vector: V<T>) {\n    const { type, length, typeIds, valueOffsets } = vector;\n    // All Union Vectors have a typeIds buffer\n    addBuffer.call(this, typeIds);\n    // If this is a Sparse Union, treat it like all other Nested types\n    if (type.mode === UnionMode.Sparse) {\n        return assembleNestedVector.call(this, vector);\n    } else if (type.mode === UnionMode.Dense) {\n        // If this is a Dense Union, add the valueOffsets buffer and potentially slice the children\n        if (vector.offset <= 0) {\n            // If the Vector hasn't been sliced, write the existing valueOffsets\n            addBuffer.call(this, valueOffsets);\n            // We can treat this like all other Nested types\n            return assembleNestedVector.call(this, vector);\n        } else {\n            // A sliced Dense Union is an unpleasant case. Because the offsets are different for\n            // each child vector, we need to \"rebase\" the valueOffsets for each child\n            // Union typeIds are not necessary 0-indexed\n            const maxChildTypeId = typeIds.reduce((x, y) => Math.max(x, y), typeIds[0]);\n            const childLengths = new Int32Array(maxChildTypeId + 1);\n            // Set all to -1 to indicate that we haven't observed a first occurrence of a particular child yet\n            const childOffsets = new Int32Array(maxChildTypeId + 1).fill(-1);\n            const shiftedOffsets = new Int32Array(length);\n            // If we have a non-zero offset, then the value offsets do not start at\n            // zero. We must a) create a new offsets array with shifted offsets and\n            // b) slice the values array accordingly\n            const unshiftedOffsets = rebaseValueOffsets(-valueOffsets[0], length, valueOffsets);\n            for (let typeId, shift, index = -1; ++index < length;) {\n                if ((shift = childOffsets[typeId = typeIds[index]]) === -1) {\n                    shift = childOffsets[typeId] = unshiftedOffsets[typeId];\n                }\n                shiftedOffsets[index] = unshiftedOffsets[index] - shift;\n                ++childLengths[typeId];\n            }\n            addBuffer.call(this, shiftedOffsets);\n            // Slice and visit children accordingly\n            for (let child: Vector | null, childIndex = -1, numChildren = type.children.length; ++childIndex < numChildren;) {\n                if (child = vector.getChildAt(childIndex)) {\n                    const typeId = type.typeIds[childIndex];\n                    const childLength = Math.min(length, childLengths[typeId]);\n                    this.visit(child.slice(childOffsets[typeId], childLength));\n                }\n            }\n        }\n    }\n    return this;\n}\n\n/** @ignore */\nfunction assembleBoolVector<T extends Bool>(this: VectorAssembler, vector: V<T>) {\n    // Bool vector is a special case of FlatVector, as its data buffer needs to stay packed\n    let values: Uint8Array;\n    if (vector.nullCount >= vector.length) {\n        // If all values are null, just insert a placeholder empty data buffer (fastest path)\n        return addBuffer.call(this, new Uint8Array(0));\n    } else if ((values = vector.values) instanceof Uint8Array) {\n        // If values is already a Uint8Array, slice the bitmap (fast path)\n        return addBuffer.call(this, truncateBitmap(vector.offset, vector.length, values));\n    }\n    // Otherwise if the underlying data *isn't* a Uint8Array, enumerate the\n    // values as bools and re-pack them into a Uint8Array. This code isn't\n    // reachable unless you're trying to manipulate the Data internals,\n    // we we're only doing this for safety.\n    /* istanbul ignore next */\n    return addBuffer.call(this, packBools(vector));\n}\n\n/** @ignore */\nfunction assembleFlatVector<T extends Int | Float | FixedSizeBinary | Date_ | Timestamp | Time | Decimal | Interval>(this: VectorAssembler, vector: V<T>) {\n    return addBuffer.call(this, vector.values.subarray(0, vector.length * vector.stride));\n}\n\n/** @ignore */\nfunction assembleFlatListVector<T extends Utf8 | Binary>(this: VectorAssembler, vector: V<T>) {\n    const { length, values, valueOffsets } = vector;\n    const firstOffset = valueOffsets[0];\n    const lastOffset = valueOffsets[length];\n    const byteLength = Math.min(lastOffset - firstOffset, values.byteLength - firstOffset);\n    // Push in the order FlatList types read their buffers\n    addBuffer.call(this, rebaseValueOffsets(-valueOffsets[0], length, valueOffsets)); // valueOffsets buffer first\n    addBuffer.call(this, values.subarray(firstOffset, firstOffset + byteLength)); // sliced values buffer second\n    return this;\n}\n\n/** @ignore */\nfunction assembleListVector<T extends Map_ | List | FixedSizeList>(this: VectorAssembler, vector: V<T>) {\n    const { length, valueOffsets } = vector;\n    // If we have valueOffsets (MapVector, ListVector), push that buffer first\n    if (valueOffsets) {\n        addBuffer.call(this, rebaseValueOffsets(valueOffsets[0], length, valueOffsets));\n    }\n    // Then insert the List's values child\n    return this.visit(vector.getChildAt(0)!);\n}\n\n/** @ignore */\nfunction assembleNestedVector<T extends Struct | Union>(this: VectorAssembler, vector: V<T>) {\n    return this.visitMany(vector.type.children.map((_, i) => vector.getChildAt(i)!).filter(Boolean))[0];\n}\n\nVectorAssembler.prototype.visitBool            =     assembleBoolVector;\nVectorAssembler.prototype.visitInt             =     assembleFlatVector;\nVectorAssembler.prototype.visitFloat           =     assembleFlatVector;\nVectorAssembler.prototype.visitUtf8            = assembleFlatListVector;\nVectorAssembler.prototype.visitBinary          = assembleFlatListVector;\nVectorAssembler.prototype.visitFixedSizeBinary =     assembleFlatVector;\nVectorAssembler.prototype.visitDate            =     assembleFlatVector;\nVectorAssembler.prototype.visitTimestamp       =     assembleFlatVector;\nVectorAssembler.prototype.visitTime            =     assembleFlatVector;\nVectorAssembler.prototype.visitDecimal         =     assembleFlatVector;\nVectorAssembler.prototype.visitList            =     assembleListVector;\nVectorAssembler.prototype.visitStruct          =   assembleNestedVector;\nVectorAssembler.prototype.visitUnion           =          assembleUnion;\nVectorAssembler.prototype.visitInterval        =     assembleFlatVector;\nVectorAssembler.prototype.visitFixedSizeList   =     assembleListVector;\nVectorAssembler.prototype.visitMap             =     assembleListVector;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Table } from '../table';\nimport { MAGIC } from './message';\nimport { Vector } from '../vector';\nimport { Column } from '../column';\nimport { DataType } from '../type';\nimport { Schema, Field } from '../schema';\nimport { Message } from './metadata/message';\nimport * as metadata from './metadata/message';\nimport { FileBlock, Footer } from './metadata/file';\nimport { MessageHeader, MetadataVersion } from '../enum';\nimport { WritableSink, AsyncByteQueue } from '../io/stream';\nimport { VectorAssembler } from '../visitor/vectorassembler';\nimport { JSONTypeAssembler } from '../visitor/jsontypeassembler';\nimport { JSONVectorAssembler } from '../visitor/jsonvectorassembler';\nimport { ArrayBufferViewInput, toUint8Array } from '../util/buffer';\nimport { RecordBatch, _InternalEmptyPlaceholderRecordBatch } from '../recordbatch';\nimport { Writable, ReadableInterop, ReadableDOMStreamOptions } from '../io/interfaces';\nimport { isPromise, isAsyncIterable, isWritableDOMStream, isWritableNodeStream, isIterable, isObject } from '../util/compat';\n\nexport interface RecordBatchStreamWriterOptions {\n    /**\n     *\n     */\n    autoDestroy?: boolean;\n    /**\n     * A flag indicating whether the RecordBatchWriter should construct pre-0.15.0\n     * encapsulated IPC Messages, which reserves  4 bytes for the Message metadata\n     * length instead of 8.\n     * @see https://issues.apache.org/jira/browse/ARROW-6313\n     */\n    writeLegacyIpcFormat?: boolean;\n}\n\nexport class RecordBatchWriter<T extends { [key: string]: DataType } = any> extends ReadableInterop<Uint8Array> implements Writable<RecordBatch<T>> {\n\n    /** @nocollapse */\n    // @ts-ignore\n    public static throughNode(options?: import('stream').DuplexOptions & { autoDestroy: boolean }): import('stream').Duplex {\n        throw new Error(`\"throughNode\" not available in this environment`);\n    }\n    /** @nocollapse */\n    public static throughDOM<T extends { [key: string]: DataType }>(\n        // @ts-ignore\n        writableStrategy?: QueuingStrategy<RecordBatch<T>> & { autoDestroy: boolean },\n        // @ts-ignore\n        readableStrategy?: { highWaterMark?: number, size?: any }\n    ): { writable: WritableStream<Table<T> | RecordBatch<T>>, readable: ReadableStream<Uint8Array> } {\n        throw new Error(`\"throughDOM\" not available in this environment`);\n    }\n\n    constructor(options?: RecordBatchStreamWriterOptions) {\n        super();\n        isObject(options) || (options = { autoDestroy: true, writeLegacyIpcFormat: false });\n        this._autoDestroy = (typeof options.autoDestroy === 'boolean') ? options.autoDestroy : true;\n        this._writeLegacyIpcFormat = (typeof options.writeLegacyIpcFormat === 'boolean') ? options.writeLegacyIpcFormat : false;\n    }\n\n    protected _position = 0;\n    protected _started = false;\n    protected _autoDestroy: boolean;\n    protected _writeLegacyIpcFormat: boolean;\n    // @ts-ignore\n    protected _sink = new AsyncByteQueue();\n    protected _schema: Schema | null = null;\n    protected _dictionaryBlocks: FileBlock[] = [];\n    protected _recordBatchBlocks: FileBlock[] = [];\n    protected _dictionaryDeltaOffsets = new Map<number, number>();\n\n    public toString(sync: true): string;\n    public toString(sync?: false): Promise<string>;\n    public toString(sync: any = false) {\n        return this._sink.toString(sync) as Promise<string> | string;\n    }\n    public toUint8Array(sync: true): Uint8Array;\n    public toUint8Array(sync?: false): Promise<Uint8Array>;\n    public toUint8Array(sync: any = false) {\n        return this._sink.toUint8Array(sync) as Promise<Uint8Array> | Uint8Array;\n    }\n\n    public writeAll(input: Table<T> | Iterable<RecordBatch<T>>): this;\n    public writeAll(input: AsyncIterable<RecordBatch<T>>): Promise<this>;\n    public writeAll(input: PromiseLike<AsyncIterable<RecordBatch<T>>>): Promise<this>;\n    public writeAll(input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>): Promise<this>;\n    public writeAll(input: PromiseLike<any> | Table<T> | Iterable<RecordBatch<T>> | AsyncIterable<RecordBatch<T>>) {\n        if (isPromise<any>(input)) {\n            return input.then((x) => this.writeAll(x));\n        } else if (isAsyncIterable<RecordBatch<T>>(input)) {\n            return writeAllAsync(this, input);\n        }\n        return writeAll(this, <any> input);\n    }\n\n    public get closed() { return this._sink.closed; }\n    public [Symbol.asyncIterator]() { return this._sink[Symbol.asyncIterator](); }\n    public toDOMStream(options?: ReadableDOMStreamOptions) { return this._sink.toDOMStream(options); }\n    public toNodeStream(options?: import('stream').ReadableOptions) { return this._sink.toNodeStream(options); }\n\n    public close() {\n        return this.reset()._sink.close();\n    }\n    public abort(reason?: any) {\n        return this.reset()._sink.abort(reason);\n    }\n    public finish() {\n        this._autoDestroy ? this.close() : this.reset(this._sink, this._schema);\n        return this;\n    }\n    public reset(sink: WritableSink<ArrayBufferViewInput> = this._sink, schema: Schema<T> | null = null) {\n\n        if ((sink === this._sink) || (sink instanceof AsyncByteQueue)) {\n            this._sink = sink as AsyncByteQueue;\n        } else {\n            this._sink = new AsyncByteQueue();\n            if (sink && isWritableDOMStream(sink)) {\n                this.toDOMStream({ type: 'bytes' }).pipeTo(sink);\n            } else if (sink && isWritableNodeStream(sink)) {\n                this.toNodeStream({ objectMode: false }).pipe(sink);\n            }\n        }\n\n        if (this._started && this._schema) {\n            this._writeFooter(this._schema);\n        }\n\n        this._started = false;\n        this._dictionaryBlocks = [];\n        this._recordBatchBlocks = [];\n        this._dictionaryDeltaOffsets = new Map();\n\n        if (!schema || !(schema.compareTo(this._schema))) {\n            if (schema === null) {\n                this._position = 0;\n                this._schema = null;\n            } else {\n                this._started = true;\n                this._schema = schema;\n                this._writeSchema(schema);\n            }\n        }\n\n        return this;\n    }\n\n    public write(payload?: Table<T> | RecordBatch<T> | Iterable<RecordBatch<T>> | null) {\n\n        let schema: Schema<T> | null = null;\n\n        if (!this._sink) {\n            throw new Error(`RecordBatchWriter is closed`);\n        } else if (payload === null || payload === undefined) {\n            return this.finish() && undefined;\n        } else if (payload instanceof Table && !(schema = payload.schema)) {\n            return this.finish() && undefined;\n        } else if (payload instanceof RecordBatch && !(schema = payload.schema)) {\n            return this.finish() && undefined;\n        }\n\n        if (schema && !schema.compareTo(this._schema)) {\n            if (this._started && this._autoDestroy) {\n                return this.close();\n            }\n            this.reset(this._sink, schema);\n        }\n\n        if (payload instanceof RecordBatch) {\n            if (!(payload instanceof _InternalEmptyPlaceholderRecordBatch)) {\n                this._writeRecordBatch(payload);\n            }\n        } else if (payload instanceof Table) {\n            this.writeAll(payload.chunks);\n        } else if (isIterable(payload)) {\n            this.writeAll(payload);\n        }\n    }\n\n    protected _writeMessage<T extends MessageHeader>(message: Message<T>, alignment = 8) {\n\n        const a = alignment - 1;\n        const buffer = Message.encode(message);\n        const flatbufferSize = buffer.byteLength;\n        const prefixSize = !this._writeLegacyIpcFormat ? 8 : 4;\n        const alignedSize = (flatbufferSize + prefixSize + a) & ~a;\n        const nPaddingBytes = alignedSize - flatbufferSize - prefixSize;\n\n        if (message.headerType === MessageHeader.RecordBatch) {\n            this._recordBatchBlocks.push(new FileBlock(alignedSize, message.bodyLength, this._position));\n        } else if (message.headerType === MessageHeader.DictionaryBatch) {\n            this._dictionaryBlocks.push(new FileBlock(alignedSize, message.bodyLength, this._position));\n        }\n\n        // If not in legacy pre-0.15.0 mode, write the stream continuation indicator\n        if (!this._writeLegacyIpcFormat) {\n            this._write(Int32Array.of(-1));\n        }\n        // Write the flatbuffer size prefix including padding\n        this._write(Int32Array.of(alignedSize - prefixSize));\n        // Write the flatbuffer\n        if (flatbufferSize > 0) { this._write(buffer); }\n        // Write any padding\n        return this._writePadding(nPaddingBytes);\n    }\n\n    protected _write(chunk: ArrayBufferViewInput) {\n        if (this._started) {\n            const buffer = toUint8Array(chunk);\n            if (buffer && buffer.byteLength > 0) {\n                this._sink.write(buffer);\n                this._position += buffer.byteLength;\n            }\n        }\n        return this;\n    }\n\n    protected _writeSchema(schema: Schema<T>) {\n        return this._writeMessage(Message.from(schema));\n    }\n\n    // @ts-ignore\n    protected _writeFooter(schema: Schema<T>) {\n        // eos bytes\n        return this._writeLegacyIpcFormat\n            ? this._write(Int32Array.of(0))\n            : this._write(Int32Array.of(-1, 0));\n    }\n\n    protected _writeMagic() {\n        return this._write(MAGIC);\n    }\n\n    protected _writePadding(nBytes: number) {\n        return nBytes > 0 ? this._write(new Uint8Array(nBytes)) : this;\n    }\n\n    protected _writeRecordBatch(batch: RecordBatch<T>) {\n        const { byteLength, nodes, bufferRegions, buffers } = VectorAssembler.assemble(batch);\n        const recordBatch = new metadata.RecordBatch(batch.length, nodes, bufferRegions);\n        const message = Message.from(recordBatch, byteLength);\n        return this\n            ._writeDictionaries(batch)\n            ._writeMessage(message)\n            ._writeBodyBuffers(buffers);\n    }\n\n    protected _writeDictionaryBatch(dictionary: Vector, id: number, isDelta = false) {\n        this._dictionaryDeltaOffsets.set(id, dictionary.length + (this._dictionaryDeltaOffsets.get(id) || 0));\n        const { byteLength, nodes, bufferRegions, buffers } = VectorAssembler.assemble(dictionary);\n        const recordBatch = new metadata.RecordBatch(dictionary.length, nodes, bufferRegions);\n        const dictionaryBatch = new metadata.DictionaryBatch(recordBatch, id, isDelta);\n        const message = Message.from(dictionaryBatch, byteLength);\n        return this\n            ._writeMessage(message)\n            ._writeBodyBuffers(buffers);\n    }\n\n    protected _writeBodyBuffers(buffers: ArrayBufferView[]) {\n        let buffer: ArrayBufferView;\n        let size: number, padding: number;\n        for (let i = -1, n = buffers.length; ++i < n;) {\n            if ((buffer = buffers[i]) && (size = buffer.byteLength) > 0) {\n                this._write(buffer);\n                if ((padding = ((size + 7) & ~7) - size) > 0) {\n                    this._writePadding(padding);\n                }\n            }\n        }\n        return this;\n    }\n\n    protected _writeDictionaries(batch: RecordBatch<T>) {\n        for (let [id, dictionary] of batch.dictionaries) {\n            let offset = this._dictionaryDeltaOffsets.get(id) || 0;\n            if (offset === 0 || (dictionary = dictionary.slice(offset)).length > 0) {\n                const chunks = 'chunks' in dictionary ? (dictionary as any).chunks : [dictionary];\n                for (const chunk of chunks) {\n                    this._writeDictionaryBatch(chunk, id, offset > 0);\n                    offset += chunk.length;\n                }\n            }\n        }\n        return this;\n    }\n}\n\n/** @ignore */\nexport class RecordBatchStreamWriter<T extends { [key: string]: DataType } = any> extends RecordBatchWriter<T> {\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: Table<T> | Iterable<RecordBatch<T>>, options?: RecordBatchStreamWriterOptions): RecordBatchStreamWriter<T>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: AsyncIterable<RecordBatch<T>>, options?: RecordBatchStreamWriterOptions): Promise<RecordBatchStreamWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: PromiseLike<AsyncIterable<RecordBatch<T>>>, options?: RecordBatchStreamWriterOptions): Promise<RecordBatchStreamWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>, options?: RecordBatchStreamWriterOptions): Promise<RecordBatchStreamWriter<T>>;\n    /** @nocollapse */\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: any, options?: RecordBatchStreamWriterOptions) {\n        const writer = new RecordBatchStreamWriter<T>(options);\n        if (isPromise<any>(input)) {\n            return input.then((x) => writer.writeAll(x));\n        } else if (isAsyncIterable<RecordBatch<T>>(input)) {\n            return writeAllAsync(writer, input);\n        }\n        return writeAll(writer, input);\n    }\n}\n\n/** @ignore */\nexport class RecordBatchFileWriter<T extends { [key: string]: DataType } = any> extends RecordBatchWriter<T> {\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: Table<T> | Iterable<RecordBatch<T>>): RecordBatchFileWriter<T>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: AsyncIterable<RecordBatch<T>>): Promise<RecordBatchFileWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: PromiseLike<AsyncIterable<RecordBatch<T>>>): Promise<RecordBatchFileWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>): Promise<RecordBatchFileWriter<T>>;\n    /** @nocollapse */\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: any) {\n        const writer = new RecordBatchFileWriter<T>();\n        if (isPromise<any>(input)) {\n            return input.then((x) => writer.writeAll(x));\n        } else if (isAsyncIterable<RecordBatch<T>>(input)) {\n            return writeAllAsync(writer, input);\n        }\n        return writeAll(writer, input);\n    }\n\n    constructor() {\n        super();\n        this._autoDestroy = true;\n    }\n\n    // @ts-ignore\n    protected _writeSchema(schema: Schema<T>) {\n        return this._writeMagic()._writePadding(2);\n    }\n\n    protected _writeFooter(schema: Schema<T>) {\n        const buffer = Footer.encode(new Footer(\n            schema, MetadataVersion.V4,\n            this._recordBatchBlocks, this._dictionaryBlocks\n        ));\n        return super\n            ._writeFooter(schema) // EOS bytes for sequential readers\n            ._write(buffer) // Write the flatbuffer\n            ._write(Int32Array.of(buffer.byteLength)) // then the footer size suffix\n            ._writeMagic(); // then the magic suffix\n    }\n}\n\n/** @ignore */\nexport class RecordBatchJSONWriter<T extends { [key: string]: DataType } = any> extends RecordBatchWriter<T> {\n\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: Table<T> | Iterable<RecordBatch<T>>): RecordBatchJSONWriter<T>;\n    // @ts-ignore\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: AsyncIterable<RecordBatch<T>>): Promise<RecordBatchJSONWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: PromiseLike<AsyncIterable<RecordBatch<T>>>): Promise<RecordBatchJSONWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>): Promise<RecordBatchJSONWriter<T>>;\n    /** @nocollapse */\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: any) {\n        return new RecordBatchJSONWriter<T>().writeAll(input as any);\n    }\n\n    private _recordBatches: RecordBatch[];\n    private _dictionaries: RecordBatch[];\n\n    constructor() {\n        super();\n        this._autoDestroy = true;\n        this._recordBatches = [];\n        this._dictionaries = [];\n    }\n\n    protected _writeMessage() { return this; }\n    // @ts-ignore\n    protected _writeFooter(schema: Schema<T>) { return this; }\n    protected _writeSchema(schema: Schema<T>) {\n        return this._write(`{\\n  \"schema\": ${\n            JSON.stringify({ fields: schema.fields.map(fieldToJSON) }, null, 2)\n        }`);\n    }\n    protected _writeDictionaries(batch: RecordBatch<T>) {\n        if (batch.dictionaries.size > 0) {\n            this._dictionaries.push(batch);\n        }\n        return this;\n    }\n    protected _writeDictionaryBatch(dictionary: Vector, id: number, isDelta = false) {\n        this._dictionaryDeltaOffsets.set(id, dictionary.length + (this._dictionaryDeltaOffsets.get(id) || 0));\n        this._write(this._dictionaryBlocks.length === 0 ? `    ` : `,\\n    `);\n        this._write(`${dictionaryBatchToJSON(dictionary, id, isDelta)}`);\n        this._dictionaryBlocks.push(new FileBlock(0, 0, 0));\n        return this;\n    }\n    protected _writeRecordBatch(batch: RecordBatch<T>) {\n        this._writeDictionaries(batch);\n        this._recordBatches.push(batch);\n        return this;\n    }\n    public close() {\n\n        if (this._dictionaries.length > 0) {\n            this._write(`,\\n  \"dictionaries\": [\\n`);\n            for (const batch of this._dictionaries) {\n                super._writeDictionaries(batch);\n            }\n            this._write(`\\n  ]`);\n        }\n\n        if (this._recordBatches.length > 0) {\n            for (let i = -1, n = this._recordBatches.length; ++i < n;) {\n                this._write(i === 0 ? `,\\n  \"batches\": [\\n    ` : `,\\n    `);\n                this._write(`${recordBatchToJSON(this._recordBatches[i])}`);\n                this._recordBatchBlocks.push(new FileBlock(0, 0, 0));\n            }\n            this._write(`\\n  ]`);\n        }\n\n        if (this._schema) {\n            this._write(`\\n}`);\n        }\n\n        this._dictionaries = [];\n        this._recordBatches = [];\n\n        return super.close();\n    }\n}\n\n/** @ignore */\nfunction writeAll<T extends { [key: string]: DataType } = any>(writer: RecordBatchWriter<T>, input: Table<T> | Iterable<RecordBatch<T>>) {\n    let chunks = input as Iterable<RecordBatch<T>>;\n    if (input instanceof Table) {\n        chunks = input.chunks;\n        writer.reset(undefined, input.schema);\n    }\n    for (const batch of chunks) {\n        writer.write(batch);\n    }\n    return writer.finish();\n}\n\n/** @ignore */\nasync function writeAllAsync<T extends { [key: string]: DataType } = any>(writer: RecordBatchWriter<T>, batches: AsyncIterable<RecordBatch<T>>) {\n    for await (const batch of batches) {\n        writer.write(batch);\n    }\n    return writer.finish();\n}\n\n/** @ignore */\nfunction fieldToJSON({ name, type, nullable }: Field): object {\n    const assembler = new JSONTypeAssembler();\n    return {\n        'name': name, 'nullable': nullable,\n        'type': assembler.visit(type),\n        'children': (type.children || []).map(fieldToJSON),\n        'dictionary': !DataType.isDictionary(type) ? undefined : {\n            'id': type.id,\n            'isOrdered': type.isOrdered,\n            'indexType': assembler.visit(type.indices)\n        }\n    };\n}\n\n/** @ignore */\nfunction dictionaryBatchToJSON(dictionary: Vector, id: number, isDelta = false) {\n    const field = new Field(`${id}`, dictionary.type, dictionary.nullCount > 0);\n    const columns = JSONVectorAssembler.assemble(new Column(field, [dictionary]));\n    return JSON.stringify({\n        'id': id,\n        'isDelta': isDelta,\n        'data': {\n            'count': dictionary.length,\n            'columns': columns\n        }\n    }, null, 2);\n}\n\n/** @ignore */\nfunction recordBatchToJSON(records: RecordBatch) {\n    return JSON.stringify({\n        'count': records.length,\n        'columns': JSONVectorAssembler.assemble(records)\n    }, null, 2);\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Column } from '../column';\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { Data, Buffers } from '../data';\nimport { Schema, Field } from '../schema';\nimport { Chunked } from '../vector/chunked';\nimport { RecordBatch } from '../recordbatch';\n\nconst noopBuf = new Uint8Array(0);\nconst nullBufs = (bitmapLength: number) => <unknown> [\n    noopBuf, noopBuf, new Uint8Array(bitmapLength), noopBuf\n] as Buffers<any>;\n\n/** @ignore */\nexport function ensureSameLengthData<T extends { [key: string]: DataType } = any>(\n    schema: Schema<T>,\n    chunks: Data<T[keyof T]>[],\n    batchLength = chunks.reduce((l, c) => Math.max(l, c.length), 0)\n) {\n    let data: Data<T[keyof T]>;\n    let field: Field<T[keyof T]>;\n    let i = -1, n = chunks.length;\n    const fields = [...schema.fields];\n    const batchData = [] as Data<T[keyof T]>[];\n    const bitmapLength = ((batchLength + 63) & ~63) >> 3;\n    while (++i < n) {\n        if ((data = chunks[i]) && data.length === batchLength) {\n            batchData[i] = data;\n        } else {\n            (field = fields[i]).nullable || (fields[i] = fields[i].clone({ nullable: true }) as Field<T[keyof T]>);\n            batchData[i] = data ? data._changeLengthAndBackfillNullBitmap(batchLength)\n                : Data.new(field.type, 0, batchLength, batchLength, nullBufs(bitmapLength)) as Data<T[keyof T]>;\n        }\n    }\n    return [new Schema<T>(fields), batchLength, batchData] as [Schema<T>, number, Data<T[keyof T]>[]];\n}\n\n/** @ignore */\nexport function distributeColumnsIntoRecordBatches<T extends { [key: string]: DataType } = any>(columns: Column<T[keyof T]>[]): [Schema<T>, RecordBatch<T>[]] {\n    return distributeVectorsIntoRecordBatches<T>(new Schema<T>(columns.map(({ field }) => field)), columns);\n}\n\n/** @ignore */\nexport function distributeVectorsIntoRecordBatches<T extends { [key: string]: DataType } = any>(schema: Schema<T>, vecs: (Vector<T[keyof T]> | Chunked<T[keyof T]>)[]): [Schema<T>, RecordBatch<T>[]] {\n    return uniformlyDistributeChunksAcrossRecordBatches<T>(schema, vecs.map((v) => v instanceof Chunked ? v.chunks.map((c) => c.data) : [v.data]));\n}\n\n/** @ignore */\nfunction uniformlyDistributeChunksAcrossRecordBatches<T extends { [key: string]: DataType } = any>(schema: Schema<T>, columns: Data<T[keyof T]>[][]): [Schema<T>, RecordBatch<T>[]] {\n\n    const fields = [...schema.fields];\n    const batchArgs = [] as [number, Data<T[keyof T]>[]][];\n    const memo = { numBatches: columns.reduce((n, c) => Math.max(n, c.length), 0) };\n\n    let numBatches = 0, batchLength = 0;\n    let i: number = -1, numColumns = columns.length;\n    let child: Data<T[keyof T]>, childData: Data<T[keyof T]>[] = [];\n\n    while (memo.numBatches-- > 0) {\n\n        for (batchLength = Number.POSITIVE_INFINITY, i = -1; ++i < numColumns;) {\n            childData[i] = child = columns[i].shift()!;\n            batchLength = Math.min(batchLength, child ? child.length : batchLength);\n        }\n\n        if (isFinite(batchLength)) {\n            childData = distributeChildData(fields, batchLength, childData, columns, memo);\n            if (batchLength > 0) {\n                batchArgs[numBatches++] = [batchLength, childData.slice()];\n            }\n        }\n    }\n    return [\n        schema = new Schema<T>(fields, schema.metadata),\n        batchArgs.map((xs) => new RecordBatch(schema, ...xs))\n    ];\n}\n\n/** @ignore */\nfunction distributeChildData<T extends { [key: string]: DataType } = any>(fields: Field<T[keyof T]>[], batchLength: number, childData: Data<T[keyof T]>[], columns: Data<T[keyof T]>[][], memo: { numBatches: number }) {\n    let data: Data<T[keyof T]>;\n    let field: Field<T[keyof T]>;\n    let length = 0, i = -1, n = columns.length;\n    const bitmapLength = ((batchLength + 63) & ~63) >> 3;\n    while (++i < n) {\n        if ((data = childData[i]) && ((length = data.length) >= batchLength)) {\n            if (length === batchLength) {\n                childData[i] = data;\n            } else {\n                childData[i] = data.slice(0, batchLength);\n                data = data.slice(batchLength, length - batchLength);\n                memo.numBatches = Math.max(memo.numBatches, columns[i].unshift(data));\n            }\n        } else {\n            (field = fields[i]).nullable || (fields[i] = field.clone({ nullable: true }) as Field<T[keyof T]>);\n            childData[i] = data ? data._changeLengthAndBackfillNullBitmap(batchLength)\n                : Data.new(field.type, 0, batchLength, batchLength, nullBufs(bitmapLength)) as Data<T[keyof T]>;\n        }\n    }\n    return childData;\n}\n","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { DataType } from '../type';\nimport { Chunked } from './chunked';\nimport { clampRange } from '../util/vector';\nimport { VectorType as V } from '../interfaces';\nimport { AbstractVector, Vector, Clonable, Sliceable, Applicative } from '../vector';\n\n/** @ignore */\nexport interface BaseVector<T extends DataType = any> extends Clonable<V<T>>, Sliceable<V<T>>, Applicative<T, Chunked<T>> {\n    slice(begin?: number, end?: number): V<T>;\n    concat(...others: Vector<T>[]): Chunked<T>;\n    clone<R extends DataType = T>(data: Data<R>, children?: Vector<R>[]): V<R>;\n}\n\n/** @ignore */\nexport abstract class BaseVector<T extends DataType = any> extends AbstractVector<T>\n    implements Clonable<V<T>>, Sliceable<V<T>>, Applicative<T, Chunked<T>> {\n\n    protected _children?: Vector[];\n\n    constructor(data: Data<T>, children?: Vector[]) {\n        super();\n        this._children = children;\n        this.numChildren = data.childData.length;\n        this._bindDataAccessors(this.data = data);\n    }\n\n    public readonly data: Data<T>;\n    public readonly numChildren: number;\n\n    public get type() { return this.data.type; }\n    public get typeId() { return this.data.typeId; }\n    public get length() { return this.data.length; }\n    public get offset() { return this.data.offset; }\n    public get stride() { return this.data.stride; }\n    public get nullCount() { return this.data.nullCount; }\n    public get byteLength() { return this.data.byteLength; }\n    public get VectorName() { return `${Type[this.typeId]}Vector`; }\n\n    public get ArrayType(): T['ArrayType'] { return this.type.ArrayType; }\n\n    public get values() { return this.data.values; }\n    public get typeIds() { return this.data.typeIds; }\n    public get nullBitmap() { return this.data.nullBitmap; }\n    public get valueOffsets() { return this.data.valueOffsets; }\n\n    public get [Symbol.toStringTag]() { return `${this.VectorName}<${this.type[Symbol.toStringTag]}>`; }\n\n    public clone<R extends DataType = T>(data: Data<R>, children = this._children) {\n        return Vector.new<R>(data, children) as any;\n    }\n\n    public concat(...others: Vector<T>[]) {\n        return Chunked.concat<T>(this, ...others);\n    }\n\n    public slice(begin?: number, end?: number) {\n        // Adjust args similar to Array.prototype.slice. Normalize begin/end to\n        // clamp between 0 and length, and wrap around on negative indices, e.g.\n        // slice(-1, 5) or slice(5, -1)\n        return clampRange(this, begin, end, this._sliceInternal);\n    }\n\n    public isValid(index: number): boolean {\n        if (this.nullCount > 0) {\n            const idx = this.offset + index;\n            const val = this.nullBitmap[idx >> 3];\n            const mask = (val & (1 << (idx % 8)));\n            return mask !== 0;\n        }\n        return true;\n    }\n\n    public getChildAt<R extends DataType = any>(index: number): Vector<R> | null {\n        return index < 0 || index >= this.numChildren ? null : (\n            (this._children || (this._children = []))[index] ||\n            (this._children[index] = Vector.new<R>(this.data.childData[index] as Data<R>))\n        ) as Vector<R>;\n    }\n\n    public toJSON(): any { return [...this]; }\n\n    protected _sliceInternal(self: this, begin: number, end: number) {\n        return self.clone(self.data.slice(begin, end - begin), null!);\n    }\n\n    // @ts-ignore\n    protected _bindDataAccessors(data: Data<T>) {\n        // Implementation in src/vectors/index.ts due to circular dependency/packaging shenanigans\n    }\n}\n\n(BaseVector.prototype as any)[Symbol.isConcatSpreadable] = true;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { Binary, Utf8 } from '../type';\n\n/** @ignore */\nexport class BinaryVector extends BaseVector<Binary> {\n    public asUtf8() {\n        return Vector.new(this.data.clone(new Utf8()));\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Bool } from '../type';\nimport { Chunked } from './chunked';\nimport { BaseVector } from './base';\nimport { VectorBuilderOptions } from './index';\nimport { vectorFromValuesWithType } from './index';\nimport { VectorBuilderOptionsAsync } from './index';\n\n/** @ignore */\nexport class BoolVector extends BaseVector<Bool> {\n    public static from<TNull = any>(input: Iterable<boolean | TNull>): BoolVector;\n    public static from<TNull = any>(input: AsyncIterable<boolean | TNull>): Promise<BoolVector>;\n    public static from<TNull = any>(input: VectorBuilderOptions<Bool, TNull>): Chunked<Bool>;\n    public static from<TNull = any>(input: VectorBuilderOptionsAsync<Bool, TNull>): Promise<Chunked<Bool>>;\n    /** @nocollapse */\n    public static from<TNull = any>(input: Iterable<boolean | TNull> | AsyncIterable<boolean | TNull> | VectorBuilderOptions<Bool, TNull> | VectorBuilderOptionsAsync<Bool, TNull>) {\n        return vectorFromValuesWithType(() => new Bool(), input);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DateUnit } from '../enum';\nimport { Chunked } from './chunked';\nimport { BaseVector } from './base';\nimport { VectorType as V } from '../interfaces';\nimport { VectorBuilderOptions } from './index';\nimport { vectorFromValuesWithType } from './index';\nimport { VectorBuilderOptionsAsync } from './index';\nimport { Date_, DateDay, DateMillisecond  } from '../type';\n\n/** @ignore */\ntype FromArgs<T extends Date_> = [Iterable<Date>, T['unit']];\n\n/** @ignore */\nexport class DateVector<T extends Date_ = Date_> extends BaseVector<T> {\n    public static from<T extends DateUnit.DAY>(...args: FromArgs<DateDay>): V<DateDay>;\n    public static from<T extends DateUnit.MILLISECOND>(...args: FromArgs<DateMillisecond>): V<DateMillisecond>;\n    public static from<T extends Date_, TNull = any>(input: Iterable<Date | TNull>): V<T>;\n    public static from<T extends Date_, TNull = any>(input: AsyncIterable<Date | TNull>): Promise<V<T>>;\n    public static from<T extends Date_, TNull = any>(input: VectorBuilderOptions<T, TNull>): Chunked<T>;\n    public static from<T extends Date_, TNull = any>(input: VectorBuilderOptionsAsync<T, TNull>): Promise<Chunked<T>>;\n    /** @nocollapse */\n    public static from<T extends Date_, TNull = any>(...args: FromArgs<T> | [Iterable<Date | TNull> | AsyncIterable<Date | TNull> | VectorBuilderOptions<T, TNull> | VectorBuilderOptionsAsync<T, TNull>]) {\n        if (args.length === 2) {\n            return vectorFromValuesWithType(() => args[1] === DateUnit.DAY ? new DateDay() : new DateMillisecond() as T, args[0]);\n        }\n        return vectorFromValuesWithType(() => new DateMillisecond() as T, args[0]);\n    }\n}\n\n/** @ignore */\nexport class DateDayVector extends DateVector<DateDay> {}\n\n/** @ignore */\nexport class DateMillisecondVector extends DateVector<DateMillisecond> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Decimal } from '../type';\nimport { BaseVector } from './base';\n\n/** @ignore */\nexport class DecimalVector extends BaseVector<Decimal> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { VectorType as V } from '../interfaces';\nimport { VectorBuilderOptions } from './index';\nimport { vectorFromValuesWithType } from './index';\nimport { VectorBuilderOptionsAsync } from './index';\nimport { DataType, Dictionary, TKeys } from '../type';\n\n/** @ignore */\ntype FromArgs<T extends DataType = any, TKey extends TKeys = TKeys> = [Vector<T>, TKey, ArrayLike<number> | TKey['TArray']];\n\n/** @ignore */\nexport class DictionaryVector<T extends DataType = any, TKey extends TKeys = TKeys> extends BaseVector<Dictionary<T, TKey>> {\n    public static from<T extends DataType = any, TKey extends TKeys = TKeys>(...args: FromArgs<T, TKey>): V<Dictionary<T, TKey>>;\n    public static from<T extends DataType = any, TKey extends TKeys = TKeys>(input: VectorBuilderOptions<Dictionary<T, TKey>>): Vector<Dictionary<T, TKey>>;\n    public static from<T extends DataType = any, TKey extends TKeys = TKeys>(input: VectorBuilderOptionsAsync<Dictionary<T, TKey>>): Promise<Vector<Dictionary<T, TKey>>>;\n    /** @nocollapse */\n    public static from<T extends DataType = any, TKey extends TKeys = TKeys>(...args: any[]) {\n        if (args.length === 3) {\n            const [values, indices, keys] = args as FromArgs<T, TKey>;\n            const type = new Dictionary(values.type, indices, null, null);\n            return Vector.new(Data.Dictionary(type, 0, keys.length, 0, null, keys, values));\n        }\n        return vectorFromValuesWithType(() => args[0].type, args[0]);\n    }\n\n    constructor(data: Data<Dictionary<T, TKey>>) {\n        super(data);\n        this.indices = Vector.new(data.clone(this.type.indices));\n    }\n\n    public readonly indices: V<TKey>;\n\n    public get dictionary() { return <Vector<T>> this.data.dictionary; }\n    public reverseLookup(value: T) { return this.dictionary.indexOf(value); }\n    public getKey(idx: number): TKey['TValue'] | null { return this.indices.get(idx); }\n    public getValue(key: number): T['TValue'] | null { return this.dictionary.get(key); }\n    public setKey(idx: number, key: TKey['TValue'] | null) { return this.indices.set(idx, key); }\n    public setValue(key: number, value: T['TValue'] | null) { return this.dictionary.set(key, value); }\n}\n\n(DictionaryVector.prototype as any).indices = null;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { FixedSizeBinary } from '../type';\n\n/** @ignore */\nexport class FixedSizeBinaryVector extends BaseVector<FixedSizeBinary> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { DataType, FixedSizeList } from '../type';\n\n/** @ignore */\nexport class FixedSizeListVector<T extends DataType = any> extends BaseVector<FixedSizeList<T>> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { Chunked } from './chunked';\nimport { BaseVector } from './base';\nimport { VectorBuilderOptions } from './index';\nimport { vectorFromValuesWithType } from './index';\nimport { VectorBuilderOptionsAsync } from './index';\nimport { Float, Float16, Float32, Float64, FloatArray } from '../type';\nimport { VectorType as V, TypedArrayConstructor } from '../interfaces';\n\n/** @ignore */\ntype FloatVectorConstructors =\n    typeof FloatVector   |\n    typeof Float16Vector |\n    typeof Float32Vector |\n    typeof Float64Vector ;\n\n/** @ignore */\ntype FromInput<T extends Float, TNull = any> =\n    FloatArray                          |\n    Iterable<T['TValue'] | TNull>       |\n    AsyncIterable<T['TValue'] | TNull>  |\n    VectorBuilderOptions<T, TNull>      |\n    VectorBuilderOptionsAsync<T, TNull> ;\n\n/** @ignore */\ntype FloatArrayCtor = TypedArrayConstructor<FloatArray>;\n\n/** @ignore */\nexport class FloatVector<T extends Float = Float> extends BaseVector<T> {\n\n    // Guaranteed zero-copy variants\n    public static from(this: typeof FloatVector, input: Uint16Array): Float16Vector;\n    public static from(this: typeof FloatVector, input: Float32Array): Float32Vector;\n    public static from(this: typeof FloatVector, input: Float64Array): Float64Vector;\n\n    // Zero-copy if input is a TypedArray of the same type as the\n    // Vector that from is called on, otherwise uses the Builders\n    public static from<TNull = any>(this: typeof Float16Vector,  input: FromInput<Float16, TNull>): Float16Vector;\n    public static from<TNull = any>(this: typeof Float32Vector,  input: FromInput<Float32, TNull>): Float32Vector;\n    public static from<TNull = any>(this: typeof Float64Vector,  input: FromInput<Float64, TNull>): Float64Vector;\n\n    // Not zero-copy\n    public static from<T extends Float, TNull = any>(this: typeof FloatVector, input: Iterable<T['TValue'] | TNull>): V<T>;\n    public static from<T extends Float, TNull = any>(this: typeof FloatVector, input: AsyncIterable<T['TValue'] | TNull>): Promise<V<T>>;\n    public static from<T extends Float, TNull = any>(this: typeof FloatVector, input: VectorBuilderOptions<T, TNull>): Chunked<T>;\n    public static from<T extends Float, TNull = any>(this: typeof FloatVector, input: VectorBuilderOptionsAsync<T, TNull>): Promise<Chunked<T>>;\n    /** @nocollapse */\n    public static from<T extends Float, TNull = any>(this: FloatVectorConstructors, input: FromInput<T, TNull>) {\n\n        let ArrowType = vectorTypeToDataType(this);\n\n        if ((input instanceof ArrayBuffer) || ArrayBuffer.isView(input)) {\n            let InputType = arrayTypeToDataType(input.constructor as FloatArrayCtor) || ArrowType;\n            // Special case, infer the Arrow DataType from the input if calling the base\n            // FloatVector.from with a TypedArray, e.g. `FloatVector.from(new Float32Array())`\n            if (ArrowType === null) {\n                ArrowType = InputType;\n            }\n            // If the DataType inferred from the Vector constructor matches the\n            // DataType inferred from the input arguments, return zero-copy view\n            if (ArrowType && ArrowType === InputType) {\n                let type = new ArrowType();\n                let length = input.byteLength / type.ArrayType.BYTES_PER_ELEMENT;\n                // If the ArrowType is Float16 but the input type isn't a Uint16Array,\n                // let the Float16Builder handle casting the input values to Uint16s.\n                if (!convertTo16Bit(ArrowType, input.constructor)) {\n                    return Vector.new(Data.Float(type, 0, length, 0, null, input as FloatArray));\n                }\n            }\n        }\n\n        if (ArrowType) {\n            // If the DataType inferred from the Vector constructor is different than\n            // the DataType inferred from the input TypedArray, or if input isn't a\n            // TypedArray, use the Builders to construct the result Vector\n            return vectorFromValuesWithType(() => new ArrowType!() as T, input);\n        }\n\n        if ((input instanceof DataView) || (input instanceof ArrayBuffer)) {\n            throw new TypeError(`Cannot infer float type from instance of ${input.constructor.name}`);\n        }\n\n        throw new TypeError('Unrecognized FloatVector input');\n    }\n}\n\n/** @ignore */\nexport class Float16Vector extends FloatVector<Float16> {\n    // Since JS doesn't have half floats, `toArray()` returns a zero-copy slice\n    // of the underlying Uint16Array data. This behavior ensures we don't incur\n    // extra compute or copies if you're calling `toArray()` in order to create\n    // a buffer for something like WebGL. Buf if you're using JS and want typed\n    // arrays of 4-to-8-byte precision, these methods will enumerate the values\n    // and clamp to the desired byte lengths.\n    public toFloat32Array() { return new Float32Array(this as Iterable<number>); }\n    public toFloat64Array() { return new Float64Array(this as Iterable<number>); }\n}\n\n/** @ignore */\nexport class Float32Vector extends FloatVector<Float32> {}\n/** @ignore */\nexport class Float64Vector extends FloatVector<Float64> {}\n\nconst convertTo16Bit = (typeCtor: any, dataCtor: any) => {\n    return (typeCtor === Float16) && (dataCtor !== Uint16Array);\n};\n\n/** @ignore */\nconst arrayTypeToDataType = (ctor: FloatArrayCtor) => {\n    switch (ctor) {\n        case Uint16Array:    return Float16;\n        case Float32Array:   return Float32;\n        case Float64Array:   return Float64;\n        default: return null;\n    }\n};\n\n/** @ignore */\nconst vectorTypeToDataType = (ctor: FloatVectorConstructors) => {\n    switch (ctor) {\n        case Float16Vector: return Float16;\n        case Float32Vector: return Float32;\n        case Float64Vector: return Float64;\n        default: return null;\n    }\n};\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { Interval, IntervalDayTime, IntervalYearMonth } from '../type';\n\n/** @ignore */\nexport class IntervalVector<T extends Interval = Interval> extends BaseVector<T> {}\n/** @ignore */\nexport class IntervalDayTimeVector extends IntervalVector<IntervalDayTime> {}\n/** @ignore */\nexport class IntervalYearMonthVector extends IntervalVector<IntervalYearMonth> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { Chunked } from './chunked';\nimport { BaseVector } from './base';\nimport { VectorBuilderOptions } from './index';\nimport { vectorFromValuesWithType } from './index';\nimport { VectorBuilderOptionsAsync } from './index';\nimport { BigInt64Array, BigUint64Array } from '../util/compat';\nimport { toBigInt64Array, toBigUint64Array } from '../util/buffer';\nimport { Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64, IntArray } from '../type';\nimport { VectorType as V, TypedArrayConstructor, BigIntArrayConstructor, BigIntArray } from '../interfaces';\n\n/** @ignore */\ntype IntVectorConstructors =\n    typeof IntVector    |\n    typeof Int8Vector   |\n    typeof Int16Vector  |\n    typeof Int32Vector  |\n    typeof Uint8Vector  |\n    typeof Uint16Vector |\n    typeof Uint32Vector |\n    typeof Int64Vector  |\n    typeof Uint64Vector ;\n\n/** @ignore */\ntype FromInput<T extends Int, TNull = any> =\n    IntArray | BigIntArray              |\n    Iterable<T['TValue'] | TNull>       |\n    AsyncIterable<T['TValue'] | TNull>  |\n    VectorBuilderOptions<T, TNull>      |\n    VectorBuilderOptionsAsync<T, TNull> ;\n\n/** @ignore */\ntype FromArgs<T extends Int, TNull = any> = [FromInput<T, TNull>, boolean?];\n\n/** @ignore */\ntype IntArrayCtor = TypedArrayConstructor<IntArray> | BigIntArrayConstructor<BigIntArray>;\n\n/** @ignore */\nexport class IntVector<T extends Int = Int> extends BaseVector<T> {\n\n    // Guaranteed zero-copy variants\n    public static from(this: typeof IntVector, input: Int8Array): Int8Vector;\n    public static from(this: typeof IntVector, input: Int16Array): Int16Vector;\n    public static from(this: typeof IntVector, input: Int32Array): Int32Vector;\n    public static from(this: typeof IntVector, input: BigInt64Array): Int64Vector;\n    public static from(this: typeof IntVector, input: Int32Array, is64bit: true): Int64Vector;\n    public static from(this: typeof IntVector, input: Uint8Array): Uint8Vector;\n    public static from(this: typeof IntVector, input: Uint16Array): Uint16Vector;\n    public static from(this: typeof IntVector, input: Uint32Array): Uint32Vector;\n    public static from(this: typeof IntVector, input: BigUint64Array): Uint64Vector;\n    public static from(this: typeof IntVector, input: Uint32Array, is64bit: true): Uint64Vector;\n\n    // Zero-copy if input is a TypedArray of the same type as the\n    // Vector that from is called on, otherwise uses the Builders\n    public static from<TNull = any>(this: typeof Int8Vector,   input: FromInput<Int8, TNull>): Int8Vector;\n    public static from<TNull = any>(this: typeof Int16Vector,  input: FromInput<Int16, TNull>): Int16Vector;\n    public static from<TNull = any>(this: typeof Int32Vector,  input: FromInput<Int32, TNull>): Int32Vector;\n    public static from<TNull = any>(this: typeof Int64Vector,  input: FromInput<Int64, TNull>): Int64Vector;\n    public static from<TNull = any>(this: typeof Uint8Vector,  input: FromInput<Uint8, TNull>): Uint8Vector;\n    public static from<TNull = any>(this: typeof Uint16Vector, input: FromInput<Uint16, TNull>): Uint16Vector;\n    public static from<TNull = any>(this: typeof Uint32Vector, input: FromInput<Uint32, TNull>): Uint32Vector;\n    public static from<TNull = any>(this: typeof Uint64Vector, input: FromInput<Uint64, TNull>): Uint64Vector;\n\n    // Not zero-copy\n    public static from<T extends Int, TNull = any>(this: typeof IntVector, input: Iterable<T['TValue'] | TNull>): V<T>;\n    public static from<T extends Int, TNull = any>(this: typeof IntVector, input: AsyncIterable<T['TValue'] | TNull>): Promise<V<T>>;\n    public static from<T extends Int, TNull = any>(this: typeof IntVector, input: VectorBuilderOptions<T, TNull>): Chunked<T>;\n    public static from<T extends Int, TNull = any>(this: typeof IntVector, input: VectorBuilderOptionsAsync<T, TNull>): Promise<Chunked<T>>;\n    /** @nocollapse */\n    public static from<T extends Int, TNull = any>(this: IntVectorConstructors, ...args: FromArgs<T, TNull>) {\n\n        let [input, is64bit = false] = args;\n        let ArrowType = vectorTypeToDataType(this, is64bit);\n\n        if ((input instanceof ArrayBuffer) || ArrayBuffer.isView(input)) {\n            let InputType = arrayTypeToDataType(input.constructor as IntArrayCtor, is64bit) || ArrowType;\n            // Special case, infer the Arrow DataType from the input if calling the base\n            // IntVector.from with a TypedArray, e.g. `IntVector.from(new Int32Array())`\n            if (ArrowType === null) {\n                ArrowType = InputType;\n            }\n            // If the DataType inferred from the Vector constructor matches the\n            // DataType inferred from the input arguments, return zero-copy view\n            if (ArrowType && ArrowType === InputType) {\n                let type = new ArrowType();\n                let length = input.byteLength / type.ArrayType.BYTES_PER_ELEMENT;\n                // If the ArrowType is 64bit but the input type is 32bit pairs, update the logical length\n                if (convert32To64Bit(ArrowType, input.constructor)) {\n                    length *= 0.5;\n                }\n                return Vector.new(Data.Int(type, 0, length, 0, null, input as IntArray));\n            }\n        }\n\n        if (ArrowType) {\n            // If the DataType inferred from the Vector constructor is different than\n            // the DataType inferred from the input TypedArray, or if input isn't a\n            // TypedArray, use the Builders to construct the result Vector\n            return vectorFromValuesWithType(() => new ArrowType!() as T, input);\n        }\n\n        if ((input instanceof DataView) || (input instanceof ArrayBuffer)) {\n            throw new TypeError(`Cannot infer integer type from instance of ${input.constructor.name}`);\n        }\n\n        throw new TypeError('Unrecognized IntVector input');\n    }\n}\n\n/** @ignore */\nexport class Int8Vector extends IntVector<Int8> {}\n/** @ignore */\nexport class Int16Vector extends IntVector<Int16> {}\n/** @ignore */\nexport class Int32Vector extends IntVector<Int32> {}\n/** @ignore */\nexport class Int64Vector extends IntVector<Int64> {\n    public toBigInt64Array() {\n        return toBigInt64Array(this.values);\n    }\n    // @ts-ignore\n    private _values64: BigInt64Array;\n    public get values64(): BigInt64Array {\n        return this._values64 || (this._values64 = this.toBigInt64Array());\n    }\n}\n\n/** @ignore */\nexport class Uint8Vector extends IntVector<Uint8> {}\n/** @ignore */\nexport class Uint16Vector extends IntVector<Uint16> {}\n/** @ignore */\nexport class Uint32Vector extends IntVector<Uint32> {}\n/** @ignore */\nexport class Uint64Vector extends IntVector<Uint64> {\n    public toBigUint64Array() {\n        return toBigUint64Array(this.values);\n    }\n    // @ts-ignore\n    private _values64: BigUint64Array;\n    public get values64(): BigUint64Array {\n        return this._values64 || (this._values64 = this.toBigUint64Array());\n    }\n}\n\nconst convert32To64Bit = (typeCtor: any, dataCtor: any) => {\n    return (typeCtor === Int64 || typeCtor === Uint64) &&\n           (dataCtor === Int32Array || dataCtor === Uint32Array);\n};\n\n/** @ignore */\nconst arrayTypeToDataType = (ctor: IntArrayCtor, is64bit: boolean) => {\n    switch (ctor) {\n        case Int8Array:      return Int8;\n        case Int16Array:     return Int16;\n        case Int32Array:     return is64bit ? Int64 : Int32;\n        case BigInt64Array:  return Int64;\n        case Uint8Array:     return Uint8;\n        case Uint16Array:    return Uint16;\n        case Uint32Array:    return is64bit ? Uint64 : Uint32;\n        case BigUint64Array: return Uint64;\n        default: return null;\n    }\n};\n\n/** @ignore */\nconst vectorTypeToDataType = (ctor: IntVectorConstructors, is64bit: boolean) => {\n    switch (ctor) {\n        case Int8Vector:   return Int8;\n        case Int16Vector:  return Int16;\n        case Int32Vector:  return is64bit ? Int64 : Int32;\n        case Int64Vector:  return Int64;\n        case Uint8Vector:  return Uint8;\n        case Uint16Vector: return Uint16;\n        case Uint32Vector: return is64bit ? Uint64 : Uint32;\n        case Uint64Vector: return Uint64;\n        default: return null;\n    }\n};\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { DataType, List } from '../type';\n\n/** @ignore */\nexport class ListVector<T extends DataType = any> extends BaseVector<List<T>> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { MapRow } from './row';\nimport { Field } from '../schema';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { DataType, Map_, Struct, List } from '../type';\n\n/** @ignore */\nexport class MapVector<K extends DataType = any, V extends DataType = any> extends BaseVector<Map_<K, V>> {\n    public asList() {\n        const child = this.type.children[0] as Field<Struct<{ key: K, value: V }>>;\n        return Vector.new(this.data.clone(new List<Struct<{ key: K, value: V }>>(child)));\n    }\n    public bind(index: number): Map_<K, V>['TValue'] {\n        const child = this.getChildAt<Struct<{ key: K, value: V }>>(0);\n        const { [index]: begin, [index + 1]: end } = this.valueOffsets;\n        return new MapRow(child!.slice(begin, end));\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Null } from '../type';\nimport { BaseVector } from './base';\n\n/** @ignore */\nexport class NullVector extends BaseVector<Null> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { StructRow } from './row';\nimport { BaseVector } from './base';\nimport { DataType, Struct } from '../type';\n\n/** @ignore */ const kRowIndex = Symbol.for('rowIndex');\n/** @ignore */\nexport class StructVector<T extends { [key: string]: DataType } = any> extends BaseVector<Struct<T>> {\n    // @ts-ignore\n    private _row: StructRow<T>;\n    public bind(index: number): Struct<T>['TValue'] {\n        const proto = this._row || (this._row = new StructRow<T>(this));\n        const bound = Object.create(proto);\n        bound[kRowIndex] = index;\n        return bound;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond } from '../type';\n\n/** @ignore */\nexport class TimestampVector<T extends Timestamp = Timestamp> extends BaseVector<T> {}\n/** @ignore */\nexport class TimestampSecondVector extends TimestampVector<TimestampSecond> {}\n/** @ignore */\nexport class TimestampMillisecondVector extends TimestampVector<TimestampMillisecond> {}\n/** @ignore */\nexport class TimestampMicrosecondVector extends TimestampVector<TimestampMicrosecond> {}\n/** @ignore */\nexport class TimestampNanosecondVector extends TimestampVector<TimestampNanosecond> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond } from '../type';\n\n/** @ignore */\nexport class TimeVector<T extends Time = Time> extends BaseVector<T> {}\n/** @ignore */\nexport class TimeSecondVector extends TimeVector<TimeSecond> {}\n/** @ignore */\nexport class TimeMillisecondVector extends TimeVector<TimeMillisecond> {}\n/** @ignore */\nexport class TimeMicrosecondVector extends TimeVector<TimeMicrosecond> {}\n/** @ignore */\nexport class TimeNanosecondVector extends TimeVector<TimeNanosecond> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { Union, DenseUnion, SparseUnion} from '../type';\n\n/** @ignore */\nexport class UnionVector<T extends Union = Union> extends BaseVector<T> {\n    public get typeIdToChildIndex() { return this.data.type.typeIdToChildIndex; }\n}\n\n/** @ignore */\nexport class DenseUnionVector extends UnionVector<DenseUnion> {\n    public get valueOffsets() { return this.data.valueOffsets!; }\n}\n\n/** @ignore */\nexport class SparseUnionVector extends UnionVector<SparseUnion> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { Chunked } from './chunked';\nimport { BaseVector } from './base';\nimport { Binary, Utf8 } from '../type';\nimport { VectorBuilderOptions } from './index';\nimport { vectorFromValuesWithType } from './index';\nimport { VectorBuilderOptionsAsync } from './index';\n\n/** @ignore */\nexport class Utf8Vector extends BaseVector<Utf8> {\n    public static from<TNull = any>(input: Iterable<string | TNull>): Utf8Vector;\n    public static from<TNull = any>(input: AsyncIterable<string | TNull>): Promise<Utf8Vector>;\n    public static from<TNull = any>(input: VectorBuilderOptions<Utf8, TNull>): Chunked<Utf8>;\n    public static from<TNull = any>(input: VectorBuilderOptionsAsync<Utf8, TNull>): Promise<Chunked<Utf8>>;\n    /** @nocollapse */\n    public static from<TNull = any>(input: Iterable<string | TNull> | AsyncIterable<string | TNull> | VectorBuilderOptions<Utf8, TNull> | VectorBuilderOptionsAsync<Utf8, TNull>) {\n        return vectorFromValuesWithType(() => new Utf8(), input);\n    }\n    public asBinary() {\n        return Vector.new(this.data.clone(new Binary()));\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/** @ignore */\nexport function partial0<T>(visit: (node: T) => any) {\n    return function(this: T) { return visit(this); };\n}\n\n/** @ignore */\nexport function partial1<T>(visit: (node: T, a: any) => any) {\n    return function(this: T, a: any) { return visit(this, a); };\n}\n\n/** @ignore */\nexport function partial2<T>(visit: (node: T, a: any, b: any) => any) {\n    return function(this: T, a: any, b: any) { return visit(this, a, b); };\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { BN } from '../util/bn';\nimport { Visitor } from '../visitor';\nimport { decodeUtf8 } from '../util/utf8';\nimport { VectorType } from '../interfaces';\nimport { uint16ToFloat64 } from '../util/math';\nimport { Type, UnionMode, Precision, DateUnit, TimeUnit, IntervalUnit } from '../enum';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\n/** @ignore */\nexport interface GetVisitor extends Visitor {\n    visit<T extends VectorType>  (node: T, index: number): T['TValue'];\n    visitMany<T extends VectorType>  (nodes: T[], indices: number[]): T['TValue'][];\n    getVisitFn<T extends Type>    (node: T): (vector: VectorType<T>, index: number) => VectorType<T>['TValue'];\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): (vector: VectorType<T>, index: number) => VectorType<T>['TValue'];\n    visitNull                 <T extends Null>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitBool                 <T extends Bool>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitInt                  <T extends Int>                  (vector: VectorType<T>, index: number): T['TValue'];\n    visitInt8                 <T extends Int8>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitInt16                <T extends Int16>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitInt32                <T extends Int32>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitInt64                <T extends Int64>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitUint8                <T extends Uint8>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitUint16               <T extends Uint16>               (vector: VectorType<T>, index: number): T['TValue'];\n    visitUint32               <T extends Uint32>               (vector: VectorType<T>, index: number): T['TValue'];\n    visitUint64               <T extends Uint64>               (vector: VectorType<T>, index: number): T['TValue'];\n    visitFloat                <T extends Float>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitFloat16              <T extends Float16>              (vector: VectorType<T>, index: number): T['TValue'];\n    visitFloat32              <T extends Float32>              (vector: VectorType<T>, index: number): T['TValue'];\n    visitFloat64              <T extends Float64>              (vector: VectorType<T>, index: number): T['TValue'];\n    visitUtf8                 <T extends Utf8>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitBinary               <T extends Binary>               (vector: VectorType<T>, index: number): T['TValue'];\n    visitFixedSizeBinary      <T extends FixedSizeBinary>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitDate                 <T extends Date_>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitDateDay              <T extends DateDay>              (vector: VectorType<T>, index: number): T['TValue'];\n    visitDateMillisecond      <T extends DateMillisecond>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimestamp            <T extends Timestamp>            (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimestampSecond      <T extends TimestampSecond>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimestampMillisecond <T extends TimestampMillisecond> (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimestampMicrosecond <T extends TimestampMicrosecond> (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimestampNanosecond  <T extends TimestampNanosecond>  (vector: VectorType<T>, index: number): T['TValue'];\n    visitTime                 <T extends Time>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimeSecond           <T extends TimeSecond>           (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimeMillisecond      <T extends TimeMillisecond>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimeMicrosecond      <T extends TimeMicrosecond>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimeNanosecond       <T extends TimeNanosecond>       (vector: VectorType<T>, index: number): T['TValue'];\n    visitDecimal              <T extends Decimal>              (vector: VectorType<T>, index: number): T['TValue'];\n    visitList                 <T extends List>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitStruct               <T extends Struct>               (vector: VectorType<T>, index: number): T['TValue'];\n    visitUnion                <T extends Union>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitDenseUnion           <T extends DenseUnion>           (vector: VectorType<T>, index: number): T['TValue'];\n    visitSparseUnion          <T extends SparseUnion>          (vector: VectorType<T>, index: number): T['TValue'];\n    visitDictionary           <T extends Dictionary>           (vector: VectorType<T>, index: number): T['TValue'];\n    visitInterval             <T extends Interval>             (vector: VectorType<T>, index: number): T['TValue'];\n    visitIntervalDayTime      <T extends IntervalDayTime>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitIntervalYearMonth    <T extends IntervalYearMonth>    (vector: VectorType<T>, index: number): T['TValue'];\n    visitFixedSizeList        <T extends FixedSizeList>        (vector: VectorType<T>, index: number): T['TValue'];\n    visitMap                  <T extends Map_>                 (vector: VectorType<T>, index: number): T['TValue'];\n}\n\n/** @ignore */\nexport class GetVisitor extends Visitor {}\n\n/** @ignore */const epochDaysToMs = (data: Int32Array, index: number) => 86400000 * data[index];\n/** @ignore */const epochMillisecondsLongToMs = (data: Int32Array, index: number) => 4294967296 * (data[index + 1]) + (data[index] >>> 0);\n/** @ignore */const epochMicrosecondsLongToMs = (data: Int32Array, index: number) => 4294967296 * (data[index + 1] / 1000) + ((data[index] >>> 0) / 1000);\n/** @ignore */const epochNanosecondsLongToMs = (data: Int32Array, index: number) => 4294967296 * (data[index + 1] / 1000000) + ((data[index] >>> 0) / 1000000);\n\n/** @ignore */const epochMillisecondsToDate = (epochMs: number) => new Date(epochMs);\n/** @ignore */const epochDaysToDate = (data: Int32Array, index: number) => epochMillisecondsToDate(epochDaysToMs(data, index));\n/** @ignore */const epochMillisecondsLongToDate = (data: Int32Array, index: number) => epochMillisecondsToDate(epochMillisecondsLongToMs(data, index));\n\n/** @ignore */\nconst getNull = <T extends Null>(_vector: VectorType<T>, _index: number): T['TValue'] => null;\n/** @ignore */\nconst getVariableWidthBytes = (values: Uint8Array, valueOffsets: Int32Array, index: number) => {\n    const { [index]: x, [index + 1]: y } = valueOffsets;\n    return x != null && y != null ? values.subarray(x, y) : null as any;\n};\n\n/** @ignore */\nconst getBool = <T extends Bool>({ offset, values }: VectorType<T>, index: number): T['TValue'] => {\n    const idx = offset + index;\n    const byte = values[idx >> 3];\n    return (byte & 1 << (idx % 8)) !== 0;\n};\n\n/** @ignore */\ntype Numeric1X = Int8 | Int16 | Int32 | Uint8 | Uint16 | Uint32 | Float32 | Float64;\n/** @ignore */\ntype Numeric2X = Int64 | Uint64;\n\n/** @ignore */\nconst getDateDay         = <T extends DateDay>        ({ values         }: VectorType<T>, index: number): T['TValue'] => epochDaysToDate(values, index);\n/** @ignore */\nconst getDateMillisecond = <T extends DateMillisecond>({ values         }: VectorType<T>, index: number): T['TValue'] => epochMillisecondsLongToDate(values, index * 2);\n/** @ignore */\nconst getNumeric         = <T extends Numeric1X>      ({ stride, values }: VectorType<T>, index: number): T['TValue'] => values[stride * index];\n/** @ignore */\nconst getFloat16         = <T extends Float16>        ({ stride, values }: VectorType<T>, index: number): T['TValue'] => uint16ToFloat64(values[stride * index]);\n/** @ignore */\nconst getBigInts         = <T extends Numeric2X>({ stride, values, type }: VectorType<T>, index: number): T['TValue'] => <any> BN.new(values.subarray(stride * index, stride * (index + 1)), type.isSigned);\n/** @ignore */\nconst getFixedSizeBinary = <T extends FixedSizeBinary>({ stride, values }: VectorType<T>, index: number): T['TValue'] => values.subarray(stride * index, stride * (index + 1));\n\n/** @ignore */\nconst getBinary = <T extends Binary>({ values, valueOffsets }: VectorType<T>, index: number): T['TValue'] => getVariableWidthBytes(values, valueOffsets, index);\n/** @ignore */\nconst getUtf8 = <T extends Utf8>({ values, valueOffsets }: VectorType<T>, index: number): T['TValue'] => {\n    const bytes = getVariableWidthBytes(values, valueOffsets, index);\n    return bytes !== null ? decodeUtf8(bytes) : null as any;\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst getInt = <T extends Int>(vector: VectorType<T>, index: number): T['TValue'] => (\n    vector.type.bitWidth < 64\n        ? getNumeric(vector as VectorType<Numeric1X>, index)\n        : getBigInts(vector as VectorType<Numeric2X>, index)\n);\n\n/* istanbul ignore next */\n/** @ignore */\nconst getFloat = <T extends Float> (vector: VectorType<T>, index: number): T['TValue'] => (\n    vector.type.precision !== Precision.HALF\n        ? getNumeric(vector as VectorType<Numeric1X>, index)\n        : getFloat16(vector as VectorType<Float16>, index)\n);\n\n/* istanbul ignore next */\n/** @ignore */\nconst getDate = <T extends Date_> (vector: VectorType<T>, index: number): T['TValue'] => (\n    vector.type.unit === DateUnit.DAY\n        ? getDateDay(vector as VectorType<DateDay>, index)\n        : getDateMillisecond(vector as VectorType<DateMillisecond>, index)\n);\n\n/** @ignore */\nconst getTimestampSecond      = <T extends TimestampSecond>     ({ values }: VectorType<T>, index: number): T['TValue'] => 1000 * epochMillisecondsLongToMs(values, index * 2);\n/** @ignore */\nconst getTimestampMillisecond = <T extends TimestampMillisecond>({ values }: VectorType<T>, index: number): T['TValue'] => epochMillisecondsLongToMs(values, index * 2);\n/** @ignore */\nconst getTimestampMicrosecond = <T extends TimestampMicrosecond>({ values }: VectorType<T>, index: number): T['TValue'] => epochMicrosecondsLongToMs(values, index * 2);\n/** @ignore */\nconst getTimestampNanosecond  = <T extends TimestampNanosecond> ({ values }: VectorType<T>, index: number): T['TValue'] => epochNanosecondsLongToMs(values, index * 2);\n/* istanbul ignore next */\n/** @ignore */\nconst getTimestamp            = <T extends Timestamp>(vector: VectorType<T>, index: number): T['TValue'] => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      getTimestampSecond(vector as VectorType<TimestampSecond>, index);\n        case TimeUnit.MILLISECOND: return getTimestampMillisecond(vector as VectorType<TimestampMillisecond>, index);\n        case TimeUnit.MICROSECOND: return getTimestampMicrosecond(vector as VectorType<TimestampMicrosecond>, index);\n        case TimeUnit.NANOSECOND:  return  getTimestampNanosecond(vector as VectorType<TimestampNanosecond>, index);\n    }\n};\n\n/** @ignore */\nconst getTimeSecond      = <T extends TimeSecond>     ({ values, stride }: VectorType<T>, index: number): T['TValue'] => values[stride * index];\n/** @ignore */\nconst getTimeMillisecond = <T extends TimeMillisecond>({ values, stride }: VectorType<T>, index: number): T['TValue'] => values[stride * index];\n/** @ignore */\nconst getTimeMicrosecond = <T extends TimeMicrosecond>({ values         }: VectorType<T>, index: number): T['TValue'] => BN.signed(values.subarray(2 * index, 2 * (index + 1)));\n/** @ignore */\nconst getTimeNanosecond  = <T extends TimeNanosecond> ({ values         }: VectorType<T>, index: number): T['TValue'] => BN.signed(values.subarray(2 * index, 2 * (index + 1)));\n/* istanbul ignore next */\n/** @ignore */\nconst getTime            = <T extends Time>(vector: VectorType<T>, index: number): T['TValue'] => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      getTimeSecond(vector as VectorType<TimeSecond>, index);\n        case TimeUnit.MILLISECOND: return getTimeMillisecond(vector as VectorType<TimeMillisecond>, index);\n        case TimeUnit.MICROSECOND: return getTimeMicrosecond(vector as VectorType<TimeMicrosecond>, index);\n        case TimeUnit.NANOSECOND:  return  getTimeNanosecond(vector as VectorType<TimeNanosecond>, index);\n    }\n};\n\n/** @ignore */\nconst getDecimal = <T extends Decimal>({ values }: VectorType<T>, index: number): T['TValue'] => BN.decimal(values.subarray(4 * index, 4 * (index + 1)));\n\n/** @ignore */\nconst getList = <T extends List>(vector: VectorType<T>, index: number): T['TValue'] => {\n    const child = vector.getChildAt(0)!, { valueOffsets, stride } = vector;\n    return child.slice(valueOffsets[index * stride], valueOffsets[(index * stride) + 1]) as T['TValue'];\n};\n\n/** @ignore */\nconst getMap = <T extends Map_>(vector: VectorType<T>, index: number): T['TValue'] => {\n    return vector.bind(index) as T['TValue'];\n};\n\n/** @ignore */\nconst getStruct = <T extends Struct>(vector: VectorType<T>, index: number): T['TValue'] => {\n    return vector.bind(index) as T['TValue'];\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst getUnion = <\n    V extends VectorType<Union> | VectorType<DenseUnion> | VectorType<SparseUnion>\n>(vector: V, index: number): V['TValue'] => {\n    return vector.type.mode === UnionMode.Dense ?\n        getDenseUnion(vector as VectorType<DenseUnion>, index) :\n        getSparseUnion(vector as VectorType<SparseUnion>, index);\n};\n\n/** @ignore */\nconst getDenseUnion = <T extends DenseUnion>(vector: VectorType<T>, index: number): T['TValue'] => {\n    const childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];\n    const child = vector.getChildAt(childIndex);\n    return child ? child.get(vector.valueOffsets[index]) : null;\n};\n\n/** @ignore */\nconst getSparseUnion = <T extends SparseUnion>(vector: VectorType<T>, index: number): T['TValue'] => {\n    const childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];\n    const child = vector.getChildAt(childIndex);\n    return child ? child.get(index) : null;\n};\n\n/** @ignore */\nconst getDictionary = <T extends Dictionary>(vector: VectorType<T>, index: number): T['TValue'] => {\n    return vector.getValue(vector.getKey(index)!);\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst getInterval = <T extends Interval>(vector: VectorType<T>, index: number): T['TValue'] =>\n    (vector.type.unit === IntervalUnit.DAY_TIME)\n        ? getIntervalDayTime(vector as VectorType<IntervalDayTime>, index)\n        : getIntervalYearMonth(vector as VectorType<IntervalYearMonth>, index);\n\n/** @ignore */\nconst getIntervalDayTime = <T extends IntervalDayTime>({ values }: VectorType<T>, index: number): T['TValue'] => values.subarray(2 * index, 2 * (index + 1));\n\n/** @ignore */\nconst getIntervalYearMonth = <T extends IntervalYearMonth>({ values }: VectorType<T>, index: number): T['TValue'] => {\n    const interval = values[index];\n    const int32s = new Int32Array(2);\n    int32s[0] = interval / 12 | 0; /* years */\n    int32s[1] = interval % 12 | 0; /* months */\n    return int32s;\n};\n\n/** @ignore */\nconst getFixedSizeList = <T extends FixedSizeList>(vector: VectorType<T>, index: number): T['TValue'] => {\n    const child = vector.getChildAt(0)!, { stride } = vector;\n    return child.slice(index * stride, (index + 1) * stride) as T['TValue'];\n};\n\nGetVisitor.prototype.visitNull                 =                 getNull;\nGetVisitor.prototype.visitBool                 =                 getBool;\nGetVisitor.prototype.visitInt                  =                  getInt;\nGetVisitor.prototype.visitInt8                 =              getNumeric;\nGetVisitor.prototype.visitInt16                =              getNumeric;\nGetVisitor.prototype.visitInt32                =              getNumeric;\nGetVisitor.prototype.visitInt64                =              getBigInts;\nGetVisitor.prototype.visitUint8                =              getNumeric;\nGetVisitor.prototype.visitUint16               =              getNumeric;\nGetVisitor.prototype.visitUint32               =              getNumeric;\nGetVisitor.prototype.visitUint64               =              getBigInts;\nGetVisitor.prototype.visitFloat                =                getFloat;\nGetVisitor.prototype.visitFloat16              =              getFloat16;\nGetVisitor.prototype.visitFloat32              =              getNumeric;\nGetVisitor.prototype.visitFloat64              =              getNumeric;\nGetVisitor.prototype.visitUtf8                 =                 getUtf8;\nGetVisitor.prototype.visitBinary               =               getBinary;\nGetVisitor.prototype.visitFixedSizeBinary      =      getFixedSizeBinary;\nGetVisitor.prototype.visitDate                 =                 getDate;\nGetVisitor.prototype.visitDateDay              =              getDateDay;\nGetVisitor.prototype.visitDateMillisecond      =      getDateMillisecond;\nGetVisitor.prototype.visitTimestamp            =            getTimestamp;\nGetVisitor.prototype.visitTimestampSecond      =      getTimestampSecond;\nGetVisitor.prototype.visitTimestampMillisecond = getTimestampMillisecond;\nGetVisitor.prototype.visitTimestampMicrosecond = getTimestampMicrosecond;\nGetVisitor.prototype.visitTimestampNanosecond  =  getTimestampNanosecond;\nGetVisitor.prototype.visitTime                 =                 getTime;\nGetVisitor.prototype.visitTimeSecond           =           getTimeSecond;\nGetVisitor.prototype.visitTimeMillisecond      =      getTimeMillisecond;\nGetVisitor.prototype.visitTimeMicrosecond      =      getTimeMicrosecond;\nGetVisitor.prototype.visitTimeNanosecond       =       getTimeNanosecond;\nGetVisitor.prototype.visitDecimal              =              getDecimal;\nGetVisitor.prototype.visitList                 =                 getList;\nGetVisitor.prototype.visitStruct               =               getStruct;\nGetVisitor.prototype.visitUnion                =                getUnion;\nGetVisitor.prototype.visitDenseUnion           =           getDenseUnion;\nGetVisitor.prototype.visitSparseUnion          =          getSparseUnion;\nGetVisitor.prototype.visitDictionary           =           getDictionary;\nGetVisitor.prototype.visitInterval             =             getInterval;\nGetVisitor.prototype.visitIntervalDayTime      =      getIntervalDayTime;\nGetVisitor.prototype.visitIntervalYearMonth    =    getIntervalYearMonth;\nGetVisitor.prototype.visitFixedSizeList        =        getFixedSizeList;\nGetVisitor.prototype.visitMap                  =                  getMap;\n\n/** @ignore */\nexport const instance = new GetVisitor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { Visitor } from '../visitor';\nimport { VectorType } from '../interfaces';\nimport { getBool, iterateBits } from '../util/bit';\nimport { createElementComparator } from '../util/vector';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\n/** @ignore */\nexport interface IndexOfVisitor extends Visitor {\n    visit<T extends VectorType>  (node: T, value: T['TValue'] | null, index?: number): number;\n    visitMany <T extends VectorType>  (nodes: T[], values: (T['TValue'] | null)[], indices: (number | undefined)[]): number[];\n    getVisitFn<T extends Type>    (node: T): (vector: VectorType<T>, value: VectorType<T>['TValue'] | null, index?: number) => number;\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): (vector: VectorType<T>, value:         T['TValue'] | null, index?: number) => number;\n    visitNull                 <T extends Null>                (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitBool                 <T extends Bool>                (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt                  <T extends Int>                 (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt8                 <T extends Int8>                (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt16                <T extends Int16>               (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt32                <T extends Int32>               (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt64                <T extends Int64>               (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitUint8                <T extends Uint8>               (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitUint16               <T extends Uint16>              (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitUint32               <T extends Uint32>              (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitUint64               <T extends Uint64>              (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitFloat                <T extends Float>               (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitFloat16              <T extends Float16>             (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitFloat32              <T extends Float32>             (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitFloat64              <T extends Float64>             (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitUtf8                 <T extends Utf8>                (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitBinary               <T extends Binary>              (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitFixedSizeBinary      <T extends FixedSizeBinary>     (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitDate                 <T extends Date_>               (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitDateDay              <T extends DateDay>             (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitDateMillisecond      <T extends DateMillisecond>     (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestamp            <T extends Timestamp>           (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestampSecond      <T extends TimestampSecond>     (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestampMillisecond <T extends TimestampMillisecond>(vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestampMicrosecond <T extends TimestampMicrosecond>(vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestampNanosecond  <T extends TimestampNanosecond> (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTime                 <T extends Time>                (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimeSecond           <T extends TimeSecond>          (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimeMillisecond      <T extends TimeMillisecond>     (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimeMicrosecond      <T extends TimeMicrosecond>     (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimeNanosecond       <T extends TimeNanosecond>      (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitDecimal              <T extends Decimal>             (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitList                 <T extends List>                (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitStruct               <T extends Struct>              (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitUnion                <T extends Union>               (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitDenseUnion           <T extends DenseUnion>          (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitSparseUnion          <T extends SparseUnion>         (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitDictionary           <T extends Dictionary>          (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitInterval             <T extends Interval>            (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitIntervalDayTime      <T extends IntervalDayTime>     (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitIntervalYearMonth    <T extends IntervalYearMonth>   (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitFixedSizeList        <T extends FixedSizeList>       (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitMap                  <T extends Map_>                (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n}\n\n/** @ignore */\nexport class IndexOfVisitor extends Visitor {}\n\n/** @ignore */\nfunction nullIndexOf(vector: VectorType<Null>, searchElement?: null) {\n    // if you're looking for nulls and the vector isn't empty, we've got 'em!\n    return searchElement === null && vector.length > 0 ? 0 : -1;\n}\n\n/** @ignore */\nfunction indexOfNull<T extends DataType>(vector: VectorType<T>, fromIndex?: number): number {\n    const { nullBitmap } = vector;\n    if (!nullBitmap || vector.nullCount <= 0) {\n        return -1;\n    }\n    let i = 0;\n    for (const isValid of iterateBits(nullBitmap, vector.data.offset + (fromIndex || 0), vector.length, nullBitmap, getBool)) {\n        if (!isValid) { return i; }\n        ++i;\n    }\n    return -1;\n}\n\n/** @ignore */\nfunction indexOfValue<T extends DataType>(vector: VectorType<T>, searchElement?: T['TValue'] | null, fromIndex?: number): number {\n    if (searchElement === undefined) { return -1; }\n    if (searchElement === null) { return indexOfNull(vector, fromIndex); }\n    const compare = createElementComparator(searchElement);\n    for (let i = (fromIndex || 0) - 1, n = vector.length; ++i < n;) {\n        if (compare(vector.get(i))) {\n            return i;\n        }\n    }\n    return -1;\n}\n\n/** @ignore */\nfunction indexOfUnion<T extends DataType>(vector: VectorType<T>, searchElement?: T['TValue'] | null, fromIndex?: number): number {\n    // Unions are special -- they do have a nullBitmap, but so can their children.\n    // If the searchElement is null, we don't know whether it came from the Union's\n    // bitmap or one of its childrens'. So we don't interrogate the Union's bitmap,\n    // since that will report the wrong index if a child has a null before the Union.\n    const compare = createElementComparator(searchElement);\n    for (let i = (fromIndex || 0) - 1, n = vector.length; ++i < n;) {\n        if (compare(vector.get(i))) {\n            return i;\n        }\n    }\n    return -1;\n}\n\nIndexOfVisitor.prototype.visitNull                 =  nullIndexOf;\nIndexOfVisitor.prototype.visitBool                 = indexOfValue;\nIndexOfVisitor.prototype.visitInt                  = indexOfValue;\nIndexOfVisitor.prototype.visitInt8                 = indexOfValue;\nIndexOfVisitor.prototype.visitInt16                = indexOfValue;\nIndexOfVisitor.prototype.visitInt32                = indexOfValue;\nIndexOfVisitor.prototype.visitInt64                = indexOfValue;\nIndexOfVisitor.prototype.visitUint8                = indexOfValue;\nIndexOfVisitor.prototype.visitUint16               = indexOfValue;\nIndexOfVisitor.prototype.visitUint32               = indexOfValue;\nIndexOfVisitor.prototype.visitUint64               = indexOfValue;\nIndexOfVisitor.prototype.visitFloat                = indexOfValue;\nIndexOfVisitor.prototype.visitFloat16              = indexOfValue;\nIndexOfVisitor.prototype.visitFloat32              = indexOfValue;\nIndexOfVisitor.prototype.visitFloat64              = indexOfValue;\nIndexOfVisitor.prototype.visitUtf8                 = indexOfValue;\nIndexOfVisitor.prototype.visitBinary               = indexOfValue;\nIndexOfVisitor.prototype.visitFixedSizeBinary      = indexOfValue;\nIndexOfVisitor.prototype.visitDate                 = indexOfValue;\nIndexOfVisitor.prototype.visitDateDay              = indexOfValue;\nIndexOfVisitor.prototype.visitDateMillisecond      = indexOfValue;\nIndexOfVisitor.prototype.visitTimestamp            = indexOfValue;\nIndexOfVisitor.prototype.visitTimestampSecond      = indexOfValue;\nIndexOfVisitor.prototype.visitTimestampMillisecond = indexOfValue;\nIndexOfVisitor.prototype.visitTimestampMicrosecond = indexOfValue;\nIndexOfVisitor.prototype.visitTimestampNanosecond  = indexOfValue;\nIndexOfVisitor.prototype.visitTime                 = indexOfValue;\nIndexOfVisitor.prototype.visitTimeSecond           = indexOfValue;\nIndexOfVisitor.prototype.visitTimeMillisecond      = indexOfValue;\nIndexOfVisitor.prototype.visitTimeMicrosecond      = indexOfValue;\nIndexOfVisitor.prototype.visitTimeNanosecond       = indexOfValue;\nIndexOfVisitor.prototype.visitDecimal              = indexOfValue;\nIndexOfVisitor.prototype.visitList                 = indexOfValue;\nIndexOfVisitor.prototype.visitStruct               = indexOfValue;\nIndexOfVisitor.prototype.visitUnion                = indexOfValue;\nIndexOfVisitor.prototype.visitDenseUnion           = indexOfUnion;\nIndexOfVisitor.prototype.visitSparseUnion          = indexOfUnion;\nIndexOfVisitor.prototype.visitDictionary           = indexOfValue;\nIndexOfVisitor.prototype.visitInterval             = indexOfValue;\nIndexOfVisitor.prototype.visitIntervalDayTime      = indexOfValue;\nIndexOfVisitor.prototype.visitIntervalYearMonth    = indexOfValue;\nIndexOfVisitor.prototype.visitFixedSizeList        = indexOfValue;\nIndexOfVisitor.prototype.visitMap                  = indexOfValue;\n\n/** @ignore */\nexport const instance = new IndexOfVisitor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { Visitor } from '../visitor';\nimport { VectorType } from '../interfaces';\nimport { iterateBits } from '../util/bit';\nimport { instance as getVisitor } from './get';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\n/** @ignore */\nexport interface IteratorVisitor extends Visitor {\n    visit<T extends VectorType>(node: T): IterableIterator<T['TValue'] | null>;\n    visitMany <T extends VectorType>(nodes: T[]): IterableIterator<T['TValue'] | null>[];\n    getVisitFn<T extends Type>(node: T): (vector: VectorType<T>) => IterableIterator<VectorType<T>['TValue'] | null>;\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): (vector: VectorType<T>) => IterableIterator<VectorType<T>['TValue'] | null>;\n    visitNull                 <T extends Null>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitBool                 <T extends Bool>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitInt                  <T extends Int>                  (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitInt8                 <T extends Int8>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitInt16                <T extends Int16>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitInt32                <T extends Int32>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitInt64                <T extends Int64>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitUint8                <T extends Uint8>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitUint16               <T extends Uint16>               (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitUint32               <T extends Uint32>               (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitUint64               <T extends Uint64>               (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitFloat                <T extends Float>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitFloat16              <T extends Float16>              (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitFloat32              <T extends Float32>              (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitFloat64              <T extends Float64>              (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitUtf8                 <T extends Utf8>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitBinary               <T extends Binary>               (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitFixedSizeBinary      <T extends FixedSizeBinary>      (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitDate                 <T extends Date_>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitDateDay              <T extends DateDay>              (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitDateMillisecond      <T extends DateMillisecond>      (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestamp            <T extends Timestamp>            (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestampSecond      <T extends TimestampSecond>      (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestampMillisecond <T extends TimestampMillisecond> (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestampMicrosecond <T extends TimestampMicrosecond> (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestampNanosecond  <T extends TimestampNanosecond>  (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTime                 <T extends Time>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimeSecond           <T extends TimeSecond>           (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimeMillisecond      <T extends TimeMillisecond>      (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimeMicrosecond      <T extends TimeMicrosecond>      (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimeNanosecond       <T extends TimeNanosecond>       (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitDecimal              <T extends Decimal>              (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitList                 <T extends List>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitStruct               <T extends Struct>               (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitUnion                <T extends Union>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitDenseUnion           <T extends DenseUnion>           (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitSparseUnion          <T extends SparseUnion>          (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitDictionary           <T extends Dictionary>           (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitInterval             <T extends Interval>             (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitIntervalDayTime      <T extends IntervalDayTime>      (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitIntervalYearMonth    <T extends IntervalYearMonth>    (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitFixedSizeList        <T extends FixedSizeList>        (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitMap                  <T extends Map_>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n}\n\n/** @ignore */\nexport class IteratorVisitor extends Visitor {}\n\n/** @ignore */\nfunction nullableIterator<T extends DataType>(vector: VectorType<T>): IterableIterator<T['TValue'] | null> {\n    const getFn = getVisitor.getVisitFn(vector);\n    return iterateBits<T['TValue'] | null>(\n        vector.nullBitmap, vector.offset, vector.length, vector,\n        (vec: VectorType<T>, idx: number, nullByte: number, nullBit: number) =>\n            ((nullByte & 1 << nullBit) !== 0) ? getFn(vec, idx) : null\n    );\n}\n\n/** @ignore */\nfunction vectorIterator<T extends DataType>(vector: VectorType<T>): IterableIterator<T['TValue'] | null> {\n\n    // If nullable, iterate manually\n    if (vector.nullCount > 0) {\n        return nullableIterator<T>(vector);\n    }\n\n    const { type, typeId, length } = vector;\n\n    // Fast case, defer to native iterators if possible\n    if (vector.stride === 1 && (\n        (typeId === Type.Timestamp) ||\n        (typeId === Type.Int && (type as Int).bitWidth !== 64) ||\n        (typeId === Type.Time && (type as Time).bitWidth !== 64) ||\n        (typeId === Type.Float && (type as Float).precision > 0 /* Precision.HALF */)\n    )) {\n        return vector.values.subarray(0, length)[Symbol.iterator]();\n    }\n\n    // Otherwise, iterate manually\n    return (function* (getFn) {\n        for (let index = -1; ++index < length;) {\n            yield getFn(vector, index);\n        }\n    })(getVisitor.getVisitFn(vector));\n}\n\nIteratorVisitor.prototype.visitNull                 = vectorIterator;\nIteratorVisitor.prototype.visitBool                 = vectorIterator;\nIteratorVisitor.prototype.visitInt                  = vectorIterator;\nIteratorVisitor.prototype.visitInt8                 = vectorIterator;\nIteratorVisitor.prototype.visitInt16                = vectorIterator;\nIteratorVisitor.prototype.visitInt32                = vectorIterator;\nIteratorVisitor.prototype.visitInt64                = vectorIterator;\nIteratorVisitor.prototype.visitUint8                = vectorIterator;\nIteratorVisitor.prototype.visitUint16               = vectorIterator;\nIteratorVisitor.prototype.visitUint32               = vectorIterator;\nIteratorVisitor.prototype.visitUint64               = vectorIterator;\nIteratorVisitor.prototype.visitFloat                = vectorIterator;\nIteratorVisitor.prototype.visitFloat16              = vectorIterator;\nIteratorVisitor.prototype.visitFloat32              = vectorIterator;\nIteratorVisitor.prototype.visitFloat64              = vectorIterator;\nIteratorVisitor.prototype.visitUtf8                 = vectorIterator;\nIteratorVisitor.prototype.visitBinary               = vectorIterator;\nIteratorVisitor.prototype.visitFixedSizeBinary      = vectorIterator;\nIteratorVisitor.prototype.visitDate                 = vectorIterator;\nIteratorVisitor.prototype.visitDateDay              = vectorIterator;\nIteratorVisitor.prototype.visitDateMillisecond      = vectorIterator;\nIteratorVisitor.prototype.visitTimestamp            = vectorIterator;\nIteratorVisitor.prototype.visitTimestampSecond      = vectorIterator;\nIteratorVisitor.prototype.visitTimestampMillisecond = vectorIterator;\nIteratorVisitor.prototype.visitTimestampMicrosecond = vectorIterator;\nIteratorVisitor.prototype.visitTimestampNanosecond  = vectorIterator;\nIteratorVisitor.prototype.visitTime                 = vectorIterator;\nIteratorVisitor.prototype.visitTimeSecond           = vectorIterator;\nIteratorVisitor.prototype.visitTimeMillisecond      = vectorIterator;\nIteratorVisitor.prototype.visitTimeMicrosecond      = vectorIterator;\nIteratorVisitor.prototype.visitTimeNanosecond       = vectorIterator;\nIteratorVisitor.prototype.visitDecimal              = vectorIterator;\nIteratorVisitor.prototype.visitList                 = vectorIterator;\nIteratorVisitor.prototype.visitStruct               = vectorIterator;\nIteratorVisitor.prototype.visitUnion                = vectorIterator;\nIteratorVisitor.prototype.visitDenseUnion           = vectorIterator;\nIteratorVisitor.prototype.visitSparseUnion          = vectorIterator;\nIteratorVisitor.prototype.visitDictionary           = vectorIterator;\nIteratorVisitor.prototype.visitInterval             = vectorIterator;\nIteratorVisitor.prototype.visitIntervalDayTime      = vectorIterator;\nIteratorVisitor.prototype.visitIntervalYearMonth    = vectorIterator;\nIteratorVisitor.prototype.visitFixedSizeList        = vectorIterator;\nIteratorVisitor.prototype.visitMap                  = vectorIterator;\n\n/** @ignore */\nexport const instance = new IteratorVisitor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { Visitor } from '../visitor';\nimport { VectorType } from '../interfaces';\nimport { instance as iteratorVisitor } from './iterator';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\n/** @ignore */\nexport interface ToArrayVisitor extends Visitor {\n    visit<T extends VectorType>(node: T): T['TArray'];\n    visitMany<T extends VectorType>(nodes: T[]): T['TArray'][];\n    getVisitFn<T extends Type>(node: T): (vector: VectorType<T>) => VectorType<T>['TArray'];\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): (vector: VectorType<T>) => VectorType<T>['TArray'];\n    visitNull                                    <T extends Null>                (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitBool                                    <T extends Bool>                (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitInt                                     <T extends Int>                 (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitInt8                                    <T extends Int8>                (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitInt16                                   <T extends Int16>               (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitInt32                                   <T extends Int32>               (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitInt64                                   <T extends Int64>               (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitUint8                                   <T extends Uint8>               (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitUint16                                  <T extends Uint16>              (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitUint32                                  <T extends Uint32>              (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitUint64                                  <T extends Uint64>              (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitFloat                                   <T extends Float>               (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitFloat16                                 <T extends Float16>             (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitFloat32                                 <T extends Float32>             (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitFloat64                                 <T extends Float64>             (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitUtf8                                    <T extends Utf8>                (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitBinary                                  <T extends Binary>              (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitFixedSizeBinary                         <T extends FixedSizeBinary>     (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitDate                                    <T extends Date_>               (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitDateDay                                 <T extends DateDay>             (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitDateMillisecond                         <T extends DateMillisecond>     (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimestamp                               <T extends Timestamp>           (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimestampSecond                         <T extends TimestampSecond>     (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimestampMillisecond                    <T extends TimestampMillisecond>(vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimestampMicrosecond                    <T extends TimestampMicrosecond>(vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimestampNanosecond                     <T extends TimestampNanosecond> (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTime                                    <T extends Time>                (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimeSecond                              <T extends TimeSecond>          (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimeMillisecond                         <T extends TimeMillisecond>     (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimeMicrosecond                         <T extends TimeMicrosecond>     (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimeNanosecond                          <T extends TimeNanosecond>      (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitDecimal                                 <T extends Decimal>             (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitList                <R extends DataType, T extends List<R>>             (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitStruct                                  <T extends Struct>              (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitUnion                                   <T extends Union>               (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitDenseUnion                              <T extends DenseUnion>          (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitSparseUnion                             <T extends SparseUnion>         (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitDictionary          <R extends DataType, T extends Dictionary<R>>       (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitInterval                                <T extends Interval>            (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitIntervalDayTime                         <T extends IntervalDayTime>     (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitIntervalYearMonth                       <T extends IntervalYearMonth>   (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitFixedSizeList       <R extends DataType, T extends FixedSizeList<R>>    (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitMap                                     <T extends Map_>                (vector: VectorType<T>): VectorType<T>['TArray'];\n}\n\n/** @ignore */\nexport class ToArrayVisitor extends Visitor {}\n\n/** @ignore */\nfunction arrayOfVector<T extends DataType>(vector: VectorType<T>): T['TArray'] {\n\n    const { type, length, stride } = vector;\n\n    // Fast case, return subarray if possible\n    switch (type.typeId) {\n        case Type.Int:\n        case Type.Float: case Type.Decimal:\n        case Type.Time: case Type.Timestamp:\n            return vector.values.subarray(0, length * stride);\n    }\n\n    // Otherwise if not primitive, slow copy\n    return [...iteratorVisitor.visit(vector)] as T['TArray'];\n}\n\nToArrayVisitor.prototype.visitNull                 = arrayOfVector;\nToArrayVisitor.prototype.visitBool                 = arrayOfVector;\nToArrayVisitor.prototype.visitInt                  = arrayOfVector;\nToArrayVisitor.prototype.visitInt8                 = arrayOfVector;\nToArrayVisitor.prototype.visitInt16                = arrayOfVector;\nToArrayVisitor.prototype.visitInt32                = arrayOfVector;\nToArrayVisitor.prototype.visitInt64                = arrayOfVector;\nToArrayVisitor.prototype.visitUint8                = arrayOfVector;\nToArrayVisitor.prototype.visitUint16               = arrayOfVector;\nToArrayVisitor.prototype.visitUint32               = arrayOfVector;\nToArrayVisitor.prototype.visitUint64               = arrayOfVector;\nToArrayVisitor.prototype.visitFloat                = arrayOfVector;\nToArrayVisitor.prototype.visitFloat16              = arrayOfVector;\nToArrayVisitor.prototype.visitFloat32              = arrayOfVector;\nToArrayVisitor.prototype.visitFloat64              = arrayOfVector;\nToArrayVisitor.prototype.visitUtf8                 = arrayOfVector;\nToArrayVisitor.prototype.visitBinary               = arrayOfVector;\nToArrayVisitor.prototype.visitFixedSizeBinary      = arrayOfVector;\nToArrayVisitor.prototype.visitDate                 = arrayOfVector;\nToArrayVisitor.prototype.visitDateDay              = arrayOfVector;\nToArrayVisitor.prototype.visitDateMillisecond      = arrayOfVector;\nToArrayVisitor.prototype.visitTimestamp            = arrayOfVector;\nToArrayVisitor.prototype.visitTimestampSecond      = arrayOfVector;\nToArrayVisitor.prototype.visitTimestampMillisecond = arrayOfVector;\nToArrayVisitor.prototype.visitTimestampMicrosecond = arrayOfVector;\nToArrayVisitor.prototype.visitTimestampNanosecond  = arrayOfVector;\nToArrayVisitor.prototype.visitTime                 = arrayOfVector;\nToArrayVisitor.prototype.visitTimeSecond           = arrayOfVector;\nToArrayVisitor.prototype.visitTimeMillisecond      = arrayOfVector;\nToArrayVisitor.prototype.visitTimeMicrosecond      = arrayOfVector;\nToArrayVisitor.prototype.visitTimeNanosecond       = arrayOfVector;\nToArrayVisitor.prototype.visitDecimal              = arrayOfVector;\nToArrayVisitor.prototype.visitList                 = arrayOfVector;\nToArrayVisitor.prototype.visitStruct               = arrayOfVector;\nToArrayVisitor.prototype.visitUnion                = arrayOfVector;\nToArrayVisitor.prototype.visitDenseUnion           = arrayOfVector;\nToArrayVisitor.prototype.visitSparseUnion          = arrayOfVector;\nToArrayVisitor.prototype.visitDictionary           = arrayOfVector;\nToArrayVisitor.prototype.visitInterval             = arrayOfVector;\nToArrayVisitor.prototype.visitIntervalDayTime      = arrayOfVector;\nToArrayVisitor.prototype.visitIntervalYearMonth    = arrayOfVector;\nToArrayVisitor.prototype.visitFixedSizeList        = arrayOfVector;\nToArrayVisitor.prototype.visitMap                  = arrayOfVector;\n\n/** @ignore */\nexport const instance = new ToArrayVisitor();\n","/* istanbul ignore file */\n\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Visitor } from '../visitor';\nimport { VectorType } from '../interfaces';\nimport { Type, TimeUnit } from '../enum';\nimport { Schema, Field } from '../schema';\nimport {\n    DataType, Dictionary,\n    Float, Int, Date_, Interval, Time, Timestamp,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary,\n    List, FixedSizeList, Map_, Struct, Union,\n} from '../type';\n\n/** @ignore */ const sum = (x: number, y: number) => x + y;\n/** @ignore */ const variableWidthColumnErrorMessage = (type: DataType) => `Cannot compute the byte width of variable-width column ${type}`;\n\n/** @ignore */\nexport interface ByteWidthVisitor extends Visitor {\n    visit<T extends DataType>(node: T): number;\n    visitMany<T extends DataType>(nodes: T[]): number[];\n    getVisitFn<T extends Type>    (node: T): (type: DataType<T>) => number;\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): (type: T) => number;\n}\n\n/** @ignore */\nexport class ByteWidthVisitor extends Visitor {\n    public visitNull            (____: Null            ) { return 0; }\n    public visitInt             (type: Int             ) { return type.bitWidth / 8; }\n    public visitFloat           (type: Float           ) { return type.ArrayType.BYTES_PER_ELEMENT; }\n    public visitBinary          (type: Binary          ) { throw new Error(variableWidthColumnErrorMessage(type)); }\n    public visitUtf8            (type: Utf8            ) { throw new Error(variableWidthColumnErrorMessage(type)); }\n    public visitBool            (____: Bool            ) { return 1 / 8; }\n    public visitDecimal         (____: Decimal         ) { return 16; }\n    public visitDate            (type: Date_           ) { return (type.unit + 1) * 4; }\n    public visitTime            (type: Time            ) { return type.bitWidth / 8; }\n    public visitTimestamp       (type: Timestamp       ) { return type.unit === TimeUnit.SECOND ? 4 : 8; }\n    public visitInterval        (type: Interval        ) { return (type.unit + 1) * 4; }\n    public visitList            (type: List            ) { throw new Error(variableWidthColumnErrorMessage(type)); }\n    public visitStruct          (type: Struct          ) { return this.visitFields(type.children).reduce(sum, 0); }\n    public visitUnion           (type: Union           ) { return this.visitFields(type.children).reduce(sum, 0); }\n    public visitFixedSizeBinary (type: FixedSizeBinary ) { return type.byteWidth; }\n    public visitFixedSizeList   (type: FixedSizeList   ) { return type.listSize * this.visitFields(type.children).reduce(sum, 0); }\n    public visitMap             (type: Map_            ) { return this.visitFields(type.children).reduce(sum, 0); }\n    public visitDictionary      (type: Dictionary      ) { return this.visit(type.indices); }\n    public visitFields          (fields: Field[]       ) { return (fields || []).map((field) => this.visit(field.type)); }\n    public visitSchema          (schema: Schema        ) { return this.visitFields(schema.fields).reduce(sum, 0); }\n}\n\n/** @ignore */\nexport const instance = new ByteWidthVisitor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { DataType } from '../type';\nimport { Visitor } from '../visitor';\nimport { VectorType, VectorCtor } from '../interfaces';\n\nimport { BinaryVector } from '../vector/binary';\nimport { BoolVector } from '../vector/bool';\nimport { DateVector, DateDayVector, DateMillisecondVector } from '../vector/date';\nimport { DecimalVector } from '../vector/decimal';\nimport { DictionaryVector } from '../vector/dictionary';\nimport { FixedSizeBinaryVector } from '../vector/fixedsizebinary';\nimport { FixedSizeListVector } from '../vector/fixedsizelist';\nimport { FloatVector, Float16Vector, Float32Vector, Float64Vector } from '../vector/float';\nimport { IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector } from '../vector/interval';\nimport { IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector } from '../vector/int';\nimport { ListVector } from '../vector/list';\nimport { MapVector } from '../vector/map';\nimport { NullVector } from '../vector/null';\nimport { StructVector } from '../vector/struct';\nimport { TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector } from '../vector/timestamp';\nimport { TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector } from '../vector/time';\nimport { UnionVector, DenseUnionVector, SparseUnionVector } from '../vector/union';\nimport { Utf8Vector } from '../vector/utf8';\n\n/** @ignore */\nexport interface GetVectorConstructor extends Visitor {\n    visit<T extends Type>(node: T): VectorCtor<T>;\n    visitMany <T extends Type>(nodes: T[]): VectorCtor<T>[];\n    getVisitFn<T extends Type>(node: T): () => VectorCtor<T>;\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): () => VectorCtor<T>;\n}\n\n/** @ignore */\nexport class GetVectorConstructor extends Visitor {\n    public visitNull                 () { return NullVector; }\n    public visitBool                 () { return BoolVector; }\n    public visitInt                  () { return IntVector; }\n    public visitInt8                 () { return Int8Vector; }\n    public visitInt16                () { return Int16Vector; }\n    public visitInt32                () { return Int32Vector; }\n    public visitInt64                () { return Int64Vector; }\n    public visitUint8                () { return Uint8Vector; }\n    public visitUint16               () { return Uint16Vector; }\n    public visitUint32               () { return Uint32Vector; }\n    public visitUint64               () { return Uint64Vector; }\n    public visitFloat                () { return FloatVector; }\n    public visitFloat16              () { return Float16Vector; }\n    public visitFloat32              () { return Float32Vector; }\n    public visitFloat64              () { return Float64Vector; }\n    public visitUtf8                 () { return Utf8Vector; }\n    public visitBinary               () { return BinaryVector; }\n    public visitFixedSizeBinary      () { return FixedSizeBinaryVector; }\n    public visitDate                 () { return DateVector; }\n    public visitDateDay              () { return DateDayVector; }\n    public visitDateMillisecond      () { return DateMillisecondVector; }\n    public visitTimestamp            () { return TimestampVector; }\n    public visitTimestampSecond      () { return TimestampSecondVector; }\n    public visitTimestampMillisecond () { return TimestampMillisecondVector; }\n    public visitTimestampMicrosecond () { return TimestampMicrosecondVector; }\n    public visitTimestampNanosecond  () { return TimestampNanosecondVector; }\n    public visitTime                 () { return TimeVector; }\n    public visitTimeSecond           () { return TimeSecondVector; }\n    public visitTimeMillisecond      () { return TimeMillisecondVector; }\n    public visitTimeMicrosecond      () { return TimeMicrosecondVector; }\n    public visitTimeNanosecond       () { return TimeNanosecondVector; }\n    public visitDecimal              () { return DecimalVector; }\n    public visitList                 () { return ListVector; }\n    public visitStruct               () { return StructVector; }\n    public visitUnion                () { return UnionVector; }\n    public visitDenseUnion           () { return DenseUnionVector; }\n    public visitSparseUnion          () { return SparseUnionVector; }\n    public visitDictionary           () { return DictionaryVector; }\n    public visitInterval             () { return IntervalVector; }\n    public visitIntervalDayTime      () { return IntervalDayTimeVector; }\n    public visitIntervalYearMonth    () { return IntervalYearMonthVector; }\n    public visitFixedSizeList        () { return FixedSizeListVector; }\n    public visitMap                  () { return MapVector; }\n}\n\n/** @ignore */\nexport const instance = new GetVectorConstructor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nexport { Vector } from '../vector';\nexport { BaseVector } from './base';\nexport { BinaryVector } from './binary';\nexport { BoolVector } from './bool';\nexport { Chunked } from './chunked';\nexport { DateVector, DateDayVector, DateMillisecondVector } from './date';\nexport { DecimalVector } from './decimal';\nexport { DictionaryVector } from './dictionary';\nexport { FixedSizeBinaryVector } from './fixedsizebinary';\nexport { FixedSizeListVector } from './fixedsizelist';\nexport { FloatVector, Float16Vector, Float32Vector, Float64Vector } from './float';\nexport { IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector } from './interval';\nexport { IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector } from './int';\nexport { ListVector } from './list';\nexport { MapVector } from './map';\nexport { NullVector } from './null';\nexport { StructVector } from './struct';\nexport { TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector } from './timestamp';\nexport { TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector } from './time';\nexport { UnionVector, DenseUnionVector, SparseUnionVector } from './union';\nexport { Utf8Vector } from './utf8';\nexport { MapRow, StructRow } from './row';\n\nimport * as fn from '../util/fn';\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { Chunked } from './chunked';\nimport { BaseVector } from './base';\nimport { setBool } from '../util/bit';\nimport { isIterable, isAsyncIterable } from '../util/compat';\nimport { Builder, IterableBuilderOptions } from '../builder';\nimport { VectorType as V, VectorCtorArgs } from '../interfaces';\nimport { instance as getVisitor } from '../visitor/get';\nimport { instance as setVisitor } from '../visitor/set';\nimport { instance as indexOfVisitor } from '../visitor/indexof';\nimport { instance as toArrayVisitor } from '../visitor/toarray';\nimport { instance as iteratorVisitor } from '../visitor/iterator';\nimport { instance as byteWidthVisitor } from '../visitor/bytewidth';\nimport { instance as getVectorConstructor } from '../visitor/vectorctor';\n\ndeclare module '../vector' {\n    namespace Vector {\n        export { newVector as new };\n        export { vectorFrom as from };\n    }\n}\n\ndeclare module './base' {\n    namespace BaseVector {\n        export { vectorFrom as from };\n    }\n    interface BaseVector<T extends DataType> {\n        get(index: number): T['TValue'] | null;\n        set(index: number, value: T['TValue'] | null): void;\n        indexOf(value: T['TValue'] | null, fromIndex?: number): number;\n        toArray(): T['TArray'];\n        getByteWidth(): number;\n        [Symbol.iterator](): IterableIterator<T['TValue'] | null>;\n    }\n}\n\n/** @nocollapse */\nVector.new = newVector;\n\n/** @nocollapse */\nVector.from = vectorFrom;\n\n/** @ignore */\nfunction newVector<T extends DataType>(data: Data<T>, ...args: VectorCtorArgs<V<T>>): V<T> {\n    return new (getVectorConstructor.getVisitFn<T>(data)())(data, ...args) as V<T>;\n}\n\n/** @ignore */\nexport interface VectorBuilderOptions<T extends DataType, TNull = any> extends IterableBuilderOptions<T, TNull> { values: Iterable<T['TValue'] | TNull>; }\n/** @ignore */\nexport interface VectorBuilderOptionsAsync<T extends DataType, TNull = any> extends IterableBuilderOptions<T, TNull> { values: AsyncIterable<T['TValue'] | TNull>; }\n\n/** @ignore */\nexport function vectorFromValuesWithType<T extends DataType, TNull = any>(newDataType: () => T, input: Iterable<T['TValue'] | TNull> | AsyncIterable<T['TValue'] | TNull> | VectorBuilderOptions<T, TNull> | VectorBuilderOptionsAsync<T, TNull>) {\n    if (isIterable(input)) {\n        return Vector.from({ 'nullValues': [null, undefined], type: newDataType(), 'values': input }) as V<T>;\n    } else if (isAsyncIterable(input)) {\n        return Vector.from({ 'nullValues': [null, undefined], type: newDataType(), 'values': input }) as Promise<V<T>>;\n    }\n    const {\n        'values': values = [],\n        'type': type = newDataType(),\n        'nullValues': nullValues = [null, undefined],\n    } = { ...input };\n    return isIterable(values)\n        ? Vector.from({ nullValues, ...input, type } as VectorBuilderOptions<T, TNull>)\n        : Vector.from({ nullValues, ...input, type } as VectorBuilderOptionsAsync<T, TNull>);\n}\n\n/** @ignore */\nfunction vectorFrom<T extends DataType = any, TNull = any>(input: VectorBuilderOptions<T, TNull>): Vector<T>;\nfunction vectorFrom<T extends DataType = any, TNull = any>(input: VectorBuilderOptionsAsync<T, TNull>): Promise<Vector<T>>;\nfunction vectorFrom<T extends DataType = any, TNull = any>(input: VectorBuilderOptions<T, TNull> | VectorBuilderOptionsAsync<T, TNull>) {\n    const { 'values': values = [], ...options } = { 'nullValues': [null, undefined], ...input } as VectorBuilderOptions<T, TNull> | VectorBuilderOptionsAsync<T, TNull>;\n    if (isIterable<T['TValue'] | TNull>(values)) {\n        const chunks = [...Builder.throughIterable(options)(values)];\n        return chunks.length === 1 ? chunks[0] : Chunked.concat<T>(chunks);\n    }\n    return (async (chunks: V<T>[]) => {\n        const transform = Builder.throughAsyncIterable(options);\n        for await (const chunk of transform(values)) {\n            chunks.push(chunk);\n        }\n        return chunks.length === 1 ? chunks[0] : Chunked.concat<T>(chunks);\n    })([]);\n}\n\n//\n// We provide the following method implementations for code navigability purposes only.\n// They're overridden at runtime below with the specific Visitor implementation for each type,\n// short-circuiting the usual Visitor traversal and reducing intermediate lookups and calls.\n// This comment is here to remind you to not set breakpoints in these function bodies, or to inform\n// you why the breakpoints you have already set are not being triggered. Have a great day!\n//\n\nBaseVector.prototype.get = function baseVectorGet<T extends DataType>(this: BaseVector<T>, index: number): T['TValue'] | null {\n    return getVisitor.visit(this, index);\n};\n\nBaseVector.prototype.set = function baseVectorSet<T extends DataType>(this: BaseVector<T>, index: number, value: T['TValue'] | null): void {\n    return setVisitor.visit(this, index, value);\n};\n\nBaseVector.prototype.indexOf = function baseVectorIndexOf<T extends DataType>(this: BaseVector<T>, value: T['TValue'] | null, fromIndex?: number): number {\n    return indexOfVisitor.visit(this, value, fromIndex);\n};\n\nBaseVector.prototype.toArray = function baseVectorToArray<T extends DataType>(this: BaseVector<T>): T['TArray'] {\n    return toArrayVisitor.visit(this);\n};\n\nBaseVector.prototype.getByteWidth = function baseVectorGetByteWidth<T extends DataType>(this: BaseVector<T>): number {\n    return byteWidthVisitor.visit(this.type);\n};\n\nBaseVector.prototype[Symbol.iterator] = function baseVectorSymbolIterator<T extends DataType>(this: BaseVector<T>): IterableIterator<T['TValue'] | null> {\n    return iteratorVisitor.visit(this);\n};\n\n(BaseVector.prototype as any)._bindDataAccessors = bindBaseVectorDataAccessors;\n\n// Perf: bind and assign the operator Visitor methods to each of the Vector subclasses for each Type\n(Object.keys(Type) as any[])\n    .map((T: any) => Type[T] as any)\n    .filter((T: any): T is Type => typeof T === 'number')\n    .filter((typeId) => typeId !== Type.NONE)\n    .forEach((typeId) => {\n        const VectorCtor = getVectorConstructor.visit(typeId);\n        VectorCtor.prototype['get'] = fn.partial1(getVisitor.getVisitFn(typeId));\n        VectorCtor.prototype['set'] = fn.partial2(setVisitor.getVisitFn(typeId));\n        VectorCtor.prototype['indexOf'] = fn.partial2(indexOfVisitor.getVisitFn(typeId));\n        VectorCtor.prototype['toArray'] = fn.partial0(toArrayVisitor.getVisitFn(typeId));\n        VectorCtor.prototype['getByteWidth'] = partialType0(byteWidthVisitor.getVisitFn(typeId));\n        VectorCtor.prototype[Symbol.iterator] = fn.partial0(iteratorVisitor.getVisitFn(typeId));\n    });\n\n/** @ignore */\nfunction partialType0<T extends Vector>(visit: (node: T['type']) => any) {\n    return function(this: T) { return visit(this.type); };\n}\n\n/** @ignore */\nfunction wrapNullableGet<T extends DataType, V extends Vector<T>, F extends (i: number) => any>(fn: F): (...args: Parameters<F>) => ReturnType<F> {\n    return function(this: V, i: number) { return this.isValid(i) ? fn.call(this, i) : null; };\n}\n\n/** @ignore */\nfunction wrapNullableSet<T extends DataType, V extends BaseVector<T>, F extends (i: number, a: any) => void>(fn: F): (...args: Parameters<F>) => void {\n    return function(this: V, i: number, a: any) {\n        if (setBool(this.nullBitmap, this.offset + i, !(a === null || a === undefined))) {\n            fn.call(this, i, a);\n        }\n    };\n}\n\n/** @ignore */\nfunction bindBaseVectorDataAccessors<T extends DataType>(this: BaseVector<T>) {\n    const nullBitmap = this.nullBitmap;\n    if (nullBitmap && nullBitmap.byteLength > 0) {\n        this.get = wrapNullableGet(this.get);\n        this.set = wrapNullableSet(this.set);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Column } from './column';\nimport { Schema, Field } from './schema';\nimport { RecordBatch, _InternalEmptyPlaceholderRecordBatch } from './recordbatch';\nimport { DataFrame } from './compute/dataframe';\nimport { RecordBatchReader } from './ipc/reader';\nimport { DataType, RowLike, Struct } from './type';\nimport { selectColumnArgs, selectArgs } from './util/args';\nimport { Clonable, Sliceable, Applicative } from './vector';\nimport { isPromise, isIterable, isAsyncIterable } from './util/compat';\nimport { RecordBatchFileWriter, RecordBatchStreamWriter } from './ipc/writer';\nimport { distributeColumnsIntoRecordBatches, distributeVectorsIntoRecordBatches } from './util/recordbatch';\nimport { Vector, Chunked, StructVector, VectorBuilderOptions, VectorBuilderOptionsAsync } from './vector/index';\n\ntype VectorMap = { [key: string]: Vector };\ntype Fields<T extends { [key: string]: DataType }> = (keyof T)[] | Field<T[keyof T]>[];\ntype ChildData<T extends { [key: string]: DataType }> = Data<T[keyof T]>[] | Vector<T[keyof T]>[];\ntype Columns<T extends { [key: string]: DataType }> = Column<T[keyof T]>[] | Column<T[keyof T]>[][];\n\nexport interface Table<T extends { [key: string]: DataType } = any> {\n\n    get(index: number): Struct<T>['TValue'];\n    [Symbol.iterator](): IterableIterator<RowLike<T>>;\n\n    slice(begin?: number, end?: number): Table<T>;\n    concat(...others: Vector<Struct<T>>[]): Table<T>;\n    clone(chunks?: RecordBatch<T>[], offsets?: Uint32Array): Table<T>;\n\n    scan(next: import('./compute/dataframe').NextFunc, bind?: import('./compute/dataframe').BindFunc): void;\n    scanReverse(next: import('./compute/dataframe').NextFunc, bind?: import('./compute/dataframe').BindFunc): void;\n    countBy(name: import('./compute/predicate').Col | string): import('./compute/dataframe').CountByResult;\n    filter(predicate: import('./compute/predicate').Predicate): import('./compute/dataframe').FilteredDataFrame<T>;\n}\n\nexport class Table<T extends { [key: string]: DataType } = any>\n    extends Chunked<Struct<T>>\n    implements DataFrame<T>,\n               Clonable<Table<T>>,\n               Sliceable<Table<T>>,\n               Applicative<Struct<T>, Table<T>> {\n\n    /** @nocollapse */\n    public static empty<T extends { [key: string]: DataType } = {}>(schema = new Schema<T>([])) { return new Table<T>(schema, []); }\n\n    public static from(): Table<{}>;\n    public static from<T extends { [key: string]: DataType } = any>(source: RecordBatchReader<T>): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg0): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg2): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg1): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg3): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg4): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg5): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: PromiseLike<RecordBatchReader<T>>): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(options: VectorBuilderOptions<Struct<T>, TNull>): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(options: VectorBuilderOptionsAsync<Struct<T>, TNull>): Promise<Table<T>>;\n    /** @nocollapse */\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(input?: any) {\n\n        if (!input) { return Table.empty(); }\n\n        if (typeof input === 'object') {\n            let table = isIterable(input['values']) ? tableFromIterable<T, TNull>(input)\n                 : isAsyncIterable(input['values']) ? tableFromAsyncIterable<T, TNull>(input)\n                                                    : null;\n            if (table !== null) { return table; }\n        }\n\n        let reader = RecordBatchReader.from<T>(input) as RecordBatchReader<T> | Promise<RecordBatchReader<T>>;\n\n        if (isPromise<RecordBatchReader<T>>(reader)) {\n            return (async () => await Table.from(await reader))();\n        }\n        if (reader.isSync() && (reader = reader.open())) {\n            return !reader.schema ? Table.empty() : new Table<T>(reader.schema, [...reader]);\n        }\n        return (async (opening) => {\n            const reader = await opening;\n            const schema = reader.schema;\n            const batches: RecordBatch[] = [];\n            if (schema) {\n                for await (let batch of reader) {\n                    batches.push(batch);\n                }\n                return new Table<T>(schema, batches);\n            }\n            return Table.empty();\n        })(reader.open());\n    }\n\n    /** @nocollapse */\n    public static async fromAsync<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArgs): Promise<Table<T>> {\n        return await Table.from<T>(source as any);\n    }\n\n    /** @nocollapse */\n    public static fromStruct<T extends { [key: string]: DataType } = any>(vector: Vector<Struct<T>>) {\n        return Table.new<T>(vector.data.childData as Data<T[keyof T]>[], vector.type.children);\n    }\n\n    /**\n     * @summary Create a new Table from a collection of Columns or Vectors,\n     * with an optional list of names or Fields.\n     *\n     *\n     * `Table.new` accepts an Object of\n     * Columns or Vectors, where the keys will be used as the field names\n     * for the Schema:\n     * ```ts\n     * const i32s = Int32Vector.from([1, 2, 3]);\n     * const f32s = Float32Vector.from([.1, .2, .3]);\n     * const table = Table.new({ i32: i32s, f32: f32s });\n     * assert(table.schema.fields[0].name === 'i32');\n     * ```\n     *\n     * It also accepts a a list of Vectors with an optional list of names or\n     * Fields for the resulting Schema. If the list is omitted or a name is\n     * missing, the numeric index of each Vector will be used as the name:\n     * ```ts\n     * const i32s = Int32Vector.from([1, 2, 3]);\n     * const f32s = Float32Vector.from([.1, .2, .3]);\n     * const table = Table.new([i32s, f32s], ['i32']);\n     * assert(table.schema.fields[0].name === 'i32');\n     * assert(table.schema.fields[1].name === '1');\n     * ```\n     *\n     * If the supplied arguments are Columns, `Table.new` will infer the Schema\n     * from the Columns:\n     * ```ts\n     * const i32s = Column.new('i32', Int32Vector.from([1, 2, 3]));\n     * const f32s = Column.new('f32', Float32Vector.from([.1, .2, .3]));\n     * const table = Table.new(i32s, f32s);\n     * assert(table.schema.fields[0].name === 'i32');\n     * assert(table.schema.fields[1].name === 'f32');\n     * ```\n     *\n     * If the supplied Vector or Column lengths are unequal, `Table.new` will\n     * extend the lengths of the shorter Columns, allocating additional bytes\n     * to represent the additional null slots. The memory required to allocate\n     * these additional bitmaps can be computed as:\n     * ```ts\n     * let additionalBytes = 0;\n     * for (let vec in shorter_vectors) {\n     *     additionalBytes += (((longestLength - vec.length) + 63) & ~63) >> 3;\n     * }\n     * ```\n     *\n     * For example, an additional null bitmap for one million null values would require\n     * 125,000 bytes (`((1e6 + 63) & ~63) >> 3`), or approx. `0.11MiB`\n     */\n    public static new<T extends { [key: string]: DataType } = any>(...columns: Columns<T>): Table<T>;\n    public static new<T extends VectorMap = any>(children: T): Table<{ [P in keyof T]: T[P]['type'] }>;\n    public static new<T extends { [key: string]: DataType } = any>(children: ChildData<T>, fields?: Fields<T>): Table<T>;\n    /** @nocollapse */\n    public static new(...cols: any[]) {\n        return new Table(...distributeColumnsIntoRecordBatches(selectColumnArgs(cols)));\n    }\n\n    constructor(batches: RecordBatch<T>[]);\n    constructor(...batches: RecordBatch<T>[]);\n    constructor(schema: Schema<T>, batches: RecordBatch<T>[]);\n    constructor(schema: Schema<T>, ...batches: RecordBatch<T>[]);\n    constructor(...args: any[]) {\n\n        let schema: Schema<T> = null!;\n\n        if (args[0] instanceof Schema) { schema = args.shift(); }\n\n        let chunks = selectArgs<RecordBatch<T>>(RecordBatch, args);\n\n        if (!schema && !(schema = chunks[0] && chunks[0].schema)) {\n            throw new TypeError('Table must be initialized with a Schema or at least one RecordBatch');\n        }\n\n        chunks[0] || (chunks[0] = new _InternalEmptyPlaceholderRecordBatch(schema));\n\n        super(new Struct(schema.fields), chunks);\n\n        this._schema = schema;\n        this._chunks = chunks;\n    }\n\n    protected _schema: Schema<T>;\n    // List of inner RecordBatches\n    protected _chunks: RecordBatch<T>[];\n    protected _children?: Column<T[keyof T]>[];\n\n    public get schema() { return this._schema; }\n    public get length() { return this._length; }\n    public get chunks() { return this._chunks; }\n    public get numCols() { return this._numChildren; }\n\n    public clone(chunks = this._chunks) {\n        return new Table<T>(this._schema, chunks);\n    }\n\n    public getColumn<R extends keyof T>(name: R): Column<T[R]> {\n        return this.getColumnAt(this.getColumnIndex(name)) as Column<T[R]>;\n    }\n    public getColumnAt<R extends DataType = any>(index: number): Column<R> | null {\n        return this.getChildAt(index);\n    }\n    public getColumnIndex<R extends keyof T>(name: R) {\n        return this._schema.fields.findIndex((f) => f.name === name);\n    }\n    public getChildAt<R extends DataType = any>(index: number): Column<R> | null {\n        if (index < 0 || index >= this.numChildren) { return null; }\n        let field: Field<R>, child: Column<R>;\n        const fields = (this._schema as Schema<any>).fields;\n        const columns = this._children || (this._children = []) as Column[];\n        if (child = columns[index]) { return child as Column<R>; }\n        if (field = fields[index]) {\n            const chunks = this._chunks\n                .map((chunk) => chunk.getChildAt<R>(index))\n                .filter((vec): vec is Vector<R> => vec != null);\n            if (chunks.length > 0) {\n                return (columns[index] = new Column<R>(field, chunks));\n            }\n        }\n        return null;\n    }\n\n    // @ts-ignore\n    public serialize(encoding = 'binary', stream = true) {\n        const Writer = !stream\n            ? RecordBatchFileWriter\n            : RecordBatchStreamWriter;\n        return Writer.writeAll(this).toUint8Array(true);\n    }\n    public count(): number {\n        return this._length;\n    }\n    public select<K extends keyof T = any>(...columnNames: K[]) {\n        const nameToIndex = this._schema.fields.reduce((m, f, i) => m.set(f.name as K, i), new Map<K, number>());\n        return this.selectAt(...columnNames.map((columnName) => nameToIndex.get(columnName)!).filter((x) => x > -1));\n    }\n    public selectAt<K extends T[keyof T] = any>(...columnIndices: number[]) {\n        const schema = this._schema.selectAt<K>(...columnIndices);\n        return new Table(schema, this._chunks.map(({ length, data: { childData } }) => {\n            return new RecordBatch(schema, length, columnIndices.map((i) => childData[i]).filter(Boolean));\n        }));\n    }\n    public assign<R extends { [key: string]: DataType } = any>(other: Table<R>) {\n\n        const fields = this._schema.fields;\n        const [indices, oldToNew] = other.schema.fields.reduce((memo, f2, newIdx) => {\n            const [indices, oldToNew] = memo;\n            const i = fields.findIndex((f) => f.name === f2.name);\n            ~i ? (oldToNew[i] = newIdx) : indices.push(newIdx);\n            return memo;\n        }, [[], []] as number[][]);\n\n        const schema = this._schema.assign(other.schema);\n        const columns = [\n            ...fields.map((_f, i, _fs, j = oldToNew[i]) =>\n                (j === undefined ? this.getColumnAt(i) : other.getColumnAt(j))!),\n            ...indices.map((i) => other.getColumnAt(i)!)\n        ].filter(Boolean) as Column<(T & R)[keyof T | keyof R]>[];\n\n        return new Table<T & R>(...distributeVectorsIntoRecordBatches<any>(schema, columns));\n    }\n}\n\nfunction tableFromIterable<T extends { [key: string]: DataType } = any, TNull = any>(input: VectorBuilderOptions<Struct<T>, TNull>) {\n    const { type } = input;\n    if (type instanceof Struct) {\n        return Table.fromStruct(StructVector.from(input as VectorBuilderOptions<Struct<T>, TNull>));\n    }\n    return null;\n}\n\nfunction tableFromAsyncIterable<T extends { [key: string]: DataType } = any, TNull = any>(input: VectorBuilderOptionsAsync<Struct<T>, TNull>) {\n    const { type } = input;\n    if (type instanceof Struct) {\n        return StructVector.from(input as VectorBuilderOptionsAsync<Struct<T>, TNull>).then((vector) => Table.fromStruct(vector));\n    }\n    return null;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Table } from './table';\nimport { Vector } from './vector';\nimport { Visitor } from './visitor';\nimport { Schema, Field } from './schema';\nimport { isIterable } from './util/compat';\nimport { Chunked } from './vector/chunked';\nimport { selectFieldArgs } from './util/args';\nimport { DataType, Struct, Dictionary } from './type';\nimport { ensureSameLengthData } from './util/recordbatch';\nimport { Clonable, Sliceable, Applicative } from './vector';\nimport { StructVector, VectorBuilderOptions, VectorBuilderOptionsAsync } from './vector/index';\n\ntype VectorMap = { [key: string]: Vector };\ntype Fields<T extends { [key: string]: DataType }> = (keyof T)[] | Field<T[keyof T]>[];\ntype ChildData<T extends { [key: string]: DataType }> = (Data<T[keyof T]> | Vector<T[keyof T]>)[];\n\nexport interface RecordBatch<T extends { [key: string]: DataType } = any> {\n    concat(...others: Vector<Struct<T>>[]): Table<T>;\n    slice(begin?: number, end?: number): RecordBatch<T>;\n    clone(data: Data<Struct<T>>, children?: Vector[]): RecordBatch<T>;\n}\n\nexport class RecordBatch<T extends { [key: string]: DataType } = any>\n    extends StructVector<T>\n    implements Clonable<RecordBatch<T>>,\n               Sliceable<RecordBatch<T>>,\n               Applicative<Struct<T>, Table<T>> {\n\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(options: VectorBuilderOptions<Struct<T>, TNull>): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(options: VectorBuilderOptionsAsync<Struct<T>, TNull>): Promise<Table<T>>;\n    /** @nocollapse */\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(options: VectorBuilderOptions<Struct<T>, TNull> | VectorBuilderOptionsAsync<Struct<T>, TNull>) {\n        if (isIterable<(Struct<T>)['TValue'] | TNull>(options['values'])) {\n            return Table.from(options as VectorBuilderOptions<Struct<T>, TNull>);\n        }\n        return Table.from(options as VectorBuilderOptionsAsync<Struct<T>, TNull>);\n    }\n\n    public static new<T extends VectorMap = any>(children: T): RecordBatch<{ [P in keyof T]: T[P]['type'] }>;\n    public static new<T extends { [key: string]: DataType } = any>(children: ChildData<T>, fields?: Fields<T>): RecordBatch<T>;\n    /** @nocollapse */\n    public static new<T extends { [key: string]: DataType } = any>(...args: any[]) {\n        const [fs, xs] = selectFieldArgs<T>(args);\n        const vs = xs.filter((x): x is Vector<T[keyof T]> => x instanceof Vector);\n        return new RecordBatch(...ensureSameLengthData(new Schema<T>(fs), vs.map((x) => x.data)));\n    }\n\n    protected _schema: Schema;\n    protected _dictionaries?: Map<number, Vector>;\n\n    constructor(schema: Schema<T>, length: number, children: (Data | Vector)[]);\n    constructor(schema: Schema<T>, data: Data<Struct<T>>, children?: Vector[]);\n    constructor(...args: any[]) {\n        let data: Data<Struct<T>>;\n        let schema = args[0] as Schema<T>;\n        let children: Vector[] | undefined;\n        if (args[1] instanceof Data) {\n            [, data, children] = (args as [any, Data<Struct<T>>, Vector<T[keyof T]>[]?]);\n        } else {\n            const fields = schema.fields as Field<T[keyof T]>[];\n            const [, length, childData] = args as [any, number, Data<T[keyof T]>[]];\n            data = Data.Struct(new Struct<T>(fields), 0, length, 0, null, childData);\n        }\n        super(data, children);\n        this._schema = schema;\n    }\n\n    public clone(data: Data<Struct<T>>, children = this._children) {\n        return new RecordBatch<T>(this._schema, data, children);\n    }\n\n    public concat(...others: Vector<Struct<T>>[]): Table<T> {\n        const schema = this._schema, chunks = Chunked.flatten(this, ...others);\n        return new Table(schema, chunks.map(({ data }) => new RecordBatch(schema, data)));\n    }\n\n    public get schema() { return this._schema; }\n    public get numCols() { return this._schema.fields.length; }\n    public get dictionaries() {\n        return this._dictionaries || (this._dictionaries = DictionaryCollector.collect(this));\n    }\n\n    public select<K extends keyof T = any>(...columnNames: K[]) {\n        const nameToIndex = this._schema.fields.reduce((m, f, i) => m.set(f.name as K, i), new Map<K, number>());\n        return this.selectAt(...columnNames.map((columnName) => nameToIndex.get(columnName)!).filter((x) => x > -1));\n    }\n    public selectAt<K extends T[keyof T] = any>(...columnIndices: number[]) {\n        const schema = this._schema.selectAt(...columnIndices);\n        const childData = columnIndices.map((i) => this.data.childData[i]).filter(Boolean);\n        return new RecordBatch<{ [key: string]: K }>(schema, this.length, childData);\n    }\n}\n\n/**\n * An internal class used by the `RecordBatchReader` and `RecordBatchWriter`\n * implementations to differentiate between a stream with valid zero-length\n * RecordBatches, and a stream with a Schema message, but no RecordBatches.\n * @see https://github.com/apache/arrow/pull/4373\n * @ignore\n * @private\n */\n/* tslint:disable:class-name */\nexport class _InternalEmptyPlaceholderRecordBatch<T extends { [key: string]: DataType } = any> extends RecordBatch<T> {\n    constructor(schema: Schema<T>) {\n        super(schema, 0, schema.fields.map((f) => Data.new(f.type, 0, 0, 0)));\n    }\n}\n\n/** @ignore */\nclass DictionaryCollector extends Visitor {\n    public dictionaries = new Map<number, Vector>();\n    public static collect<T extends RecordBatch>(batch: T) {\n        return new DictionaryCollector().visit(\n            batch.data, new Struct(batch.schema.fields)\n        ).dictionaries;\n    }\n    public visit(data: Data, type: DataType) {\n        if (DataType.isDictionary(type)) {\n            return this.visitDictionary(data, type);\n        } else {\n            data.childData.forEach((child, i) =>\n                this.visit(child, type.children[i].type));\n        }\n        return this;\n    }\n    public visitDictionary(data: Data, type: Dictionary) {\n        const dictionary = data.dictionary;\n        if (dictionary && dictionary.length > 0) {\n            this.dictionaries.set(type.id, dictionary);\n        }\n        return this;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { MessageHeader } from '../enum';\nimport { Footer } from './metadata/file';\nimport { Schema, Field } from '../schema';\nimport streamAdapters from '../io/adapters';\nimport { Message } from './metadata/message';\nimport * as metadata from './metadata/message';\nimport { ArrayBufferViewInput } from '../util/buffer';\nimport { ByteStream, AsyncByteStream } from '../io/stream';\nimport { RandomAccessFile, AsyncRandomAccessFile } from '../io/file';\nimport { VectorLoader, JSONVectorLoader } from '../visitor/vectorloader';\nimport { RecordBatch, _InternalEmptyPlaceholderRecordBatch } from '../recordbatch';\nimport {\n    FileHandle,\n    ArrowJSONLike,\n    ITERATOR_DONE,\n    ReadableInterop,\n} from '../io/interfaces';\nimport {\n    MessageReader, AsyncMessageReader, JSONMessageReader,\n    checkForMagicArrowString, magicLength, magicAndPadding, magicX2AndPadding\n} from './message';\nimport {\n    isPromise,\n    isIterable, isAsyncIterable,\n    isIteratorResult, isArrowJSON,\n    isFileHandle, isFetchResponse,\n    isReadableDOMStream, isReadableNodeStream\n} from '../util/compat';\n\n/** @ignore */ export type FromArg0 = ArrowJSONLike;\n/** @ignore */ export type FromArg1 = PromiseLike<ArrowJSONLike>;\n/** @ignore */ export type FromArg2 = Iterable<ArrayBufferViewInput> | ArrayBufferViewInput;\n/** @ignore */ export type FromArg3 = PromiseLike<Iterable<ArrayBufferViewInput> | ArrayBufferViewInput>;\n/** @ignore */ export type FromArg4 = Response | NodeJS.ReadableStream | ReadableStream<ArrayBufferViewInput> | AsyncIterable<ArrayBufferViewInput>;\n/** @ignore */ export type FromArg5 = FileHandle | PromiseLike<FileHandle> | PromiseLike<FromArg4>;\n/** @ignore */ export type FromArgs = FromArg0 | FromArg1 | FromArg2 | FromArg3 | FromArg4 | FromArg5;\n\n/** @ignore */ type OpenOptions = { autoDestroy?: boolean; };\n/** @ignore */ type RecordBatchReaders<T extends { [key: string]: DataType } = any> = RecordBatchFileReader<T> | RecordBatchStreamReader<T>;\n/** @ignore */ type AsyncRecordBatchReaders<T extends { [key: string]: DataType } = any> = AsyncRecordBatchFileReader<T> | AsyncRecordBatchStreamReader<T>;\n/** @ignore */ type RecordBatchFileReaders<T extends { [key: string]: DataType } = any> = RecordBatchFileReader<T> | AsyncRecordBatchFileReader<T>;\n/** @ignore */ type RecordBatchStreamReaders<T extends { [key: string]: DataType } = any> = RecordBatchStreamReader<T> | AsyncRecordBatchStreamReader<T>;\n\nexport class RecordBatchReader<T extends { [key: string]: DataType } = any> extends ReadableInterop<RecordBatch<T>> {\n\n    protected _impl: RecordBatchReaderImpls<T>;\n    protected constructor(impl: RecordBatchReaderImpls<T>) {\n        super();\n        this._impl = impl;\n    }\n\n    public get closed() { return this._impl.closed; }\n    public get schema() { return this._impl.schema; }\n    public get autoDestroy() { return this._impl.autoDestroy; }\n    public get dictionaries() { return this._impl.dictionaries; }\n    public get numDictionaries() { return this._impl.numDictionaries; }\n    public get numRecordBatches() { return this._impl.numRecordBatches; }\n    public get footer() { return this._impl.isFile() ? this._impl.footer : null; }\n\n    public isSync(): this is RecordBatchReaders<T> { return this._impl.isSync(); }\n    public isAsync(): this is AsyncRecordBatchReaders<T> { return this._impl.isAsync(); }\n    public isFile(): this is RecordBatchFileReaders<T> { return this._impl.isFile(); }\n    public isStream(): this is RecordBatchStreamReaders<T> { return this._impl.isStream(); }\n\n    public next() {\n        return this._impl.next();\n    }\n    public throw(value?: any) {\n        return this._impl.throw(value);\n    }\n    public return(value?: any) {\n        return this._impl.return(value);\n    }\n    public cancel() {\n        return this._impl.cancel();\n    }\n    public reset(schema?: Schema<T> | null): this {\n        this._impl.reset(schema);\n        this._DOMStream = undefined;\n        this._nodeStream = undefined;\n        return this;\n    }\n    public open(options?: OpenOptions) {\n        const opening = this._impl.open(options);\n        return isPromise(opening) ? opening.then(() => this) : this;\n    }\n    public readRecordBatch(index: number): RecordBatch<T> | null | Promise<RecordBatch<T> | null> {\n        return this._impl.isFile() ? this._impl.readRecordBatch(index) : null;\n    }\n    public [Symbol.iterator](): IterableIterator<RecordBatch<T>> {\n        return (<IterableIterator<RecordBatch<T>>> this._impl)[Symbol.iterator]();\n    }\n    public [Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>> {\n        return (<AsyncIterableIterator<RecordBatch<T>>> this._impl)[Symbol.asyncIterator]();\n    }\n    public toDOMStream() {\n        return streamAdapters.toDOMStream<RecordBatch<T>>(\n            (this.isSync()\n                ? { [Symbol.iterator]: () => this } as Iterable<RecordBatch<T>>\n                : { [Symbol.asyncIterator]: () => this } as AsyncIterable<RecordBatch<T>>));\n    }\n    public toNodeStream() {\n        return streamAdapters.toNodeStream<RecordBatch<T>>(\n            (this.isSync()\n                ? { [Symbol.iterator]: () => this } as Iterable<RecordBatch<T>>\n                : { [Symbol.asyncIterator]: () => this } as AsyncIterable<RecordBatch<T>>),\n            { objectMode: true });\n    }\n\n    /** @nocollapse */\n    // @ts-ignore\n    public static throughNode(options?: import('stream').DuplexOptions & { autoDestroy: boolean }): import('stream').Duplex {\n        throw new Error(`\"throughNode\" not available in this environment`);\n    }\n    /** @nocollapse */\n    public static throughDOM<T extends { [key: string]: DataType }>(\n        // @ts-ignore\n        writableStrategy?: ByteLengthQueuingStrategy,\n        // @ts-ignore\n        readableStrategy?: { autoDestroy: boolean }\n    ): { writable: WritableStream<Uint8Array>, readable: ReadableStream<RecordBatch<T>> } {\n        throw new Error(`\"throughDOM\" not available in this environment`);\n    }\n\n    public static from<T extends RecordBatchReader>(source: T): T;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg0): RecordBatchStreamReader<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg1): Promise<RecordBatchStreamReader<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg2): RecordBatchFileReader<T> | RecordBatchStreamReader<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg3): Promise<RecordBatchFileReader<T> | RecordBatchStreamReader<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg4): Promise<RecordBatchFileReader<T> | AsyncRecordBatchReaders<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg5): Promise<AsyncRecordBatchFileReader<T> | AsyncRecordBatchStreamReader<T>>;\n    /** @nocollapse */\n    public static from<T extends { [key: string]: DataType } = any>(source: any) {\n        if (source instanceof RecordBatchReader) {\n            return source;\n        } else if (isArrowJSON(source)) {\n            return fromArrowJSON<T>(source);\n        } else if (isFileHandle(source)) {\n            return fromFileHandle<T>(source);\n        } else if (isPromise<any>(source)) {\n            return (async () => await RecordBatchReader.from<any>(await source))();\n        } else if (isFetchResponse(source) || isReadableDOMStream(source) || isReadableNodeStream(source) || isAsyncIterable(source)) {\n            return fromAsyncByteStream<T>(new AsyncByteStream(source));\n        }\n        return fromByteStream<T>(new ByteStream(source));\n    }\n\n    public static readAll<T extends RecordBatchReader>(source: T): T extends RecordBatchReaders ? IterableIterator<T> : AsyncIterableIterator<T>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg0): IterableIterator<RecordBatchStreamReader<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg1): AsyncIterableIterator<RecordBatchStreamReader<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg2): IterableIterator<RecordBatchFileReader<T> | RecordBatchStreamReader<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg3): AsyncIterableIterator<RecordBatchFileReader<T> | RecordBatchStreamReader<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg4): AsyncIterableIterator<RecordBatchFileReader<T> | AsyncRecordBatchReaders<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg5): AsyncIterableIterator<AsyncRecordBatchFileReader<T> | AsyncRecordBatchStreamReader<T>>;\n    /** @nocollapse */\n    public static readAll<T extends { [key: string]: DataType } = any>(source: any) {\n        if (source instanceof RecordBatchReader) {\n            return source.isSync() ? readAllSync(source) : readAllAsync(source as AsyncRecordBatchReaders<T>);\n        } else if (isArrowJSON(source) || ArrayBuffer.isView(source) || isIterable<ArrayBufferViewInput>(source) || isIteratorResult(source)) {\n            return readAllSync<T>(source) as IterableIterator<RecordBatchReaders<T>>;\n        }\n        return readAllAsync<T>(source) as AsyncIterableIterator<RecordBatchReaders<T> | AsyncRecordBatchReaders<T>>;\n    }\n}\n\n//\n// Since TS is a structural type system, we define the following subclass stubs\n// so that concrete types exist to associate with with the interfaces below.\n//\n// The implementation for each RecordBatchReader is hidden away in the set of\n// `RecordBatchReaderImpl` classes in the second half of this file. This allows\n// us to export a single RecordBatchReader class, and swap out the impl based\n// on the io primitives or underlying arrow (JSON, file, or stream) at runtime.\n//\n// Async/await makes our job a bit harder, since it forces everything to be\n// either fully sync or fully async. This is why the logic for the reader impls\n// has been duplicated into both sync and async variants. Since the RBR\n// delegates to its impl, an RBR with an AsyncRecordBatchFileReaderImpl for\n// example will return async/await-friendly Promises, but one with a (sync)\n// RecordBatchStreamReaderImpl will always return values. Nothing should be\n// different about their logic, aside from the async handling. This is also why\n// this code looks highly structured, as it should be nearly identical and easy\n// to follow.\n//\n\n/** @ignore */\nexport class RecordBatchStreamReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\n    constructor(protected _impl: RecordBatchStreamReaderImpl<T>) { super (_impl); }\n    public [Symbol.iterator]() { return (this._impl as IterableIterator<RecordBatch<T>>)[Symbol.iterator](); }\n    public async *[Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>> { yield* this[Symbol.iterator](); }\n}\n/** @ignore */\nexport class AsyncRecordBatchStreamReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\n    constructor(protected _impl: AsyncRecordBatchStreamReaderImpl<T>) { super (_impl); }\n    public [Symbol.iterator](): IterableIterator<RecordBatch<T>> { throw new Error(`AsyncRecordBatchStreamReader is not Iterable`); }\n    public [Symbol.asyncIterator]() { return (this._impl as AsyncIterableIterator<RecordBatch<T>>)[Symbol.asyncIterator](); }\n}\n/** @ignore */\nexport class RecordBatchFileReader<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReader<T> {\n    constructor(protected _impl: RecordBatchFileReaderImpl<T>) { super (_impl); }\n}\n/** @ignore */\nexport class AsyncRecordBatchFileReader<T extends { [key: string]: DataType } = any> extends AsyncRecordBatchStreamReader<T> {\n    constructor(protected _impl: AsyncRecordBatchFileReaderImpl<T>) { super (_impl); }\n}\n\n//\n// Now override the return types for each sync/async RecordBatchReader variant\n//\n\n/** @ignore */\nexport interface RecordBatchStreamReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\n    open(options?: OpenOptions | undefined): this;\n    cancel(): void;\n    throw(value?: any): IteratorResult<any>;\n    return(value?: any): IteratorResult<any>;\n    next(value?: any): IteratorResult<RecordBatch<T>>;\n}\n\n/** @ignore */\nexport interface AsyncRecordBatchStreamReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\n    open(options?: OpenOptions | undefined): Promise<this>;\n    cancel(): Promise<void>;\n    throw(value?: any): Promise<IteratorResult<any>>;\n    return(value?: any): Promise<IteratorResult<any>>;\n    next(value?: any): Promise<IteratorResult<RecordBatch<T>>>;\n}\n\n/** @ignore */\nexport interface RecordBatchFileReader<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReader<T> {\n    footer: Footer;\n    readRecordBatch(index: number): RecordBatch<T> | null;\n}\n\n/** @ignore */\nexport interface AsyncRecordBatchFileReader<T extends { [key: string]: DataType } = any> extends AsyncRecordBatchStreamReader<T> {\n    footer: Footer;\n    readRecordBatch(index: number): Promise<RecordBatch<T> | null>;\n}\n\n/** @ignore */\ntype RecordBatchReaderImpls<T extends { [key: string]: DataType } = any> =\n     RecordBatchJSONReaderImpl<T> |\n     RecordBatchFileReaderImpl<T> |\n     RecordBatchStreamReaderImpl<T> |\n     AsyncRecordBatchFileReaderImpl<T> |\n     AsyncRecordBatchStreamReaderImpl<T>;\n\n/** @ignore */\ninterface RecordBatchReaderImpl<T extends { [key: string]: DataType } = any> {\n\n    closed: boolean;\n    schema: Schema<T>;\n    autoDestroy: boolean;\n    dictionaries: Map<number, Vector>;\n\n    isFile(): this is RecordBatchFileReaders<T>;\n    isStream(): this is RecordBatchStreamReaders<T>;\n    isSync(): this is RecordBatchReaders<T>;\n    isAsync(): this is AsyncRecordBatchReaders<T>;\n\n    reset(schema?: Schema<T> | null): this;\n}\n\n/** @ignore */\ninterface RecordBatchStreamReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchReaderImpl<T> {\n\n    open(options?: OpenOptions): this;\n    cancel(): void;\n\n    throw(value?: any): IteratorResult<any>;\n    return(value?: any): IteratorResult<any>;\n    next(value?: any): IteratorResult<RecordBatch<T>>;\n\n    [Symbol.iterator](): IterableIterator<RecordBatch<T>>;\n}\n\n/** @ignore */\ninterface AsyncRecordBatchStreamReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchReaderImpl<T> {\n\n    open(options?: OpenOptions): Promise<this>;\n    cancel(): Promise<void>;\n\n    throw(value?: any): Promise<IteratorResult<any>>;\n    return(value?: any): Promise<IteratorResult<any>>;\n    next(value?: any): Promise<IteratorResult<RecordBatch<T>>>;\n\n    [Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>>;\n}\n\n/** @ignore */\ninterface RecordBatchFileReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReaderImpl<T> {\n    readRecordBatch(index: number): RecordBatch<T> | null;\n}\n\n/** @ignore */\ninterface AsyncRecordBatchFileReaderImpl<T extends { [key: string]: DataType } = any> extends AsyncRecordBatchStreamReaderImpl<T> {\n    readRecordBatch(index: number): Promise<RecordBatch<T> | null>;\n}\n\n/** @ignore */\nabstract class RecordBatchReaderImpl<T extends { [key: string]: DataType } = any> implements RecordBatchReaderImpl<T> {\n\n    // @ts-ignore\n    public schema: Schema;\n    public closed = false;\n    public autoDestroy = true;\n    public dictionaries: Map<number, Vector>;\n\n    protected _dictionaryIndex = 0;\n    protected _recordBatchIndex = 0;\n    public get numDictionaries() { return this._dictionaryIndex; }\n    public get numRecordBatches() { return this._recordBatchIndex; }\n\n    constructor(dictionaries = new Map<number, Vector>()) {\n        this.dictionaries = dictionaries;\n    }\n\n    public isSync(): this is RecordBatchReaders<T> { return false; }\n    public isAsync(): this is AsyncRecordBatchReaders<T> { return false; }\n    public isFile(): this is RecordBatchFileReaders<T> { return false; }\n    public isStream(): this is RecordBatchStreamReaders<T> { return false; }\n\n    public reset(schema?: Schema<T> | null) {\n        this._dictionaryIndex = 0;\n        this._recordBatchIndex = 0;\n        this.schema = <any> schema;\n        this.dictionaries = new Map();\n        return this;\n    }\n\n    protected _loadRecordBatch(header: metadata.RecordBatch, body: any) {\n        return new RecordBatch<T>(this.schema, header.length, this._loadVectors(header, body, this.schema.fields));\n    }\n    protected _loadDictionaryBatch(header: metadata.DictionaryBatch, body: any) {\n        const { id, isDelta, data } = header;\n        const { dictionaries, schema } = this;\n        const dictionary = dictionaries.get(id);\n        if (isDelta || !dictionary) {\n            const type = schema.dictionaries.get(id)!;\n            return (dictionary && isDelta ? dictionary.concat(\n                Vector.new(this._loadVectors(data, body, [type])[0])) :\n                Vector.new(this._loadVectors(data, body, [type])[0])) as Vector;\n        }\n        return dictionary;\n    }\n    protected _loadVectors(header: metadata.RecordBatch, body: any, types: (Field | DataType)[]) {\n        return new VectorLoader(body, header.nodes, header.buffers, this.dictionaries).visitMany(types);\n    }\n}\n\n/** @ignore */\nclass RecordBatchStreamReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchReaderImpl<T> implements IterableIterator<RecordBatch<T>> {\n\n    protected _reader: MessageReader;\n    protected _handle: ByteStream | ArrowJSONLike;\n\n    constructor(source: ByteStream | ArrowJSONLike, dictionaries?: Map<number, Vector>) {\n        super(dictionaries);\n        this._reader = !isArrowJSON(source)\n            ? new MessageReader(this._handle = source)\n            : new JSONMessageReader(this._handle = source);\n    }\n\n    public isSync(): this is RecordBatchReaders<T> { return true; }\n    public isStream(): this is RecordBatchStreamReaders<T> { return true; }\n    public [Symbol.iterator](): IterableIterator<RecordBatch<T>> {\n        return this as IterableIterator<RecordBatch<T>>;\n    }\n    public cancel() {\n        if (!this.closed && (this.closed = true)) {\n            this.reset()._reader.return();\n            this._reader = <any> null;\n            this.dictionaries = <any> null;\n        }\n    }\n    public open(options?: OpenOptions) {\n        if (!this.closed) {\n            this.autoDestroy = shouldAutoDestroy(this, options);\n            if (!(this.schema || (this.schema = this._reader.readSchema()!))) {\n                this.cancel();\n            }\n        }\n        return this;\n    }\n    public throw(value?: any): IteratorResult<any> {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return this.reset()._reader.throw(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public return(value?: any): IteratorResult<any> {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return this.reset()._reader.return(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public next(): IteratorResult<RecordBatch<T>> {\n        if (this.closed) { return ITERATOR_DONE; }\n        let message: Message | null, { _reader: reader } = this;\n        while (message = this._readNextMessageAndValidate()) {\n            if (message.isSchema()) {\n                this.reset(message.header());\n            } else if (message.isRecordBatch()) {\n                this._recordBatchIndex++;\n                const header = message.header();\n                const buffer = reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return { done: false, value: recordBatch };\n            } else if (message.isDictionaryBatch()) {\n                this._dictionaryIndex++;\n                const header = message.header();\n                const buffer = reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n        if (this.schema && this._recordBatchIndex === 0) {\n            this._recordBatchIndex++;\n            return { done: false, value: new _InternalEmptyPlaceholderRecordBatch<T>(this.schema) };\n        }\n        return this.return();\n    }\n    protected _readNextMessageAndValidate<T extends MessageHeader>(type?: T | null) {\n        return this._reader.readMessage<T>(type);\n    }\n}\n\n/** @ignore */\nclass AsyncRecordBatchStreamReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchReaderImpl<T> implements AsyncIterableIterator<RecordBatch<T>> {\n\n    protected _handle: AsyncByteStream;\n    protected _reader: AsyncMessageReader;\n\n    constructor(source: AsyncByteStream, dictionaries?: Map<number, Vector>) {\n        super(dictionaries);\n        this._reader = new AsyncMessageReader(this._handle = source);\n    }\n    public isAsync(): this is AsyncRecordBatchReaders<T> { return true; }\n    public isStream(): this is RecordBatchStreamReaders<T> { return true; }\n    public [Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>> {\n        return this as AsyncIterableIterator<RecordBatch<T>>;\n    }\n    public async cancel() {\n        if (!this.closed && (this.closed = true)) {\n            await this.reset()._reader.return();\n            this._reader = <any> null;\n            this.dictionaries = <any> null;\n        }\n    }\n    public async open(options?: OpenOptions) {\n        if (!this.closed) {\n            this.autoDestroy = shouldAutoDestroy(this, options);\n            if (!(this.schema || (this.schema = (await this._reader.readSchema())!))) {\n                await this.cancel();\n            }\n        }\n        return this;\n    }\n    public async throw(value?: any): Promise<IteratorResult<any>> {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return await this.reset()._reader.throw(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public async return(value?: any): Promise<IteratorResult<any>> {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return await this.reset()._reader.return(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public async next() {\n        if (this.closed) { return ITERATOR_DONE; }\n        let message: Message | null, { _reader: reader } = this;\n        while (message = await this._readNextMessageAndValidate()) {\n            if (message.isSchema()) {\n                await this.reset(message.header());\n            } else if (message.isRecordBatch()) {\n                this._recordBatchIndex++;\n                const header = message.header();\n                const buffer = await reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return { done: false, value: recordBatch };\n            } else if (message.isDictionaryBatch()) {\n                this._dictionaryIndex++;\n                const header = message.header();\n                const buffer = await reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n        if (this.schema && this._recordBatchIndex === 0) {\n            this._recordBatchIndex++;\n            return { done: false, value: new _InternalEmptyPlaceholderRecordBatch<T>(this.schema) };\n        }\n        return await this.return();\n    }\n    protected async _readNextMessageAndValidate<T extends MessageHeader>(type?: T | null) {\n        return await this._reader.readMessage<T>(type);\n    }\n}\n\n/** @ignore */\nclass RecordBatchFileReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReaderImpl<T> {\n\n    // @ts-ignore\n    protected _footer?: Footer;\n    // @ts-ignore\n    protected _handle: RandomAccessFile;\n    public get footer() { return this._footer!; }\n    public get numDictionaries() { return this._footer ? this._footer.numDictionaries : 0; }\n    public get numRecordBatches() { return this._footer ? this._footer.numRecordBatches : 0; }\n\n    constructor(source: RandomAccessFile | ArrayBufferViewInput, dictionaries?: Map<number, Vector>) {\n        super(source instanceof RandomAccessFile ? source : new RandomAccessFile(source), dictionaries);\n    }\n    public isSync(): this is RecordBatchReaders<T> { return true; }\n    public isFile(): this is RecordBatchFileReaders<T> { return true; }\n    public open(options?: OpenOptions) {\n        if (!this.closed && !this._footer) {\n            this.schema = (this._footer = this._readFooter()).schema;\n            for (const block of this._footer.dictionaryBatches()) {\n                block && this._readDictionaryBatch(this._dictionaryIndex++);\n            }\n        }\n        return super.open(options);\n    }\n    public readRecordBatch(index: number) {\n        if (this.closed) { return null; }\n        if (!this._footer) { this.open(); }\n        const block = this._footer && this._footer.getRecordBatch(index);\n        if (block && this._handle.seek(block.offset)) {\n            const message = this._reader.readMessage(MessageHeader.RecordBatch);\n            if (message && message.isRecordBatch()) {\n                const header = message.header();\n                const buffer = this._reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return recordBatch;\n            }\n        }\n        return null;\n    }\n    protected _readDictionaryBatch(index: number) {\n        const block = this._footer && this._footer.getDictionaryBatch(index);\n        if (block && this._handle.seek(block.offset)) {\n            const message = this._reader.readMessage(MessageHeader.DictionaryBatch);\n            if (message && message.isDictionaryBatch()) {\n                const header = message.header();\n                const buffer = this._reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n    }\n    protected _readFooter() {\n        const { _handle } = this;\n        const offset = _handle.size - magicAndPadding;\n        const length = _handle.readInt32(offset);\n        const buffer = _handle.readAt(offset - length, length);\n        return Footer.decode(buffer);\n    }\n    protected _readNextMessageAndValidate<T extends MessageHeader>(type?: T | null): Message<T> | null {\n        if (!this._footer) { this.open(); }\n        if (this._footer && this._recordBatchIndex < this.numRecordBatches) {\n            const block = this._footer && this._footer.getRecordBatch(this._recordBatchIndex);\n            if (block && this._handle.seek(block.offset)) {\n                return this._reader.readMessage(type);\n            }\n        }\n        return null;\n    }\n}\n\n/** @ignore */\nclass AsyncRecordBatchFileReaderImpl<T extends { [key: string]: DataType } = any> extends AsyncRecordBatchStreamReaderImpl<T>\n    implements AsyncRecordBatchFileReaderImpl<T> {\n\n    protected _footer?: Footer;\n    // @ts-ignore\n    protected _handle: AsyncRandomAccessFile;\n    public get footer() { return this._footer!; }\n    public get numDictionaries() { return this._footer ? this._footer.numDictionaries : 0; }\n    public get numRecordBatches() { return this._footer ? this._footer.numRecordBatches : 0; }\n\n    constructor(source: FileHandle, byteLength?: number, dictionaries?: Map<number, Vector>);\n    constructor(source: FileHandle | AsyncRandomAccessFile, dictionaries?: Map<number, Vector>);\n    constructor(source: FileHandle | AsyncRandomAccessFile, ...rest: any[]) {\n        const byteLength = typeof rest[0] !== 'number' ? <number> rest.shift() : undefined;\n        const dictionaries = rest[0] instanceof Map ? <Map<number, Vector>> rest.shift() : undefined;\n        super(source instanceof AsyncRandomAccessFile ? source : new AsyncRandomAccessFile(source, byteLength), dictionaries);\n    }\n    public isFile(): this is RecordBatchFileReaders<T> { return true; }\n    public isAsync(): this is AsyncRecordBatchReaders<T> { return true; }\n    public async open(options?: OpenOptions) {\n        if (!this.closed && !this._footer) {\n            this.schema = (this._footer = await this._readFooter()).schema;\n            for (const block of this._footer.dictionaryBatches()) {\n                block && await this._readDictionaryBatch(this._dictionaryIndex++);\n            }\n        }\n        return await super.open(options);\n    }\n    public async readRecordBatch(index: number) {\n        if (this.closed) { return null; }\n        if (!this._footer) { await this.open(); }\n        const block = this._footer && this._footer.getRecordBatch(index);\n        if (block && (await this._handle.seek(block.offset))) {\n            const message = await this._reader.readMessage(MessageHeader.RecordBatch);\n            if (message && message.isRecordBatch()) {\n                const header = message.header();\n                const buffer = await this._reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return recordBatch;\n            }\n        }\n        return null;\n    }\n    protected async _readDictionaryBatch(index: number) {\n        const block = this._footer && this._footer.getDictionaryBatch(index);\n        if (block && (await this._handle.seek(block.offset))) {\n            const message = await this._reader.readMessage(MessageHeader.DictionaryBatch);\n            if (message && message.isDictionaryBatch()) {\n                const header = message.header();\n                const buffer = await this._reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n    }\n    protected async _readFooter() {\n        const { _handle } = this;\n        _handle._pending && await _handle._pending;\n        const offset = _handle.size - magicAndPadding;\n        const length = await _handle.readInt32(offset);\n        const buffer = await _handle.readAt(offset - length, length);\n        return Footer.decode(buffer);\n    }\n    protected async _readNextMessageAndValidate<T extends MessageHeader>(type?: T | null): Promise<Message<T> | null> {\n        if (!this._footer) { await this.open(); }\n        if (this._footer && this._recordBatchIndex < this.numRecordBatches) {\n            const block = this._footer.getRecordBatch(this._recordBatchIndex);\n            if (block && await this._handle.seek(block.offset)) {\n                return await this._reader.readMessage(type);\n            }\n        }\n        return null;\n    }\n}\n\n/** @ignore */\nclass RecordBatchJSONReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReaderImpl<T> {\n    constructor(source: ArrowJSONLike, dictionaries?: Map<number, Vector>) {\n        super(source, dictionaries);\n    }\n    protected _loadVectors(header: metadata.RecordBatch, body: any, types: (Field | DataType)[]) {\n        return new JSONVectorLoader(body, header.nodes, header.buffers, this.dictionaries).visitMany(types);\n    }\n}\n\n//\n// Define some helper functions and static implementations down here. There's\n// a bit of branching in the static methods that can lead to the same routines\n// being executed, so we've broken those out here for readability.\n//\n\n/** @ignore */\nfunction shouldAutoDestroy(self: { autoDestroy: boolean }, options?: OpenOptions) {\n    return options && (typeof options['autoDestroy'] === 'boolean') ? options['autoDestroy'] : self['autoDestroy'];\n}\n\n/** @ignore */\nfunction* readAllSync<T extends { [key: string]: DataType } = any>(source: RecordBatchReaders<T> | FromArg0 | FromArg2) {\n    const reader = RecordBatchReader.from<T>(<any> source) as RecordBatchReaders<T>;\n    try {\n        if (!reader.open({ autoDestroy: false }).closed) {\n            do { yield reader; } while (!(reader.reset().open()).closed);\n        }\n    } finally { reader.cancel(); }\n}\n\n/** @ignore */\nasync function* readAllAsync<T extends { [key: string]: DataType } = any>(source: AsyncRecordBatchReaders<T> | FromArg1 | FromArg3 | FromArg4 | FromArg5) {\n    const reader = await RecordBatchReader.from<T>(<any> source) as RecordBatchReader<T>;\n    try {\n        if (!(await reader.open({ autoDestroy: false })).closed) {\n            do { yield reader; } while (!(await reader.reset().open()).closed);\n        }\n    } finally { await reader.cancel(); }\n}\n\n/** @ignore */\nfunction fromArrowJSON<T extends { [key: string]: DataType }>(source: ArrowJSONLike) {\n    return new RecordBatchStreamReader(new RecordBatchJSONReaderImpl<T>(source));\n}\n\n/** @ignore */\nfunction fromByteStream<T extends { [key: string]: DataType }>(source: ByteStream) {\n    const bytes = source.peek((magicLength + 7) & ~7);\n    return bytes && bytes.byteLength >= 4 ? !checkForMagicArrowString(bytes)\n        ? new RecordBatchStreamReader(new RecordBatchStreamReaderImpl<T>(source))\n        : new RecordBatchFileReader(new RecordBatchFileReaderImpl<T>(source.read()))\n        : new RecordBatchStreamReader(new RecordBatchStreamReaderImpl<T>(function*(): any {}()));\n}\n\n/** @ignore */\nasync function fromAsyncByteStream<T extends { [key: string]: DataType }>(source: AsyncByteStream) {\n    const bytes = await source.peek((magicLength + 7) & ~7);\n    return bytes && bytes.byteLength >= 4 ? !checkForMagicArrowString(bytes)\n        ? new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl<T>(source))\n        : new RecordBatchFileReader(new RecordBatchFileReaderImpl<T>(await source.read()))\n        : new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl<T>(async function*(): any {}()));\n}\n\n/** @ignore */\nasync function fromFileHandle<T extends { [key: string]: DataType }>(source: FileHandle) {\n    const { size } = await source.stat();\n    const file = new AsyncRandomAccessFile(source, size);\n    if (size >= magicX2AndPadding) {\n        if (checkForMagicArrowString(await file.readAt(0, (magicLength + 7) & ~7))) {\n            return new AsyncRecordBatchFileReader(new AsyncRecordBatchFileReaderImpl<T>(file));\n        }\n    }\n    return new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl<T>(file));\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { toUint8Array } from '../../util/buffer';\nimport { ReadableDOMStreamOptions } from '../../io/interfaces';\nimport { isIterable, isAsyncIterable } from '../../util/compat';\n\n/** @ignore */\nexport function toDOMStream<T>(source: Iterable<T> | AsyncIterable<T>, options?: ReadableDOMStreamOptions): ReadableStream<T> {\n    if (isAsyncIterable<T>(source)) { return asyncIterableAsReadableDOMStream(source, options); }\n    if (isIterable<T>(source)) { return iterableAsReadableDOMStream(source, options); }\n    /* istanbul ignore next */\n    throw new Error(`toDOMStream() must be called with an Iterable or AsyncIterable`);\n}\n\n/** @ignore */\nfunction iterableAsReadableDOMStream<T>(source: Iterable<T>, options?: ReadableDOMStreamOptions) {\n\n    let it: Iterator<T> | null = null;\n    const bm = (options && options.type === 'bytes') || false;\n    const hwm = options && options.highWaterMark || (2 ** 24);\n\n    return new ReadableStream<T>({\n        ...options as any,\n        start(controller) { next(controller, it || (it = source[Symbol.iterator]())); },\n        pull(controller) { it ? (next(controller, it)) : controller.close(); },\n        cancel() { (it && (it.return && it.return()) || true) && (it = null); }\n    }, { highWaterMark: bm ? hwm : undefined, ...options });\n\n    function next(controller: ReadableStreamDefaultController<T>, it: Iterator<T>) {\n        let buf: Uint8Array;\n        let r: IteratorResult<T> | null = null;\n        let size = controller.desiredSize || null;\n        while (!(r = it.next(bm ? size : null)).done) {\n            if (ArrayBuffer.isView(r.value) && (buf = toUint8Array(r.value))) {\n                size != null && bm && (size = size - buf.byteLength + 1);\n                r.value = <any> buf;\n            }\n            controller.enqueue(r.value);\n            if (size != null && --size <= 0) { return; }\n        }\n        controller.close();\n    }\n}\n\n/** @ignore */\nfunction asyncIterableAsReadableDOMStream<T>(source: AsyncIterable<T>, options?: ReadableDOMStreamOptions) {\n\n    let it: AsyncIterator<T> | null = null;\n    const bm = (options && options.type === 'bytes') || false;\n    const hwm = options && options.highWaterMark || (2 ** 24);\n\n    return new ReadableStream<T>({\n        ...options as any,\n        async start(controller) { await next(controller, it || (it = source[Symbol.asyncIterator]())); },\n        async pull(controller) { it ? (await next(controller, it)) : controller.close(); },\n        async cancel() { (it && (it.return && await it.return()) || true) && (it = null); },\n    }, { highWaterMark: bm ? hwm : undefined, ...options });\n\n    async function next(controller: ReadableStreamDefaultController<T>, it: AsyncIterator<T>) {\n        let buf: Uint8Array;\n        let r: IteratorResult<T> | null = null;\n        let size = controller.desiredSize || null;\n        while (!(r = await it.next(bm ? size : null)).done) {\n            if (ArrayBuffer.isView(r.value) && (buf = toUint8Array(r.value))) {\n                size != null && bm && (size = size - buf.byteLength + 1);\n                r.value = <any> buf;\n            }\n            controller.enqueue(r.value);\n            if (size != null && --size <= 0) { return; }\n        }\n        controller.close();\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DataType } from '../../type';\nimport { Vector } from '../../vector';\nimport { VectorType as V } from '../../interfaces';\nimport { Builder, BuilderOptions } from '../../builder/index';\n\n/** @ignore */\nexport interface BuilderTransformOptions<T extends DataType = any, TNull = any> extends BuilderOptions<T, TNull> {\n    queueingStrategy?: 'bytes' | 'count';\n    dictionaryHashFunction?: (value: any) => string | number;\n    readableStrategy?: { highWaterMark?: number, size?: any, type?: 'bytes'; };\n    writableStrategy?: { highWaterMark?: number, size?: any, type?: 'bytes'; };\n    valueToChildTypeId?: (builder: Builder<T, TNull>, value: any, offset: number) => number;\n}\n\n/** @ignore */\nexport function builderThroughDOMStream<T extends DataType = any, TNull = any>(options: BuilderTransformOptions<T, TNull>) {\n    return new BuilderTransform(options);\n}\n\n/** @ignore */\nexport class BuilderTransform<T extends DataType = any, TNull = any> {\n\n    public readable: ReadableStream<V<T>>;\n    public writable: WritableStream<T['TValue'] | TNull>;\n    public _controller: ReadableStreamDefaultController<V<T>> | null;\n\n    private _numChunks = 0;\n    private _finished = false;\n    private _bufferedSize = 0;\n    private _builder: Builder<T, TNull>;\n    private _getSize: (builder: Builder<T, TNull>) => number;\n\n    constructor(options: BuilderTransformOptions<T, TNull>) {\n\n        // Access properties by string indexers to defeat closure compiler\n\n        const {\n            ['readableStrategy']: readableStrategy,\n            ['writableStrategy']: writableStrategy,\n            ['queueingStrategy']: queueingStrategy = 'count',\n            ...builderOptions\n        } = options;\n\n        this._controller = null;\n        this._builder = Builder.new<T, TNull>(builderOptions);\n        this._getSize = queueingStrategy !== 'bytes' ? chunkLength : chunkByteLength;\n\n        const { ['highWaterMark']: readableHighWaterMark = queueingStrategy === 'bytes' ? 2 ** 14 : 1000 } = { ...readableStrategy };\n        const { ['highWaterMark']: writableHighWaterMark = queueingStrategy === 'bytes' ? 2 ** 14 : 1000 } = { ...writableStrategy };\n\n        this['readable'] = new ReadableStream<V<T>>({\n            ['cancel']: ()  => { this._builder.clear(); },\n            ['pull']: (c) => { this._maybeFlush(this._builder, this._controller = c); },\n            ['start']: (c) => { this._maybeFlush(this._builder, this._controller = c); },\n        }, {\n            'highWaterMark': readableHighWaterMark,\n            'size': queueingStrategy !== 'bytes' ? chunkLength : chunkByteLength,\n        });\n\n        this['writable'] = new WritableStream({\n            ['abort']: () => { this._builder.clear(); },\n            ['write']: () => { this._maybeFlush(this._builder, this._controller); },\n            ['close']: () => { this._maybeFlush(this._builder.finish(), this._controller); },\n        }, {\n            'highWaterMark': writableHighWaterMark,\n            'size': (value: T['TValue'] | TNull) => this._writeValueAndReturnChunkSize(value),\n        });\n    }\n\n    private _writeValueAndReturnChunkSize(value: T['TValue'] | TNull) {\n        const bufferedSize = this._bufferedSize;\n        this._bufferedSize = this._getSize(this._builder.append(value));\n        return this._bufferedSize - bufferedSize;\n    }\n\n    private _maybeFlush(builder: Builder<T, TNull>, controller: ReadableStreamDefaultController<V<T>> | null) {\n        if (controller === null) { return; }\n        if (this._bufferedSize >= controller.desiredSize!) {\n            ++this._numChunks && this._enqueue(controller, builder.toVector());\n        }\n        if (builder.finished) {\n            if (builder.length > 0 || this._numChunks === 0) {\n                ++this._numChunks && this._enqueue(controller, builder.toVector());\n            }\n            if (!this._finished && (this._finished = true)) {\n                this._enqueue(controller, null);\n            }\n        }\n    }\n\n    private _enqueue(controller: ReadableStreamDefaultController<V<T>>, chunk: V<T> | null) {\n        this._bufferedSize = 0;\n        this._controller = null;\n        chunk === null ? controller.close() : controller.enqueue(chunk);\n    }\n}\n\n/** @ignore */ const chunkLength = <T extends DataType = any>(chunk: Vector<T> | Builder<T>) => chunk.length;\n/** @ignore */ const chunkByteLength = <T extends DataType = any>(chunk: Vector<T> | Builder<T>) => chunk.byteLength;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DataType } from '../../type';\nimport { RecordBatch } from '../../recordbatch';\nimport { AsyncByteQueue } from '../../io/stream';\nimport { RecordBatchReader } from '../../ipc/reader';\n\n/** @ignore */\nexport function recordBatchReaderThroughDOMStream<T extends { [key: string]: DataType } = any>(writableStrategy?: ByteLengthQueuingStrategy, readableStrategy?: { autoDestroy: boolean }) {\n\n    const queue = new AsyncByteQueue();\n    let reader: RecordBatchReader<T> | null = null;\n\n    const readable = new ReadableStream<RecordBatch<T>>({\n        async cancel() { await queue.close(); },\n        async start(controller) { await next(controller, reader || (reader = await open())); },\n        async pull(controller) { reader ? await next(controller, reader) : controller.close(); }\n    });\n\n    return { writable: new WritableStream(queue, { 'highWaterMark': 2 ** 14, ...writableStrategy }), readable };\n\n    async function open() {\n        return await (await RecordBatchReader.from<T>(queue)).open(readableStrategy);\n    }\n\n    async function next(controller: ReadableStreamDefaultController<RecordBatch<T>>, reader: RecordBatchReader<T>) {\n        let size = controller.desiredSize;\n        let r: IteratorResult<RecordBatch<T>> | null = null;\n        while (!(r = await reader.next()).done) {\n            controller.enqueue(r.value);\n            if (size != null && --size <= 0) {\n                return;\n            }\n        }\n        controller.close();\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DataType } from '../../type';\nimport { RecordBatch } from '../../recordbatch';\nimport { AsyncByteStream } from '../../io/stream';\nimport { RecordBatchWriter } from '../../ipc/writer';\n\n/** @ignore */\nexport function recordBatchWriterThroughDOMStream<T extends { [key: string]: DataType } = any>(\n    this: typeof RecordBatchWriter,\n    writableStrategy?: QueuingStrategy<RecordBatch<T>> & { autoDestroy: boolean },\n    readableStrategy?: { highWaterMark?: number, size?: any }\n) {\n\n    const writer = new this<T>(writableStrategy);\n    const reader = new AsyncByteStream(writer);\n    const readable = new ReadableStream({\n        type: 'bytes',\n        async cancel() { await reader.cancel(); },\n        async pull(controller) { await next(controller); },\n        async start(controller) { await next(controller); },\n    }, { 'highWaterMark': 2 ** 14, ...readableStrategy });\n\n    return { writable: new WritableStream(writer, writableStrategy), readable };\n\n    async function next(controller: ReadableStreamDefaultController<Uint8Array>) {\n        let buf: Uint8Array | null = null;\n        let size = controller.desiredSize;\n        while (buf = await reader.read(size || null)) {\n            controller.enqueue(buf);\n            if (size != null && (size -= buf.byteLength) <= 0) { return; }\n        }\n        controller.close();\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { RecordBatch } from '../recordbatch';\nimport { DictionaryVector } from '../vector/dictionary';\n\n/** @ignore */\nexport type ValueFunc<T> = (idx: number, cols: RecordBatch) => T | null;\n/** @ignore */\nexport type PredicateFunc = (idx: number, cols: RecordBatch) => boolean;\n\n/** @ignore */\nexport abstract class Value<T> {\n    eq(other: Value<T> | T): Predicate {\n        if (!(other instanceof Value)) { other = new Literal(other); }\n        return new Equals(this, other);\n    }\n    le(other: Value<T> | T): Predicate {\n        if (!(other instanceof Value)) { other = new Literal(other); }\n        return new LTeq(this, other);\n    }\n    ge(other: Value<T> | T): Predicate {\n        if (!(other instanceof Value)) { other = new Literal(other); }\n        return new GTeq(this, other);\n    }\n    lt(other: Value<T> | T): Predicate {\n        return new Not(this.ge(other));\n    }\n    gt(other: Value<T> | T): Predicate {\n        return new Not(this.le(other));\n    }\n    ne(other: Value<T> | T): Predicate {\n        return new Not(this.eq(other));\n    }\n}\n\n/** @ignore */\nexport class Literal<T= any> extends Value<T> {\n    constructor(public v: T) { super(); }\n}\n\n/** @ignore */\nexport class Col<T= any> extends Value<T> {\n    // @ts-ignore\n    public vector: Vector;\n    // @ts-ignore\n    public colidx: number;\n\n    constructor(public name: string) { super(); }\n    bind(batch: RecordBatch): (idx: number, batch?: RecordBatch) => any {\n        if (!this.colidx) {\n            // Assume column index doesn't change between calls to bind\n            //this.colidx = cols.findIndex(v => v.name.indexOf(this.name) != -1);\n            this.colidx = -1;\n            const fields = batch.schema.fields;\n            for (let idx = -1; ++idx < fields.length;) {\n                if (fields[idx].name === this.name) {\n                    this.colidx = idx;\n                    break;\n                }\n            }\n            if (this.colidx < 0) { throw new Error(`Failed to bind Col \"${this.name}\"`); }\n        }\n\n        const vec = this.vector = batch.getChildAt(this.colidx)!;\n        return (idx: number) => vec.get(idx);\n    }\n}\n\n/** @ignore */\nexport abstract class Predicate {\n    abstract bind(batch: RecordBatch): PredicateFunc;\n    and(...expr: Predicate[]): And { return new And(this, ...expr); }\n    or(...expr: Predicate[]): Or { return new Or(this, ...expr); }\n    not(): Predicate { return new Not(this); }\n}\n\n/** @ignore */\nexport abstract class ComparisonPredicate<T= any> extends Predicate {\n    constructor(public readonly left: Value<T>, public readonly right: Value<T>) {\n        super();\n    }\n\n    bind(batch: RecordBatch) {\n        if (this.left instanceof Literal) {\n            if (this.right instanceof Literal) {\n                return this._bindLitLit(batch, this.left, this.right);\n            } else { // right is a Col\n\n                return this._bindLitCol(batch, this.left, this.right as Col);\n            }\n        } else { // left is a Col\n            if (this.right instanceof Literal) {\n                return this._bindColLit(batch, this.left as Col, this.right);\n            } else { // right is a Col\n                return this._bindColCol(batch, this.left as Col, this.right as Col);\n            }\n        }\n    }\n\n    protected abstract _bindLitLit(batch: RecordBatch, left: Literal, right: Literal): PredicateFunc;\n    protected abstract _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc;\n    protected abstract _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc;\n    protected abstract _bindLitCol(batch: RecordBatch, lit: Literal, col: Col): PredicateFunc;\n}\n\n/** @ignore */\nexport abstract class CombinationPredicate extends Predicate {\n    readonly children: Predicate[];\n    constructor(...children: Predicate[]) {\n        super();\n        this.children = children;\n    }\n}\n// add children to prototype so it doesn't get mangled in es2015/umd\n(<any> CombinationPredicate.prototype).children = Object.freeze([]); // freeze for safety\n\n/** @ignore */\nexport class And extends CombinationPredicate {\n    constructor(...children: Predicate[]) {\n        // Flatten any Ands\n        children = children.reduce((accum: Predicate[], p: Predicate): Predicate[] => {\n            return accum.concat(p instanceof And ? p.children : p);\n        }, []);\n        super(...children);\n    }\n    bind(batch: RecordBatch) {\n        const bound = this.children.map((p) => p.bind(batch));\n        return (idx: number, batch: RecordBatch) => bound.every((p) => p(idx, batch));\n    }\n}\n\n/** @ignore */\nexport class Or extends CombinationPredicate {\n    constructor(...children: Predicate[]) {\n        // Flatten any Ors\n        children = children.reduce((accum: Predicate[], p: Predicate): Predicate[] => {\n            return accum.concat(p instanceof Or ? p.children : p);\n        }, []);\n        super(...children);\n    }\n    bind(batch: RecordBatch) {\n        const bound = this.children.map((p) => p.bind(batch));\n        return (idx: number, batch: RecordBatch) => bound.some((p) => p(idx, batch));\n    }\n}\n\n/** @ignore */\nexport class Equals extends ComparisonPredicate {\n    // Helpers used to cache dictionary reverse lookups between calls to bind\n    private lastDictionary: Vector|undefined;\n    private lastKey: number|undefined;\n\n    protected _bindLitLit(_batch: RecordBatch, left: Literal, right: Literal): PredicateFunc {\n        const rtrn: boolean = left.v == right.v;\n        return () => rtrn;\n    }\n\n    protected _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx: number, batch: RecordBatch) => left_func(idx, batch) == right_func(idx, batch);\n    }\n\n    protected _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc {\n        const col_func = col.bind(batch);\n        if (col.vector instanceof DictionaryVector) {\n            let key: any;\n            const vector = col.vector as DictionaryVector;\n            if (vector.dictionary !== this.lastDictionary) {\n                key = vector.reverseLookup(lit.v);\n                this.lastDictionary = vector.dictionary;\n                this.lastKey = key;\n            } else {\n                key = this.lastKey;\n            }\n\n            if (key === -1) {\n                // the value doesn't exist in the dictionary - always return\n                // false\n                // TODO: special-case of PredicateFunc that encapsulates this\n                // \"always false\" behavior. That way filtering operations don't\n                // have to bother checking\n                return () => false;\n            } else {\n                return (idx: number) => {\n                    return vector.getKey(idx) === key;\n                };\n            }\n        } else {\n            return (idx: number, cols: RecordBatch) => col_func(idx, cols) == lit.v;\n        }\n    }\n\n    protected _bindLitCol(batch: RecordBatch, lit: Literal, col: Col) {\n        // Equals is commutative\n        return this._bindColLit(batch, col, lit);\n    }\n}\n\n/** @ignore */\nexport class LTeq extends ComparisonPredicate {\n    protected _bindLitLit(_batch: RecordBatch, left: Literal, right: Literal): PredicateFunc {\n        const rtrn: boolean = left.v <= right.v;\n        return () => rtrn;\n    }\n\n    protected _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx: number, cols: RecordBatch) => left_func(idx, cols) <= right_func(idx, cols);\n    }\n\n    protected _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => col_func(idx, cols) <= lit.v;\n    }\n\n    protected _bindLitCol(batch: RecordBatch, lit: Literal, col: Col) {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => lit.v <= col_func(idx, cols);\n    }\n}\n\n/** @ignore */\nexport class GTeq extends ComparisonPredicate {\n    protected _bindLitLit(_batch: RecordBatch, left: Literal, right: Literal): PredicateFunc {\n        const rtrn: boolean = left.v >= right.v;\n        return () => rtrn;\n    }\n\n    protected _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx: number, cols: RecordBatch) => left_func(idx, cols) >= right_func(idx, cols);\n    }\n\n    protected _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => col_func(idx, cols) >= lit.v;\n    }\n\n    protected _bindLitCol(batch: RecordBatch, lit: Literal, col: Col) {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => lit.v >= col_func(idx, cols);\n    }\n}\n\n/** @ignore */\nexport class Not extends Predicate {\n    constructor(public readonly child: Predicate) {\n        super();\n    }\n\n    bind(batch: RecordBatch) {\n        const func = this.child.bind(batch);\n        return (idx: number, batch: RecordBatch) => !func(idx, batch);\n    }\n}\n\n/** @ignore */\nexport class CustomPredicate extends Predicate {\n    constructor(private next: PredicateFunc, private bind_: (batch: RecordBatch) => void) {\n        super();\n    }\n\n    bind(batch: RecordBatch) {\n        this.bind_(batch);\n        return this.next;\n    }\n}\n\nexport function lit(v: any): Value<any> { return new Literal(v); }\nexport function col(n: string): Col<any> { return new Col(n); }\nexport function and(...p: Predicate[]): And { return new And(...p); }\nexport function or(...p: Predicate[]): Or { return new Or(...p); }\nexport function custom(next: PredicateFunc, bind: (batch: RecordBatch) => void) {\n    return new CustomPredicate(next, bind);\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Table } from '../table';\nimport { Vector } from '../vector';\nimport { IntVector } from '../vector/int';\nimport { Field, Schema } from '../schema';\nimport { Predicate, Col } from './predicate';\nimport { RecordBatch } from '../recordbatch';\nimport { VectorType as V } from '../interfaces';\nimport { DataType, Int, Struct, Dictionary } from '../type';\n\n/** @ignore */\nexport type BindFunc = (batch: RecordBatch) => void;\n/** @ignore */\nexport type NextFunc = (idx: number, batch: RecordBatch) => void;\n\nTable.prototype.countBy = function(this: Table, name: Col | string) { return new DataFrame(this.chunks).countBy(name); };\nTable.prototype.scan = function(this: Table, next: NextFunc, bind?: BindFunc) { return new DataFrame(this.chunks).scan(next, bind); };\nTable.prototype.scanReverse = function(this: Table, next: NextFunc, bind?: BindFunc) { return new DataFrame(this.chunks).scanReverse(next, bind); };\nTable.prototype.filter = function(this: Table, predicate: Predicate): FilteredDataFrame { return new DataFrame(this.chunks).filter(predicate); };\n\nexport class DataFrame<T extends { [key: string]: DataType } = any> extends Table<T> {\n    public filter(predicate: Predicate): FilteredDataFrame<T> {\n        return new FilteredDataFrame<T>(this.chunks, predicate);\n    }\n    public scan(next: NextFunc, bind?: BindFunc) {\n        const batches = this.chunks, numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            if (bind) { bind(batch); }\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                next(index, batch);\n            }\n        }\n    }\n    public scanReverse(next: NextFunc, bind?: BindFunc) {\n        const batches = this.chunks, numBatches = batches.length;\n        for (let batchIndex = numBatches; --batchIndex >= 0;) {\n            // load batches\n            const batch = batches[batchIndex];\n            if (bind) { bind(batch); }\n            // yield all indices\n            for (let index = batch.length; --index >= 0;) {\n                next(index, batch);\n            }\n        }\n    }\n    public countBy(name: Col | string) {\n        const batches = this.chunks, numBatches = batches.length;\n        const count_by = typeof name === 'string' ? new Col(name) : name as Col;\n        // Assume that all dictionary batches are deltas, which means that the\n        // last record batch has the most complete dictionary\n        count_by.bind(batches[numBatches - 1]);\n        const vector = count_by.vector as V<Dictionary>;\n        if (!DataType.isDictionary(vector.type)) {\n            throw new Error('countBy currently only supports dictionary-encoded columns');\n        }\n\n        const countByteLength = Math.ceil(Math.log(vector.length) / Math.log(256));\n        const CountsArrayType = countByteLength == 4 ? Uint32Array :\n                                countByteLength >= 2 ? Uint16Array : Uint8Array;\n\n        const counts = new CountsArrayType(vector.dictionary.length);\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // rebind the countBy Col\n            count_by.bind(batch);\n            const keys = (count_by.vector as V<Dictionary>).indices;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                let key = keys.get(index);\n                if (key !== null) { counts[key]++; }\n            }\n        }\n        return new CountByResult(vector.dictionary, IntVector.from(counts));\n    }\n}\n\n/** @ignore */\nexport class CountByResult<T extends DataType = any, TCount extends Int = Int> extends Table<{ values: T,  counts: TCount }> {\n    constructor(values: Vector<T>, counts: V<TCount>) {\n        type R = { values: T, counts: TCount };\n        const schema = new Schema<R>([\n            new Field('values', values.type),\n            new Field('counts', counts.type)\n        ]);\n        super(new RecordBatch<R>(schema, counts.length, [values, counts]));\n    }\n    public toJSON(): Object {\n        const values = this.getColumnAt(0)!;\n        const counts = this.getColumnAt(1)!;\n        const result = {} as { [k: string]: number | null };\n        for (let i = -1; ++i < this.length;) {\n            result[values.get(i)] = counts.get(i);\n        }\n        return result;\n    }\n}\n\n/** @ignore */\nexport class FilteredDataFrame<T extends { [key: string]: DataType } = any> extends DataFrame<T> {\n    private _predicate: Predicate;\n    constructor (batches: RecordBatch<T>[], predicate: Predicate) {\n        super(batches);\n        this._predicate = predicate;\n    }\n    public scan(next: NextFunc, bind?: BindFunc) {\n        // inlined version of this:\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) next(idx, columns);\n        // });\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this._predicate.bind(batch);\n            let isBound = false;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) {\n                    // bind batches lazily - if predicate doesn't match anything\n                    // in the batch we don't need to call bind on the batch\n                    if (bind && !isBound) {\n                        bind(batch);\n                        isBound = true;\n                    }\n                    next(index, batch);\n                }\n            }\n        }\n    }\n    public scanReverse(next: NextFunc, bind?: BindFunc) {\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = numBatches; --batchIndex >= 0;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this._predicate.bind(batch);\n            let isBound = false;\n            // yield all indices\n            for (let index = batch.length; --index >= 0;) {\n                if (predicate(index, batch)) {\n                    // bind batches lazily - if predicate doesn't match anything\n                    // in the batch we don't need to call bind on the batch\n                    if (bind && !isBound) {\n                        bind(batch);\n                        isBound = true;\n                    }\n                    next(index, batch);\n                }\n            }\n        }\n    }\n    public count(): number {\n        // inlined version of this:\n        // let sum = 0;\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) ++sum;\n        // });\n        // return sum;\n        let sum = 0;\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this._predicate.bind(batch);\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) { ++sum; }\n            }\n        }\n        return sum;\n    }\n    public *[Symbol.iterator](): IterableIterator<Struct<T>['TValue']> {\n        // inlined version of this:\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) next(idx, columns);\n        // });\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // TODO: bind batches lazily\n            // If predicate doesn't match anything in the batch we don't need\n            // to bind the callback\n            const predicate = this._predicate.bind(batch);\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) { yield batch.get(index) as any; }\n            }\n        }\n    }\n    public filter(predicate: Predicate): FilteredDataFrame<T> {\n        return new FilteredDataFrame<T>(\n            this._chunks,\n            this._predicate.and(predicate)\n        );\n    }\n    public countBy(name: Col | string) {\n        const batches = this._chunks, numBatches = batches.length;\n        const count_by = typeof name === 'string' ? new Col(name) : name as Col;\n        // Assume that all dictionary batches are deltas, which means that the\n        // last record batch has the most complete dictionary\n        count_by.bind(batches[numBatches - 1]);\n        const vector = count_by.vector as V<Dictionary>;\n        if (!DataType.isDictionary(vector.type)) {\n            throw new Error('countBy currently only supports dictionary-encoded columns');\n        }\n\n        const countByteLength = Math.ceil(Math.log(vector.length) / Math.log(256));\n        const CountsArrayType = countByteLength == 4 ? Uint32Array :\n                                countByteLength >= 2 ? Uint16Array : Uint8Array;\n\n        const counts = new CountsArrayType(vector.dictionary.length);\n\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this._predicate.bind(batch);\n            // rebind the countBy Col\n            count_by.bind(batch);\n            const keys = (count_by.vector as V<Dictionary>).indices;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                let key = keys.get(index);\n                if (key !== null && predicate(index, batch)) { counts[key]++; }\n            }\n        }\n        return new CountByResult(vector.dictionary, IntVector.from(counts));\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nexport { ArrowType, DateUnit, IntervalUnit, MessageHeader, MetadataVersion, Precision, TimeUnit, Type, UnionMode, BufferType } from './enum';\nexport { Data } from './data';\nexport {\n    DataType,\n    Null,\n    Bool,\n    Int, Int8, Int16, Int32, Int64, Uint8, Uint16, Uint32, Uint64,\n    Float, Float16, Float32, Float64,\n    Utf8,\n    Binary,\n    FixedSizeBinary,\n    Date_, DateDay, DateMillisecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Decimal,\n    List,\n    Struct,\n    Union, DenseUnion, SparseUnion,\n    Dictionary,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    FixedSizeList,\n    Map_,\n} from './type';\n\nexport { Table } from './table';\nexport { Column } from './column';\nexport { Visitor } from './visitor';\nexport { Schema, Field } from './schema';\nexport {\n    Vector,\n    BaseVector,\n    BinaryVector,\n    BoolVector,\n    Chunked,\n    DateVector, DateDayVector, DateMillisecondVector,\n    DecimalVector,\n    DictionaryVector,\n    FixedSizeBinaryVector,\n    FixedSizeListVector,\n    FloatVector, Float16Vector, Float32Vector, Float64Vector,\n    IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector,\n    IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector,\n    ListVector,\n    MapVector,\n    NullVector,\n    StructVector,\n    TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector,\n    TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector,\n    UnionVector, DenseUnionVector, SparseUnionVector,\n    Utf8Vector,\n} from './vector/index';\n\nexport {\n    Builder,\n    BinaryBuilder,\n    BoolBuilder,\n    DateBuilder, DateDayBuilder, DateMillisecondBuilder,\n    DecimalBuilder,\n    DictionaryBuilder,\n    FixedSizeBinaryBuilder,\n    FixedSizeListBuilder,\n    FloatBuilder, Float16Builder, Float32Builder, Float64Builder,\n    IntervalBuilder, IntervalDayTimeBuilder, IntervalYearMonthBuilder,\n    IntBuilder, Int8Builder, Int16Builder, Int32Builder, Int64Builder, Uint8Builder, Uint16Builder, Uint32Builder, Uint64Builder,\n    ListBuilder,\n    MapBuilder,\n    NullBuilder,\n    StructBuilder,\n    TimestampBuilder, TimestampSecondBuilder, TimestampMillisecondBuilder, TimestampMicrosecondBuilder, TimestampNanosecondBuilder,\n    TimeBuilder, TimeSecondBuilder, TimeMillisecondBuilder, TimeMicrosecondBuilder, TimeNanosecondBuilder,\n    UnionBuilder, DenseUnionBuilder, SparseUnionBuilder,\n    Utf8Builder,\n} from './builder/index';\n\nexport { ByteStream, AsyncByteStream, AsyncByteQueue, ReadableSource, WritableSink } from './io/stream';\nexport { RecordBatchReader, RecordBatchFileReader, RecordBatchStreamReader, AsyncRecordBatchFileReader, AsyncRecordBatchStreamReader } from './ipc/reader';\nexport { RecordBatchWriter, RecordBatchFileWriter, RecordBatchStreamWriter, RecordBatchJSONWriter } from './ipc/writer';\nexport { MessageReader, AsyncMessageReader, JSONMessageReader } from './ipc/message';\nexport { Message } from './ipc/metadata/message';\nexport { RecordBatch } from './recordbatch';\nexport { ArrowJSONLike, FileHandle, Readable, Writable, ReadableWritable, ReadableDOMStreamOptions } from './io/interfaces';\nexport { DataFrame, FilteredDataFrame, CountByResult, BindFunc, NextFunc } from './compute/dataframe';\n\nimport * as util_bn_ from './util/bn';\nimport * as util_int_ from './util/int';\nimport * as util_bit_ from './util/bit';\nimport * as util_math_ from './util/math';\nimport * as util_buffer_ from './util/buffer';\nimport * as util_vector_ from './util/vector';\nimport * as predicate from './compute/predicate';\n\nexport { predicate };\n/** @ignore */\nexport const util = {\n    ...util_bn_,\n    ...util_int_,\n    ...util_bit_,\n    ...util_math_,\n    ...util_buffer_,\n    ...util_vector_\n};\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport streamAdapters from './io/adapters';\nimport { Builder } from './builder/index';\nimport { RecordBatchReader } from './ipc/reader';\nimport { RecordBatchWriter } from './ipc/writer';\nimport { toDOMStream } from './io/whatwg/iterable';\nimport { builderThroughDOMStream } from './io/whatwg/builder';\nimport { recordBatchReaderThroughDOMStream } from './io/whatwg/reader';\nimport { recordBatchWriterThroughDOMStream } from './io/whatwg/writer';\n\nstreamAdapters.toDOMStream = toDOMStream;\nBuilder['throughDOM'] = builderThroughDOMStream;\nRecordBatchReader['throughDOM'] = recordBatchReaderThroughDOMStream;\nRecordBatchWriter['throughDOM'] = recordBatchWriterThroughDOMStream;\n\nexport {\n    ArrowType, DateUnit, IntervalUnit, MessageHeader, MetadataVersion, Precision, TimeUnit, Type, UnionMode, BufferType,\n    Data,\n    DataType,\n    Null,\n    Bool,\n    Int, Int8, Int16, Int32, Int64, Uint8, Uint16, Uint32, Uint64,\n    Float, Float16, Float32, Float64,\n    Utf8,\n    Binary,\n    FixedSizeBinary,\n    Date_, DateDay, DateMillisecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Decimal,\n    List,\n    Struct,\n    Union, DenseUnion, SparseUnion,\n    Dictionary,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    FixedSizeList,\n    Map_,\n    Table,\n    Column,\n    Schema, Field,\n    Visitor,\n    Vector,\n    BaseVector,\n    BinaryVector,\n    BoolVector,\n    Chunked,\n    DateVector, DateDayVector, DateMillisecondVector,\n    DecimalVector,\n    DictionaryVector,\n    FixedSizeBinaryVector,\n    FixedSizeListVector,\n    FloatVector, Float16Vector, Float32Vector, Float64Vector,\n    IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector,\n    IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector,\n    ListVector,\n    MapVector,\n    NullVector,\n    StructVector,\n    TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector,\n    TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector,\n    UnionVector, DenseUnionVector, SparseUnionVector,\n    Utf8Vector,\n    ByteStream, AsyncByteStream, AsyncByteQueue, ReadableSource, WritableSink,\n    RecordBatchReader, RecordBatchFileReader, RecordBatchStreamReader, AsyncRecordBatchFileReader, AsyncRecordBatchStreamReader,\n    RecordBatchWriter, RecordBatchFileWriter, RecordBatchStreamWriter, RecordBatchJSONWriter,\n    MessageReader, AsyncMessageReader, JSONMessageReader,\n    Message,\n    RecordBatch,\n    ArrowJSONLike, FileHandle, Readable, Writable, ReadableWritable, ReadableDOMStreamOptions,\n    DataFrame, FilteredDataFrame, CountByResult, BindFunc, NextFunc,\n    predicate,\n    util,\n    Builder,\n    BinaryBuilder,\n    BoolBuilder,\n    DateBuilder, DateDayBuilder, DateMillisecondBuilder,\n    DecimalBuilder,\n    DictionaryBuilder,\n    FixedSizeBinaryBuilder,\n    FixedSizeListBuilder,\n    FloatBuilder, Float16Builder, Float32Builder, Float64Builder,\n    IntervalBuilder, IntervalDayTimeBuilder, IntervalYearMonthBuilder,\n    IntBuilder, Int8Builder, Int16Builder, Int32Builder, Int64Builder, Uint8Builder, Uint16Builder, Uint32Builder, Uint64Builder,\n    ListBuilder,\n    MapBuilder,\n    NullBuilder,\n    StructBuilder,\n    TimestampBuilder, TimestampSecondBuilder, TimestampMillisecondBuilder, TimestampMicrosecondBuilder, TimestampNanosecondBuilder,\n    TimeBuilder, TimeSecondBuilder, TimeMillisecondBuilder, TimeMicrosecondBuilder, TimeNanosecondBuilder,\n    UnionBuilder, DenseUnionBuilder, SparseUnionBuilder,\n    Utf8Builder,\n} from './Arrow';\n","/**\n * @license\n * Copyright 2018-2021 Streamlit Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Table, Type } from \"apache-arrow\";\nvar ArrowTable = /** @class */ (function () {\n    function ArrowTable(dataBuffer, indexBuffer, columnsBuffer, styler) {\n        var _this = this;\n        this.getCell = function (rowIndex, columnIndex) {\n            var isBlankCell = rowIndex < _this.headerRows && columnIndex < _this.headerColumns;\n            var isIndexCell = rowIndex >= _this.headerRows && columnIndex < _this.headerColumns;\n            var isColumnsCell = rowIndex < _this.headerRows && columnIndex >= _this.headerColumns;\n            if (isBlankCell) {\n                var classNames = [\"blank\"];\n                if (columnIndex > 0) {\n                    classNames.push(\"level\" + rowIndex);\n                }\n                return {\n                    type: \"blank\",\n                    classNames: classNames.join(\" \"),\n                    content: \"\"\n                };\n            }\n            else if (isColumnsCell) {\n                var dataColumnIndex = columnIndex - _this.headerColumns;\n                var classNames = [\n                    \"col_heading\",\n                    \"level\" + rowIndex,\n                    \"col\" + dataColumnIndex\n                ];\n                return {\n                    type: \"columns\",\n                    classNames: classNames.join(\" \"),\n                    content: _this.getContent(_this.columnsTable, dataColumnIndex, rowIndex)\n                };\n            }\n            else if (isIndexCell) {\n                var dataRowIndex = rowIndex - _this.headerRows;\n                var classNames = [\n                    \"row_heading\",\n                    \"level\" + columnIndex,\n                    \"row\" + dataRowIndex\n                ];\n                return {\n                    type: \"index\",\n                    id: \"T_\" + _this.uuid + \"level\" + columnIndex + \"_row\" + dataRowIndex,\n                    classNames: classNames.join(\" \"),\n                    content: _this.getContent(_this.indexTable, dataRowIndex, columnIndex)\n                };\n            }\n            else {\n                var dataRowIndex = rowIndex - _this.headerRows;\n                var dataColumnIndex = columnIndex - _this.headerColumns;\n                var classNames = [\n                    \"data\",\n                    \"row\" + dataRowIndex,\n                    \"col\" + dataColumnIndex\n                ];\n                var content = _this.styler\n                    ? _this.getContent(_this.styler.displayValuesTable, dataRowIndex, dataColumnIndex)\n                    : _this.getContent(_this.dataTable, dataRowIndex, dataColumnIndex);\n                return {\n                    type: \"data\",\n                    id: \"T_\" + _this.uuid + \"row\" + dataRowIndex + \"_col\" + dataColumnIndex,\n                    classNames: classNames.join(\" \"),\n                    content: content\n                };\n            }\n        };\n        this.getContent = function (table, rowIndex, columnIndex) {\n            var column = table.getColumnAt(columnIndex);\n            if (column === null) {\n                return \"\";\n            }\n            var columnTypeId = _this.getColumnTypeId(table, columnIndex);\n            switch (columnTypeId) {\n                case Type.Timestamp: {\n                    return _this.nanosToDate(column.get(rowIndex));\n                }\n                default: {\n                    return column.get(rowIndex);\n                }\n            }\n        };\n        this.dataTable = Table.from(dataBuffer);\n        this.indexTable = Table.from(indexBuffer);\n        this.columnsTable = Table.from(columnsBuffer);\n        this.styler = styler\n            ? {\n                caption: styler.caption,\n                displayValuesTable: Table.from(styler.displayValues),\n                styles: styler.styles,\n                uuid: styler.uuid\n            }\n            : undefined;\n    }\n    Object.defineProperty(ArrowTable.prototype, \"rows\", {\n        get: function () {\n            return this.indexTable.length + this.columnsTable.numCols;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"columns\", {\n        get: function () {\n            return this.indexTable.numCols + this.columnsTable.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"headerRows\", {\n        get: function () {\n            return this.rows - this.dataRows;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"headerColumns\", {\n        get: function () {\n            return this.columns - this.dataColumns;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"dataRows\", {\n        get: function () {\n            return this.dataTable.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"dataColumns\", {\n        get: function () {\n            return this.dataTable.numCols;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"uuid\", {\n        get: function () {\n            return this.styler && this.styler.uuid;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"caption\", {\n        get: function () {\n            return this.styler && this.styler.caption;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"styles\", {\n        get: function () {\n            return this.styler && this.styler.styles;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"table\", {\n        get: function () {\n            return this.dataTable;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"index\", {\n        get: function () {\n            return this.indexTable;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"columnTable\", {\n        get: function () {\n            return this.columnsTable;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Serialize arrow table.\n     */\n    ArrowTable.prototype.serialize = function () {\n        return {\n            data: this.dataTable.serialize(),\n            index: this.indexTable.serialize(),\n            columns: this.columnsTable.serialize()\n        };\n    };\n    /**\n     * Returns apache-arrow specific typeId of column.\n     */\n    ArrowTable.prototype.getColumnTypeId = function (table, columnIndex) {\n        return table.schema.fields[columnIndex].type.typeId;\n    };\n    ArrowTable.prototype.nanosToDate = function (nanos) {\n        return new Date(nanos / 1e6);\n    };\n    return ArrowTable;\n}());\nexport { ArrowTable };\n","/**\n * @license\n * Copyright 2018-2021 Streamlit Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\n// Safari doesn't support the EventTarget class, so we use a shim.\nimport { EventTarget } from \"event-target-shim\";\nimport { ArrowTable } from \"./ArrowTable\";\n/** Messages from Component -> Streamlit */\nvar ComponentMessageType;\n(function (ComponentMessageType) {\n    // A component sends this message when it's ready to receive messages\n    // from Streamlit. Streamlit won't send any messages until it gets this.\n    // Data: { apiVersion: number }\n    ComponentMessageType[\"COMPONENT_READY\"] = \"streamlit:componentReady\";\n    // The component has a new widget value. Send it back to Streamlit, which\n    // will then re-run the app.\n    // Data: { value: any }\n    ComponentMessageType[\"SET_COMPONENT_VALUE\"] = \"streamlit:setComponentValue\";\n    // The component has a new height for its iframe.\n    // Data: { height: number }\n    ComponentMessageType[\"SET_FRAME_HEIGHT\"] = \"streamlit:setFrameHeight\";\n})(ComponentMessageType || (ComponentMessageType = {}));\n/**\n * Streamlit communication API.\n *\n * Components can send data to Streamlit via the functions defined here,\n * and receive data from Streamlit via the `events` property.\n */\nvar Streamlit = /** @class */ (function () {\n    function Streamlit() {\n    }\n    /**\n     * The Streamlit component API version we're targetting.\n     * There's currently only 1!\n     */\n    Streamlit.API_VERSION = 1;\n    Streamlit.RENDER_EVENT = \"streamlit:render\";\n    /** Dispatches events received from Streamlit. */\n    Streamlit.events = new EventTarget();\n    Streamlit.registeredMessageListener = false;\n    /**\n     * Tell Streamlit that the component is ready to start receiving data.\n     * Streamlit will defer emitting RENDER events until it receives the\n     * COMPONENT_READY message.\n     */\n    Streamlit.setComponentReady = function () {\n        if (!Streamlit.registeredMessageListener) {\n            // Register for message events if we haven't already\n            window.addEventListener(\"message\", Streamlit.onMessageEvent);\n            Streamlit.registeredMessageListener = true;\n        }\n        Streamlit.sendBackMsg(ComponentMessageType.COMPONENT_READY, {\n            apiVersion: Streamlit.API_VERSION\n        });\n    };\n    /**\n     * Report the component's height to Streamlit.\n     * This should be called every time the component changes its DOM - that is,\n     * when it's first loaded, and any time it updates.\n     */\n    Streamlit.setFrameHeight = function (height) {\n        if (height === undefined) {\n            // `height` is optional. If undefined, it defaults to scrollHeight,\n            // which is the entire height of the element minus its border,\n            // scrollbar, and margin.\n            height = document.body.scrollHeight;\n        }\n        if (height === Streamlit.lastFrameHeight) {\n            // Don't bother updating if our height hasn't changed.\n            return;\n        }\n        Streamlit.lastFrameHeight = height;\n        Streamlit.sendBackMsg(ComponentMessageType.SET_FRAME_HEIGHT, { height: height });\n    };\n    /**\n     * Set the component's value. This value will be returned to the Python\n     * script, and the script will be re-run.\n     *\n     * For example:\n     *\n     * JavaScript:\n     * Streamlit.setComponentValue(\"ahoy!\")\n     *\n     * Python:\n     * value = st.my_component(...)\n     * st.write(value) # -> \"ahoy!\"\n     *\n     * The value must be an ArrowTable, a typed array, an ArrayBuffer, or be\n     * serializable to JSON.\n     */\n    Streamlit.setComponentValue = function (value) {\n        var dataType;\n        if (value instanceof ArrowTable) {\n            dataType = \"dataframe\";\n            value = value.serialize();\n        }\n        else if (isTypedArray(value)) {\n            // All typed arrays get sent as Uint8Array, because that's what our\n            // protobuf library uses for the \"bytes\" field type.\n            dataType = \"bytes\";\n            value = new Uint8Array(value.buffer);\n        }\n        else if (value instanceof ArrayBuffer) {\n            dataType = \"bytes\";\n            value = new Uint8Array(value);\n        }\n        else {\n            dataType = \"json\";\n        }\n        Streamlit.sendBackMsg(ComponentMessageType.SET_COMPONENT_VALUE, {\n            value: value,\n            dataType: dataType\n        });\n    };\n    /** Receive a ForwardMsg from the Streamlit app */\n    Streamlit.onMessageEvent = function (event) {\n        var type = event.data[\"type\"];\n        switch (type) {\n            case Streamlit.RENDER_EVENT:\n                Streamlit.onRenderMessage(event.data);\n                break;\n        }\n    };\n    /**\n     * Handle an untyped Streamlit render event and redispatch it as a\n     * StreamlitRenderEvent.\n     */\n    Streamlit.onRenderMessage = function (data) {\n        var args = data[\"args\"];\n        if (args == null) {\n            console.error(\"Got null args in onRenderMessage. This should never happen\");\n            args = {};\n        }\n        // Parse our dataframe arguments with arrow, and merge them into our args dict\n        var dataframeArgs = data[\"dfs\"] && data[\"dfs\"].length > 0\n            ? Streamlit.argsDataframeToObject(data[\"dfs\"])\n            : {};\n        args = __assign(__assign({}, args), dataframeArgs);\n        var disabled = Boolean(data[\"disabled\"]);\n        var theme = data[\"theme\"];\n        if (theme) {\n            _injectTheme(theme);\n        }\n        // Dispatch a render event!\n        var eventData = { disabled: disabled, args: args, theme: theme };\n        var event = new CustomEvent(Streamlit.RENDER_EVENT, {\n            detail: eventData\n        });\n        Streamlit.events.dispatchEvent(event);\n    };\n    Streamlit.argsDataframeToObject = function (argsDataframe) {\n        var argsDataframeArrow = argsDataframe.map(function (_a) {\n            var key = _a.key, value = _a.value;\n            return [key, Streamlit.toArrowTable(value)];\n        });\n        return Object.fromEntries(argsDataframeArrow);\n    };\n    Streamlit.toArrowTable = function (df) {\n        var _a = df.data, data = _a.data, index = _a.index, columns = _a.columns, styler = _a.styler;\n        return new ArrowTable(data, index, columns, styler);\n    };\n    /** Post a message to the Streamlit app. */\n    Streamlit.sendBackMsg = function (type, data) {\n        window.parent.postMessage(__assign({ isStreamlitMessage: true, type: type }, data), \"*\");\n    };\n    return Streamlit;\n}());\nexport { Streamlit };\nvar _injectTheme = function (theme) {\n    var style = document.createElement(\"style\");\n    document.head.appendChild(style);\n    style.innerHTML = \"\\n    :root {\\n      --primary-color: \" + theme.primaryColor + \";\\n      --background-color: \" + theme.backgroundColor + \";\\n      --secondary-background-color: \" + theme.secondaryBackgroundColor + \";\\n      --text-color: \" + theme.textColor + \";\\n      --font: \" + theme.font + \";\\n    }\\n\\n    body {\\n      background-color: var(--background-color);\\n      color: var(--text-color);\\n    }\\n  \";\n};\n/** True if the value is a TypedArray. */\nfunction isTypedArray(value) {\n    var isBigIntArray = false;\n    try {\n        isBigIntArray =\n            value instanceof BigInt64Array || value instanceof BigUint64Array;\n    }\n    catch (e) {\n        // Ignore cause Safari does not support this\n        // https://caniuse.com/mdn-javascript_builtins_bigint64array\n    }\n    return (value instanceof Int8Array ||\n        value instanceof Uint8Array ||\n        value instanceof Uint8ClampedArray ||\n        value instanceof Int16Array ||\n        value instanceof Uint16Array ||\n        value instanceof Int32Array ||\n        value instanceof Uint32Array ||\n        value instanceof Float32Array ||\n        value instanceof Float64Array ||\n        isBigIntArray);\n}\n","/**\n * @license\n * Copyright 2018-2021 Streamlit Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport hoistNonReactStatics from \"hoist-non-react-statics\";\nimport React from \"react\";\nimport { Streamlit } from \"./streamlit\";\n/**\n * Optional Streamlit React-based component base class.\n *\n * You are not required to extend this base class to create a Streamlit\n * component. If you decide not to extend it, you should implement the\n * `componentDidMount` and `componentDidUpdate` functions in your own class,\n * so that your plugin properly resizes.\n */\nvar StreamlitComponentBase = /** @class */ (function (_super) {\n    __extends(StreamlitComponentBase, _super);\n    function StreamlitComponentBase() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    StreamlitComponentBase.prototype.componentDidMount = function () {\n        // After we're rendered for the first time, tell Streamlit that our height\n        // has changed.\n        Streamlit.setFrameHeight();\n    };\n    StreamlitComponentBase.prototype.componentDidUpdate = function () {\n        // After we're updated, tell Streamlit that our height may have changed.\n        Streamlit.setFrameHeight();\n    };\n    return StreamlitComponentBase;\n}(React.PureComponent));\nexport { StreamlitComponentBase };\n/**\n * Wrapper for React-based Streamlit components.\n *\n * Bootstraps the communication interface between Streamlit and the component.\n */\nexport function withStreamlitConnection(WrappedComponent) {\n    var ComponentWrapper = /** @class */ (function (_super) {\n        __extends(ComponentWrapper, _super);\n        function ComponentWrapper(props) {\n            var _this = _super.call(this, props) || this;\n            _this.componentDidMount = function () {\n                // Set up event listeners, and signal to Streamlit that we're ready.\n                // We won't render the component until we receive the first RENDER_EVENT.\n                Streamlit.events.addEventListener(Streamlit.RENDER_EVENT, _this.onRenderEvent);\n                Streamlit.setComponentReady();\n            };\n            _this.componentDidUpdate = function () {\n                // If our child threw an error, we display it in render(). In this\n                // case, the child won't be mounted and therefore won't call\n                // `setFrameHeight` on its own. We do it here so that the rendered\n                // error will be visible.\n                if (_this.state.componentError != null) {\n                    Streamlit.setFrameHeight();\n                }\n            };\n            _this.componentWillUnmount = function () {\n                Streamlit.events.removeEventListener(Streamlit.RENDER_EVENT, _this.onRenderEvent);\n            };\n            /**\n             * Streamlit is telling this component to redraw.\n             * We save the render data in State, so that it can be passed to the\n             * component in our own render() function.\n             */\n            _this.onRenderEvent = function (event) {\n                // Update our state with the newest render data\n                var renderEvent = event;\n                _this.setState({ renderData: renderEvent.detail });\n            };\n            _this.render = function () {\n                // If our wrapped component threw an error, display it.\n                if (_this.state.componentError != null) {\n                    return (React.createElement(\"div\", null,\n                        React.createElement(\"h1\", null, \"Component Error\"),\n                        React.createElement(\"span\", null, _this.state.componentError.message)));\n                }\n                // Don't render until we've gotten our first RENDER_EVENT from Streamlit.\n                if (_this.state.renderData == null) {\n                    return null;\n                }\n                return (React.createElement(WrappedComponent, { width: window.innerWidth, disabled: _this.state.renderData.disabled, args: _this.state.renderData.args, theme: _this.state.renderData.theme }));\n            };\n            _this.state = {\n                renderData: undefined,\n                componentError: undefined\n            };\n            return _this;\n        }\n        /**\n         * Error boundary function. This will be called if our wrapped\n         * component throws an error. We store the caught error in our state,\n         * and display it in the next render().\n         */\n        ComponentWrapper.getDerivedStateFromError = function (error) {\n            return { componentError: error };\n        };\n        return ComponentWrapper;\n    }(React.PureComponent));\n    return hoistNonReactStatics(ComponentWrapper, WrappedComponent);\n}\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react.production.min.js');\n} else {\n  module.exports = require('./cjs/react.development.js');\n}\n","/*!\n * cookie\n * Copyright(c) 2012-2014 Roman Shtylman\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module exports.\n * @public\n */\n\nexports.parse = parse;\nexports.serialize = serialize;\n\n/**\n * Module variables.\n * @private\n */\n\nvar decode = decodeURIComponent;\nvar encode = encodeURIComponent;\n\n/**\n * RegExp to match field-content in RFC 7230 sec 3.2\n *\n * field-content = field-vchar [ 1*( SP / HTAB ) field-vchar ]\n * field-vchar   = VCHAR / obs-text\n * obs-text      = %x80-FF\n */\n\nvar fieldContentRegExp = /^[\\u0009\\u0020-\\u007e\\u0080-\\u00ff]+$/;\n\n/**\n * Parse a cookie header.\n *\n * Parse the given cookie header string into an object\n * The object has the various cookies as keys(names) => values\n *\n * @param {string} str\n * @param {object} [options]\n * @return {object}\n * @public\n */\n\nfunction parse(str, options) {\n  if (typeof str !== 'string') {\n    throw new TypeError('argument str must be a string');\n  }\n\n  var obj = {}\n  var opt = options || {};\n  var pairs = str.split(';')\n  var dec = opt.decode || decode;\n\n  for (var i = 0; i < pairs.length; i++) {\n    var pair = pairs[i];\n    var index = pair.indexOf('=')\n\n    // skip things that don't look like key=value\n    if (index < 0) {\n      continue;\n    }\n\n    var key = pair.substring(0, index).trim()\n\n    // only assign once\n    if (undefined == obj[key]) {\n      var val = pair.substring(index + 1, pair.length).trim()\n\n      // quoted values\n      if (val[0] === '\"') {\n        val = val.slice(1, -1)\n      }\n\n      obj[key] = tryDecode(val, dec);\n    }\n  }\n\n  return obj;\n}\n\n/**\n * Serialize data into a cookie header.\n *\n * Serialize the a name value pair into a cookie string suitable for\n * http headers. An optional options object specified cookie parameters.\n *\n * serialize('foo', 'bar', { httpOnly: true })\n *   => \"foo=bar; httpOnly\"\n *\n * @param {string} name\n * @param {string} val\n * @param {object} [options]\n * @return {string}\n * @public\n */\n\nfunction serialize(name, val, options) {\n  var opt = options || {};\n  var enc = opt.encode || encode;\n\n  if (typeof enc !== 'function') {\n    throw new TypeError('option encode is invalid');\n  }\n\n  if (!fieldContentRegExp.test(name)) {\n    throw new TypeError('argument name is invalid');\n  }\n\n  var value = enc(val);\n\n  if (value && !fieldContentRegExp.test(value)) {\n    throw new TypeError('argument val is invalid');\n  }\n\n  var str = name + '=' + value;\n\n  if (null != opt.maxAge) {\n    var maxAge = opt.maxAge - 0;\n\n    if (isNaN(maxAge) || !isFinite(maxAge)) {\n      throw new TypeError('option maxAge is invalid')\n    }\n\n    str += '; Max-Age=' + Math.floor(maxAge);\n  }\n\n  if (opt.domain) {\n    if (!fieldContentRegExp.test(opt.domain)) {\n      throw new TypeError('option domain is invalid');\n    }\n\n    str += '; Domain=' + opt.domain;\n  }\n\n  if (opt.path) {\n    if (!fieldContentRegExp.test(opt.path)) {\n      throw new TypeError('option path is invalid');\n    }\n\n    str += '; Path=' + opt.path;\n  }\n\n  if (opt.expires) {\n    if (typeof opt.expires.toUTCString !== 'function') {\n      throw new TypeError('option expires is invalid');\n    }\n\n    str += '; Expires=' + opt.expires.toUTCString();\n  }\n\n  if (opt.httpOnly) {\n    str += '; HttpOnly';\n  }\n\n  if (opt.secure) {\n    str += '; Secure';\n  }\n\n  if (opt.sameSite) {\n    var sameSite = typeof opt.sameSite === 'string'\n      ? opt.sameSite.toLowerCase() : opt.sameSite;\n\n    switch (sameSite) {\n      case true:\n        str += '; SameSite=Strict';\n        break;\n      case 'lax':\n        str += '; SameSite=Lax';\n        break;\n      case 'strict':\n        str += '; SameSite=Strict';\n        break;\n      case 'none':\n        str += '; SameSite=None';\n        break;\n      default:\n        throw new TypeError('option sameSite is invalid');\n    }\n  }\n\n  return str;\n}\n\n/**\n * Try decoding a string using a decoding function.\n *\n * @param {string} str\n * @param {function} decode\n * @private\n */\n\nfunction tryDecode(str, decode) {\n  try {\n    return decode(str);\n  } catch (e) {\n    return str;\n  }\n}\n","'use strict';\n\nvar reactIs = require('react-is');\n\n/**\n * Copyright 2015, Yahoo! Inc.\n * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\nvar REACT_STATICS = {\n  childContextTypes: true,\n  contextType: true,\n  contextTypes: true,\n  defaultProps: true,\n  displayName: true,\n  getDefaultProps: true,\n  getDerivedStateFromError: true,\n  getDerivedStateFromProps: true,\n  mixins: true,\n  propTypes: true,\n  type: true\n};\nvar KNOWN_STATICS = {\n  name: true,\n  length: true,\n  prototype: true,\n  caller: true,\n  callee: true,\n  arguments: true,\n  arity: true\n};\nvar FORWARD_REF_STATICS = {\n  '$$typeof': true,\n  render: true,\n  defaultProps: true,\n  displayName: true,\n  propTypes: true\n};\nvar MEMO_STATICS = {\n  '$$typeof': true,\n  compare: true,\n  defaultProps: true,\n  displayName: true,\n  propTypes: true,\n  type: true\n};\nvar TYPE_STATICS = {};\nTYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;\nTYPE_STATICS[reactIs.Memo] = MEMO_STATICS;\n\nfunction getStatics(component) {\n  // React v16.11 and below\n  if (reactIs.isMemo(component)) {\n    return MEMO_STATICS;\n  } // React v16.12 and above\n\n\n  return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;\n}\n\nvar defineProperty = Object.defineProperty;\nvar getOwnPropertyNames = Object.getOwnPropertyNames;\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\nvar getPrototypeOf = Object.getPrototypeOf;\nvar objectPrototype = Object.prototype;\nfunction hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {\n  if (typeof sourceComponent !== 'string') {\n    // don't hoist over string (html) components\n    if (objectPrototype) {\n      var inheritedComponent = getPrototypeOf(sourceComponent);\n\n      if (inheritedComponent && inheritedComponent !== objectPrototype) {\n        hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);\n      }\n    }\n\n    var keys = getOwnPropertyNames(sourceComponent);\n\n    if (getOwnPropertySymbols) {\n      keys = keys.concat(getOwnPropertySymbols(sourceComponent));\n    }\n\n    var targetStatics = getStatics(targetComponent);\n    var sourceStatics = getStatics(sourceComponent);\n\n    for (var i = 0; i < keys.length; ++i) {\n      var key = keys[i];\n\n      if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {\n        var descriptor = getOwnPropertyDescriptor(sourceComponent, key);\n\n        try {\n          // Avoid failures from read-only properties\n          defineProperty(targetComponent, key, descriptor);\n        } catch (e) {}\n      }\n    }\n  }\n\n  return targetComponent;\n}\n\nmodule.exports = hoistNonReactStatics;\n","import * as cookie from 'cookie';\r\nexport function hasDocumentCookie() {\r\n    // Can we get/set cookies on document.cookie?\r\n    return typeof document === 'object' && typeof document.cookie === 'string';\r\n}\r\nexport function cleanCookies() {\r\n    document.cookie.split(';').forEach(function (c) {\r\n        document.cookie = c\r\n            .replace(/^ +/, '')\r\n            .replace(/=.*/, '=;expires=' + new Date().toUTCString() + ';path=/');\r\n    });\r\n}\r\nexport function parseCookies(cookies, options) {\r\n    if (typeof cookies === 'string') {\r\n        return cookie.parse(cookies, options);\r\n    }\r\n    else if (typeof cookies === 'object' && cookies !== null) {\r\n        return cookies;\r\n    }\r\n    else {\r\n        return {};\r\n    }\r\n}\r\nexport function isParsingCookie(value, doNotParse) {\r\n    if (typeof doNotParse === 'undefined') {\r\n        // We guess if the cookie start with { or [, it has been serialized\r\n        doNotParse =\r\n            !value || (value[0] !== '{' && value[0] !== '[' && value[0] !== '\"');\r\n    }\r\n    return !doNotParse;\r\n}\r\nexport function readCookie(value, options) {\r\n    if (options === void 0) { options = {}; }\r\n    var cleanValue = cleanupCookieValue(value);\r\n    if (isParsingCookie(cleanValue, options.doNotParse)) {\r\n        try {\r\n            return JSON.parse(cleanValue);\r\n        }\r\n        catch (e) {\r\n            // At least we tried\r\n        }\r\n    }\r\n    // Ignore clean value if we failed the deserialization\r\n    // It is not relevant anymore to trim those values\r\n    return value;\r\n}\r\nfunction cleanupCookieValue(value) {\r\n    // express prepend j: before serializing a cookie\r\n    if (value && value[0] === 'j' && value[1] === ':') {\r\n        return value.substr(2);\r\n    }\r\n    return value;\r\n}\r\n","var __assign = (this && this.__assign) || function () {\r\n    __assign = Object.assign || function(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n                t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\nimport * as cookie from 'cookie';\r\nimport { hasDocumentCookie, parseCookies, readCookie } from './utils';\r\nvar Cookies = /** @class */ (function () {\r\n    function Cookies(cookies, options) {\r\n        var _this = this;\r\n        this.changeListeners = [];\r\n        this.HAS_DOCUMENT_COOKIE = false;\r\n        this.cookies = parseCookies(cookies, options);\r\n        new Promise(function () {\r\n            _this.HAS_DOCUMENT_COOKIE = hasDocumentCookie();\r\n        }).catch(function () { });\r\n    }\r\n    Cookies.prototype._updateBrowserValues = function (parseOptions) {\r\n        if (!this.HAS_DOCUMENT_COOKIE) {\r\n            return;\r\n        }\r\n        this.cookies = cookie.parse(document.cookie, parseOptions);\r\n    };\r\n    Cookies.prototype._emitChange = function (params) {\r\n        for (var i = 0; i < this.changeListeners.length; ++i) {\r\n            this.changeListeners[i](params);\r\n        }\r\n    };\r\n    Cookies.prototype.get = function (name, options, parseOptions) {\r\n        if (options === void 0) { options = {}; }\r\n        this._updateBrowserValues(parseOptions);\r\n        return readCookie(this.cookies[name], options);\r\n    };\r\n    Cookies.prototype.getAll = function (options, parseOptions) {\r\n        if (options === void 0) { options = {}; }\r\n        this._updateBrowserValues(parseOptions);\r\n        var result = {};\r\n        for (var name_1 in this.cookies) {\r\n            result[name_1] = readCookie(this.cookies[name_1], options);\r\n        }\r\n        return result;\r\n    };\r\n    Cookies.prototype.set = function (name, value, options) {\r\n        var _a;\r\n        if (typeof value === 'object') {\r\n            value = JSON.stringify(value);\r\n        }\r\n        this.cookies = __assign(__assign({}, this.cookies), (_a = {}, _a[name] = value, _a));\r\n        if (this.HAS_DOCUMENT_COOKIE) {\r\n            document.cookie = cookie.serialize(name, value, options);\r\n        }\r\n        this._emitChange({ name: name, value: value, options: options });\r\n    };\r\n    Cookies.prototype.remove = function (name, options) {\r\n        var finalOptions = (options = __assign(__assign({}, options), { expires: new Date(1970, 1, 1, 0, 0, 1), maxAge: 0 }));\r\n        this.cookies = __assign({}, this.cookies);\r\n        delete this.cookies[name];\r\n        if (this.HAS_DOCUMENT_COOKIE) {\r\n            document.cookie = cookie.serialize(name, '', finalOptions);\r\n        }\r\n        this._emitChange({ name: name, value: undefined, options: options });\r\n    };\r\n    Cookies.prototype.addChangeListener = function (callback) {\r\n        this.changeListeners.push(callback);\r\n    };\r\n    Cookies.prototype.removeChangeListener = function (callback) {\r\n        var idx = this.changeListeners.indexOf(callback);\r\n        if (idx >= 0) {\r\n            this.changeListeners.splice(idx, 1);\r\n        }\r\n    };\r\n    return Cookies;\r\n}());\r\nexport default Cookies;\r\n","import Cookies from './Cookies';\r\nexport default Cookies;\r\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-is.production.min.js');\n} else {\n  module.exports = require('./cjs/react-is.development.js');\n}\n","/** @license React v16.13.1\n * react-is.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';var b=\"function\"===typeof Symbol&&Symbol.for,c=b?Symbol.for(\"react.element\"):60103,d=b?Symbol.for(\"react.portal\"):60106,e=b?Symbol.for(\"react.fragment\"):60107,f=b?Symbol.for(\"react.strict_mode\"):60108,g=b?Symbol.for(\"react.profiler\"):60114,h=b?Symbol.for(\"react.provider\"):60109,k=b?Symbol.for(\"react.context\"):60110,l=b?Symbol.for(\"react.async_mode\"):60111,m=b?Symbol.for(\"react.concurrent_mode\"):60111,n=b?Symbol.for(\"react.forward_ref\"):60112,p=b?Symbol.for(\"react.suspense\"):60113,q=b?\nSymbol.for(\"react.suspense_list\"):60120,r=b?Symbol.for(\"react.memo\"):60115,t=b?Symbol.for(\"react.lazy\"):60116,v=b?Symbol.for(\"react.block\"):60121,w=b?Symbol.for(\"react.fundamental\"):60117,x=b?Symbol.for(\"react.responder\"):60118,y=b?Symbol.for(\"react.scope\"):60119;\nfunction z(a){if(\"object\"===typeof a&&null!==a){var u=a.$$typeof;switch(u){case c:switch(a=a.type,a){case l:case m:case e:case g:case f:case p:return a;default:switch(a=a&&a.$$typeof,a){case k:case n:case t:case r:case h:return a;default:return u}}case d:return u}}}function A(a){return z(a)===m}exports.AsyncMode=l;exports.ConcurrentMode=m;exports.ContextConsumer=k;exports.ContextProvider=h;exports.Element=c;exports.ForwardRef=n;exports.Fragment=e;exports.Lazy=t;exports.Memo=r;exports.Portal=d;\nexports.Profiler=g;exports.StrictMode=f;exports.Suspense=p;exports.isAsyncMode=function(a){return A(a)||z(a)===l};exports.isConcurrentMode=A;exports.isContextConsumer=function(a){return z(a)===k};exports.isContextProvider=function(a){return z(a)===h};exports.isElement=function(a){return\"object\"===typeof a&&null!==a&&a.$$typeof===c};exports.isForwardRef=function(a){return z(a)===n};exports.isFragment=function(a){return z(a)===e};exports.isLazy=function(a){return z(a)===t};\nexports.isMemo=function(a){return z(a)===r};exports.isPortal=function(a){return z(a)===d};exports.isProfiler=function(a){return z(a)===g};exports.isStrictMode=function(a){return z(a)===f};exports.isSuspense=function(a){return z(a)===p};\nexports.isValidElementType=function(a){return\"string\"===typeof a||\"function\"===typeof a||a===e||a===m||a===g||a===f||a===p||a===q||\"object\"===typeof a&&null!==a&&(a.$$typeof===t||a.$$typeof===r||a.$$typeof===h||a.$$typeof===k||a.$$typeof===n||a.$$typeof===w||a.$$typeof===x||a.$$typeof===y||a.$$typeof===v)};exports.typeOf=z;\n","/** @license React v16.14.0\n * react.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';var l=require(\"object-assign\"),n=\"function\"===typeof Symbol&&Symbol.for,p=n?Symbol.for(\"react.element\"):60103,q=n?Symbol.for(\"react.portal\"):60106,r=n?Symbol.for(\"react.fragment\"):60107,t=n?Symbol.for(\"react.strict_mode\"):60108,u=n?Symbol.for(\"react.profiler\"):60114,v=n?Symbol.for(\"react.provider\"):60109,w=n?Symbol.for(\"react.context\"):60110,x=n?Symbol.for(\"react.forward_ref\"):60112,y=n?Symbol.for(\"react.suspense\"):60113,z=n?Symbol.for(\"react.memo\"):60115,A=n?Symbol.for(\"react.lazy\"):\n60116,B=\"function\"===typeof Symbol&&Symbol.iterator;function C(a){for(var b=\"https://reactjs.org/docs/error-decoder.html?invariant=\"+a,c=1;c<arguments.length;c++)b+=\"&args[]=\"+encodeURIComponent(arguments[c]);return\"Minified React error #\"+a+\"; visit \"+b+\" for the full message or use the non-minified dev environment for full errors and additional helpful warnings.\"}\nvar D={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},E={};function F(a,b,c){this.props=a;this.context=b;this.refs=E;this.updater=c||D}F.prototype.isReactComponent={};F.prototype.setState=function(a,b){if(\"object\"!==typeof a&&\"function\"!==typeof a&&null!=a)throw Error(C(85));this.updater.enqueueSetState(this,a,b,\"setState\")};F.prototype.forceUpdate=function(a){this.updater.enqueueForceUpdate(this,a,\"forceUpdate\")};\nfunction G(){}G.prototype=F.prototype;function H(a,b,c){this.props=a;this.context=b;this.refs=E;this.updater=c||D}var I=H.prototype=new G;I.constructor=H;l(I,F.prototype);I.isPureReactComponent=!0;var J={current:null},K=Object.prototype.hasOwnProperty,L={key:!0,ref:!0,__self:!0,__source:!0};\nfunction M(a,b,c){var e,d={},g=null,k=null;if(null!=b)for(e in void 0!==b.ref&&(k=b.ref),void 0!==b.key&&(g=\"\"+b.key),b)K.call(b,e)&&!L.hasOwnProperty(e)&&(d[e]=b[e]);var f=arguments.length-2;if(1===f)d.children=c;else if(1<f){for(var h=Array(f),m=0;m<f;m++)h[m]=arguments[m+2];d.children=h}if(a&&a.defaultProps)for(e in f=a.defaultProps,f)void 0===d[e]&&(d[e]=f[e]);return{$$typeof:p,type:a,key:g,ref:k,props:d,_owner:J.current}}\nfunction N(a,b){return{$$typeof:p,type:a.type,key:b,ref:a.ref,props:a.props,_owner:a._owner}}function O(a){return\"object\"===typeof a&&null!==a&&a.$$typeof===p}function escape(a){var b={\"=\":\"=0\",\":\":\"=2\"};return\"$\"+(\"\"+a).replace(/[=:]/g,function(a){return b[a]})}var P=/\\/+/g,Q=[];function R(a,b,c,e){if(Q.length){var d=Q.pop();d.result=a;d.keyPrefix=b;d.func=c;d.context=e;d.count=0;return d}return{result:a,keyPrefix:b,func:c,context:e,count:0}}\nfunction S(a){a.result=null;a.keyPrefix=null;a.func=null;a.context=null;a.count=0;10>Q.length&&Q.push(a)}\nfunction T(a,b,c,e){var d=typeof a;if(\"undefined\"===d||\"boolean\"===d)a=null;var g=!1;if(null===a)g=!0;else switch(d){case \"string\":case \"number\":g=!0;break;case \"object\":switch(a.$$typeof){case p:case q:g=!0}}if(g)return c(e,a,\"\"===b?\".\"+U(a,0):b),1;g=0;b=\"\"===b?\".\":b+\":\";if(Array.isArray(a))for(var k=0;k<a.length;k++){d=a[k];var f=b+U(d,k);g+=T(d,f,c,e)}else if(null===a||\"object\"!==typeof a?f=null:(f=B&&a[B]||a[\"@@iterator\"],f=\"function\"===typeof f?f:null),\"function\"===typeof f)for(a=f.call(a),k=\n0;!(d=a.next()).done;)d=d.value,f=b+U(d,k++),g+=T(d,f,c,e);else if(\"object\"===d)throw c=\"\"+a,Error(C(31,\"[object Object]\"===c?\"object with keys {\"+Object.keys(a).join(\", \")+\"}\":c,\"\"));return g}function V(a,b,c){return null==a?0:T(a,\"\",b,c)}function U(a,b){return\"object\"===typeof a&&null!==a&&null!=a.key?escape(a.key):b.toString(36)}function W(a,b){a.func.call(a.context,b,a.count++)}\nfunction aa(a,b,c){var e=a.result,d=a.keyPrefix;a=a.func.call(a.context,b,a.count++);Array.isArray(a)?X(a,e,c,function(a){return a}):null!=a&&(O(a)&&(a=N(a,d+(!a.key||b&&b.key===a.key?\"\":(\"\"+a.key).replace(P,\"$&/\")+\"/\")+c)),e.push(a))}function X(a,b,c,e,d){var g=\"\";null!=c&&(g=(\"\"+c).replace(P,\"$&/\")+\"/\");b=R(b,g,e,d);V(a,aa,b);S(b)}var Y={current:null};function Z(){var a=Y.current;if(null===a)throw Error(C(321));return a}\nvar ba={ReactCurrentDispatcher:Y,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:J,IsSomeRendererActing:{current:!1},assign:l};exports.Children={map:function(a,b,c){if(null==a)return a;var e=[];X(a,e,null,b,c);return e},forEach:function(a,b,c){if(null==a)return a;b=R(null,null,b,c);V(a,W,b);S(b)},count:function(a){return V(a,function(){return null},null)},toArray:function(a){var b=[];X(a,b,null,function(a){return a});return b},only:function(a){if(!O(a))throw Error(C(143));return a}};\nexports.Component=F;exports.Fragment=r;exports.Profiler=u;exports.PureComponent=H;exports.StrictMode=t;exports.Suspense=y;exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=ba;\nexports.cloneElement=function(a,b,c){if(null===a||void 0===a)throw Error(C(267,a));var e=l({},a.props),d=a.key,g=a.ref,k=a._owner;if(null!=b){void 0!==b.ref&&(g=b.ref,k=J.current);void 0!==b.key&&(d=\"\"+b.key);if(a.type&&a.type.defaultProps)var f=a.type.defaultProps;for(h in b)K.call(b,h)&&!L.hasOwnProperty(h)&&(e[h]=void 0===b[h]&&void 0!==f?f[h]:b[h])}var h=arguments.length-2;if(1===h)e.children=c;else if(1<h){f=Array(h);for(var m=0;m<h;m++)f[m]=arguments[m+2];e.children=f}return{$$typeof:p,type:a.type,\nkey:d,ref:g,props:e,_owner:k}};exports.createContext=function(a,b){void 0===b&&(b=null);a={$$typeof:w,_calculateChangedBits:b,_currentValue:a,_currentValue2:a,_threadCount:0,Provider:null,Consumer:null};a.Provider={$$typeof:v,_context:a};return a.Consumer=a};exports.createElement=M;exports.createFactory=function(a){var b=M.bind(null,a);b.type=a;return b};exports.createRef=function(){return{current:null}};exports.forwardRef=function(a){return{$$typeof:x,render:a}};exports.isValidElement=O;\nexports.lazy=function(a){return{$$typeof:A,_ctor:a,_status:-1,_result:null}};exports.memo=function(a,b){return{$$typeof:z,type:a,compare:void 0===b?null:b}};exports.useCallback=function(a,b){return Z().useCallback(a,b)};exports.useContext=function(a,b){return Z().useContext(a,b)};exports.useDebugValue=function(){};exports.useEffect=function(a,b){return Z().useEffect(a,b)};exports.useImperativeHandle=function(a,b,c){return Z().useImperativeHandle(a,b,c)};\nexports.useLayoutEffect=function(a,b){return Z().useLayoutEffect(a,b)};exports.useMemo=function(a,b){return Z().useMemo(a,b)};exports.useReducer=function(a,b,c){return Z().useReducer(a,b,c)};exports.useRef=function(a){return Z().useRef(a)};exports.useState=function(a){return Z().useState(a)};exports.version=\"16.14.0\";\n","/*\nobject-assign\n(c) Sindre Sorhus\n@license MIT\n*/\n\n'use strict';\n/* eslint-disable no-unused-vars */\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nfunction toObject(val) {\n\tif (val === null || val === undefined) {\n\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');\n\t}\n\n\treturn Object(val);\n}\n\nfunction shouldUseNative() {\n\ttry {\n\t\tif (!Object.assign) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Detect buggy property enumeration order in older V8 versions.\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\t\tvar test1 = new String('abc');  // eslint-disable-line no-new-wrappers\n\t\ttest1[5] = 'de';\n\t\tif (Object.getOwnPropertyNames(test1)[0] === '5') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test2 = {};\n\t\tfor (var i = 0; i < 10; i++) {\n\t\t\ttest2['_' + String.fromCharCode(i)] = i;\n\t\t}\n\t\tvar order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n\t\t\treturn test2[n];\n\t\t});\n\t\tif (order2.join('') !== '0123456789') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test3 = {};\n\t\t'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n\t\t\ttest3[letter] = letter;\n\t\t});\n\t\tif (Object.keys(Object.assign({}, test3)).join('') !==\n\t\t\t\t'abcdefghijklmnopqrst') {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t} catch (err) {\n\t\t// We don't expect any of the above to throw, but better to be safe.\n\t\treturn false;\n\t}\n}\n\nmodule.exports = shouldUseNative() ? Object.assign : function (target, source) {\n\tvar from;\n\tvar to = toObject(target);\n\tvar symbols;\n\n\tfor (var s = 1; s < arguments.length; s++) {\n\t\tfrom = Object(arguments[s]);\n\n\t\tfor (var key in from) {\n\t\t\tif (hasOwnProperty.call(from, key)) {\n\t\t\t\tto[key] = from[key];\n\t\t\t}\n\t\t}\n\n\t\tif (getOwnPropertySymbols) {\n\t\t\tsymbols = getOwnPropertySymbols(from);\n\t\t\tfor (var i = 0; i < symbols.length; i++) {\n\t\t\t\tif (propIsEnumerable.call(from, symbols[i])) {\n\t\t\t\t\tto[symbols[i]] = from[symbols[i]];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn to;\n};\n"],"sourceRoot":""}